package com.imum.cpms.model.transactions.eo;

import java.math.BigDecimal;

import java.sql.Timestamp;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sat Sep 13 12:00:36 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class DepositAckDetailsEOImpl extends EntityImpl {
    private static EntityDefImpl mDefinitionObject;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        DepositAckSeq {
            public Object get(DepositAckDetailsEOImpl obj) {
                return obj.getDepositAckSeq();
            }

            public void put(DepositAckDetailsEOImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        BankAccinfoSeq {
            public Object get(DepositAckDetailsEOImpl obj) {
                return obj.getBankAccinfoSeq();
            }

            public void put(DepositAckDetailsEOImpl obj, Object value) {
                obj.setBankAccinfoSeq((BigDecimal)value);
            }
        }
        ,
        DepositeDate {
            public Object get(DepositAckDetailsEOImpl obj) {
                return obj.getDepositeDate();
            }

            public void put(DepositAckDetailsEOImpl obj, Object value) {
                obj.setDepositeDate((Timestamp)value);
            }
        }
        ,
        DepositorName {
            public Object get(DepositAckDetailsEOImpl obj) {
                return obj.getDepositorName();
            }

            public void put(DepositAckDetailsEOImpl obj, Object value) {
                obj.setDepositorName((String)value);
            }
        }
        ,
        DepositeSlipAmt {
            public Object get(DepositAckDetailsEOImpl obj) {
                return obj.getDepositeSlipAmt();
            }

            public void put(DepositAckDetailsEOImpl obj, Object value) {
                obj.setDepositeSlipAmt((BigDecimal)value);
            }
        }
        ,
        DepositeSlipAckDate {
            public Object get(DepositAckDetailsEOImpl obj) {
                return obj.getDepositeSlipAckDate();
            }

            public void put(DepositAckDetailsEOImpl obj, Object value) {
                obj.setDepositeSlipAckDate((Timestamp)value);
            }
        }
        ,
        Depositslipnum {
            public Object get(DepositAckDetailsEOImpl obj) {
                return obj.getDepositslipnum();
            }

            public void put(DepositAckDetailsEOImpl obj, Object value) {
                obj.setDepositslipnum((String)value);
            }
        }
        ,
        CashSource {
            public Object get(DepositAckDetailsEOImpl obj) {
                return obj.getCashSource();
            }

            public void put(DepositAckDetailsEOImpl obj, Object value) {
                obj.setCashSource((String)value);
            }
        }
        ,
        SaleTrnDate {
            public Object get(DepositAckDetailsEOImpl obj) {
                return obj.getSaleTrnDate();
            }

            public void put(DepositAckDetailsEOImpl obj, Object value) {
                obj.setSaleTrnDate((Timestamp)value);
            }
        }
        ,
        Ackslipnum {
            public Object get(DepositAckDetailsEOImpl obj) {
                return obj.getAckslipnum();
            }

            public void put(DepositAckDetailsEOImpl obj, Object value) {
                obj.setAckslipnum((String)value);
            }
        }
        ,
        ExpectedAmt {
            public Object get(DepositAckDetailsEOImpl obj) {
                return obj.getExpectedAmt();
            }

            public void put(DepositAckDetailsEOImpl obj, Object value) {
                obj.setExpectedAmt((BigDecimal)value);
            }
        }
        ,
        Discrepancyflag {
            public Object get(DepositAckDetailsEOImpl obj) {
                return obj.getDiscrepancyflag();
            }

            public void put(DepositAckDetailsEOImpl obj, Object value) {
                obj.setDiscrepancyflag((String)value);
            }
        }
        ,
        CreatedBy {
            public Object get(DepositAckDetailsEOImpl obj) {
                return obj.getCreatedBy();
            }

            public void put(DepositAckDetailsEOImpl obj, Object value) {
                obj.setCreatedBy((String)value);
            }
        }
        ,
        CreatedDate {
            public Object get(DepositAckDetailsEOImpl obj) {
                return obj.getCreatedDate();
            }

            public void put(DepositAckDetailsEOImpl obj, Object value) {
                obj.setCreatedDate((Timestamp)value);
            }
        }
        ,
        Updatedby {
            public Object get(DepositAckDetailsEOImpl obj) {
                return obj.getUpdatedby();
            }

            public void put(DepositAckDetailsEOImpl obj, Object value) {
                obj.setUpdatedby((String)value);
            }
        }
        ,
        updateddate {
            public Object get(DepositAckDetailsEOImpl obj) {
                return obj.getupdateddate();
            }

            public void put(DepositAckDetailsEOImpl obj, Object value) {
                obj.setupdateddate((Timestamp)value);
            }
        }
        ,
        LOCATIONID {
            public Object get(DepositAckDetailsEOImpl obj) {
                return obj.getLOCATIONID();
            }

            public void put(DepositAckDetailsEOImpl obj, Object value) {
                obj.setLOCATIONID((Integer)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public abstract Object get(DepositAckDetailsEOImpl object);

        public abstract void put(DepositAckDetailsEOImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }

    public static final int DEPOSITACKSEQ = AttributesEnum.DepositAckSeq.index();
    public static final int BANKACCINFOSEQ = AttributesEnum.BankAccinfoSeq.index();
    public static final int DEPOSITEDATE = AttributesEnum.DepositeDate.index();
    public static final int DEPOSITORNAME = AttributesEnum.DepositorName.index();
    public static final int DEPOSITESLIPAMT = AttributesEnum.DepositeSlipAmt.index();
    public static final int DEPOSITESLIPACKDATE = AttributesEnum.DepositeSlipAckDate.index();
    public static final int DEPOSITSLIPNUM = AttributesEnum.Depositslipnum.index();
    public static final int CASHSOURCE = AttributesEnum.CashSource.index();
    public static final int SALETRNDATE = AttributesEnum.SaleTrnDate.index();
    public static final int ACKSLIPNUM = AttributesEnum.Ackslipnum.index();
    public static final int EXPECTEDAMT = AttributesEnum.ExpectedAmt.index();
    public static final int DISCREPANCYFLAG = AttributesEnum.Discrepancyflag.index();
    public static final int CREATEDBY = AttributesEnum.CreatedBy.index();
    public static final int CREATEDDATE = AttributesEnum.CreatedDate.index();
    public static final int UPDATEDBY = AttributesEnum.Updatedby.index();
    public static final int UPDATEDDATE = AttributesEnum.updateddate.index();
    public static final int LOCATIONID = AttributesEnum.LOCATIONID.index();

    /**
     * This is the default constructor (do not remove).
     */
    public DepositAckDetailsEOImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        if (mDefinitionObject == null) {
            mDefinitionObject = EntityDefImpl.findDefObject("com.imum.cpms.model.transactions.eo.DepositAckDetailsEO");
        }
        return mDefinitionObject;
    }

    /**
     * Gets the attribute value for DepositAckSeq, using the alias name DepositAckSeq.
     * @return the DepositAckSeq
     */
    public BigDecimal getDepositAckSeq() {
        return (BigDecimal)getAttributeInternal(DEPOSITACKSEQ);
    }

    /**
     * Gets the attribute value for BankAccinfoSeq, using the alias name BankAccinfoSeq.
     * @return the BankAccinfoSeq
     */
    public BigDecimal getBankAccinfoSeq() {
        return (BigDecimal)getAttributeInternal(BANKACCINFOSEQ);
    }

    /**
     * Sets <code>value</code> as the attribute value for BankAccinfoSeq.
     * @param value value to set the BankAccinfoSeq
     */
    public void setBankAccinfoSeq(BigDecimal value) {
        setAttributeInternal(BANKACCINFOSEQ, value);
    }

    /**
     * Gets the attribute value for DepositeDate, using the alias name DepositeDate.
     * @return the DepositeDate
     */
    public Timestamp getDepositeDate() {
        return (Timestamp)getAttributeInternal(DEPOSITEDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for DepositeDate.
     * @param value value to set the DepositeDate
     */
    public void setDepositeDate(Timestamp value) {
        setAttributeInternal(DEPOSITEDATE, value);
    }

    /**
     * Gets the attribute value for DepositorName, using the alias name DepositorName.
     * @return the DepositorName
     */
    public String getDepositorName() {
        return (String)getAttributeInternal(DEPOSITORNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for DepositorName.
     * @param value value to set the DepositorName
     */
    public void setDepositorName(String value) {
        setAttributeInternal(DEPOSITORNAME, value);
    }

    /**
     * Gets the attribute value for DepositeSlipAmt, using the alias name DepositeSlipAmt.
     * @return the DepositeSlipAmt
     */
    public BigDecimal getDepositeSlipAmt() {
        return (BigDecimal)getAttributeInternal(DEPOSITESLIPAMT);
    }

    /**
     * Sets <code>value</code> as the attribute value for DepositeSlipAmt.
     * @param value value to set the DepositeSlipAmt
     */
    public void setDepositeSlipAmt(BigDecimal value) {
        setAttributeInternal(DEPOSITESLIPAMT, value);
    }

    /**
     * Gets the attribute value for DepositeSlipAckDate, using the alias name DepositeSlipAckDate.
     * @return the DepositeSlipAckDate
     */
    public Timestamp getDepositeSlipAckDate() {
        return (Timestamp)getAttributeInternal(DEPOSITESLIPACKDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for DepositeSlipAckDate.
     * @param value value to set the DepositeSlipAckDate
     */
    public void setDepositeSlipAckDate(Timestamp value) {
        setAttributeInternal(DEPOSITESLIPACKDATE, value);
    }

    /**
     * Gets the attribute value for Depositslipnum, using the alias name Depositslipnum.
     * @return the Depositslipnum
     */
    public String getDepositslipnum() {
        return (String)getAttributeInternal(DEPOSITSLIPNUM);
    }

    /**
     * Sets <code>value</code> as the attribute value for Depositslipnum.
     * @param value value to set the Depositslipnum
     */
    public void setDepositslipnum(String value) {
        setAttributeInternal(DEPOSITSLIPNUM, value);
    }

    /**
     * Gets the attribute value for CashSource, using the alias name CashSource.
     * @return the CashSource
     */
    public String getCashSource() {
        return (String)getAttributeInternal(CASHSOURCE);
    }

    /**
     * Sets <code>value</code> as the attribute value for CashSource.
     * @param value value to set the CashSource
     */
    public void setCashSource(String value) {
        setAttributeInternal(CASHSOURCE, value);
    }

    /**
     * Gets the attribute value for SaleTrnDate, using the alias name SaleTrnDate.
     * @return the SaleTrnDate
     */
    public Timestamp getSaleTrnDate() {
        return (Timestamp)getAttributeInternal(SALETRNDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for SaleTrnDate.
     * @param value value to set the SaleTrnDate
     */
    public void setSaleTrnDate(Timestamp value) {
        setAttributeInternal(SALETRNDATE, value);
    }

    /**
     * Gets the attribute value for Ackslipnum, using the alias name Ackslipnum.
     * @return the Ackslipnum
     */
    public String getAckslipnum() {
        return (String)getAttributeInternal(ACKSLIPNUM);
    }

    /**
     * Sets <code>value</code> as the attribute value for Ackslipnum.
     * @param value value to set the Ackslipnum
     */
    public void setAckslipnum(String value) {
        setAttributeInternal(ACKSLIPNUM, value);
    }

    /**
     * Gets the attribute value for ExpectedAmt, using the alias name ExpectedAmt.
     * @return the ExpectedAmt
     */
    public BigDecimal getExpectedAmt() {
        return (BigDecimal)getAttributeInternal(EXPECTEDAMT);
    }

    /**
     * Sets <code>value</code> as the attribute value for ExpectedAmt.
     * @param value value to set the ExpectedAmt
     */
    public void setExpectedAmt(BigDecimal value) {
        setAttributeInternal(EXPECTEDAMT, value);
    }

    /**
     * Gets the attribute value for Discrepancyflag, using the alias name Discrepancyflag.
     * @return the Discrepancyflag
     */
    public String getDiscrepancyflag() {
        return (String)getAttributeInternal(DISCREPANCYFLAG);
    }

    /**
     * Sets <code>value</code> as the attribute value for Discrepancyflag.
     * @param value value to set the Discrepancyflag
     */
    public void setDiscrepancyflag(String value) {
        setAttributeInternal(DISCREPANCYFLAG, value);
    }

    /**
     * Gets the attribute value for CreatedBy, using the alias name CreatedBy.
     * @return the CreatedBy
     */
    public String getCreatedBy() {
        return (String)getAttributeInternal(CREATEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for CreatedBy.
     * @param value value to set the CreatedBy
     */
    public void setCreatedBy(String value) {
        setAttributeInternal(CREATEDBY, value);
    }

    /**
     * Gets the attribute value for CreatedDate, using the alias name CreatedDate.
     * @return the CreatedDate
     */
    public Timestamp getCreatedDate() {
        return (Timestamp)getAttributeInternal(CREATEDDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for CreatedDate.
     * @param value value to set the CreatedDate
     */
    public void setCreatedDate(Timestamp value) {
        setAttributeInternal(CREATEDDATE, value);
    }

    /**
     * Gets the attribute value for Updatedby, using the alias name Updatedby.
     * @return the Updatedby
     */
    public String getUpdatedby() {
        return (String)getAttributeInternal(UPDATEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for Updatedby.
     * @param value value to set the Updatedby
     */
    public void setUpdatedby(String value) {
        setAttributeInternal(UPDATEDBY, value);
    }

    /**
     * Gets the attribute value for updateddate, using the alias name updateddate.
     * @return the updateddate
     */
    public Timestamp getupdateddate() {
        return (Timestamp)getAttributeInternal(UPDATEDDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for updateddate.
     * @param value value to set the updateddate
     */
    public void setupdateddate(Timestamp value) {
        setAttributeInternal(UPDATEDDATE, value);
    }

    /**
     * Gets the attribute value for LOCATIONID, using the alias name LOCATIONID.
     * @return the LOCATIONID
     */
    public Integer getLOCATIONID() {
        return (Integer)getAttributeInternal(LOCATIONID);
    }

    /**
     * Sets <code>value</code> as the attribute value for LOCATIONID.
     * @param value value to set the LOCATIONID
     */
    public void setLOCATIONID(Integer value) {
        setAttributeInternal(LOCATIONID, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }


    /**
     * @param depositAckSeq key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(BigDecimal depositAckSeq) {
        return new Key(new Object[]{depositAckSeq});
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        super.create(attributeList);
    }

    /**
     * Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        super.doDML(operation, e);
    }
}
