package com.imum.cpms.model.transactions.vo;

import java.math.BigDecimal;

import oracle.jbo.RowSet;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Nov 17 11:08:23 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class PVTCategorizedChargesRVORowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        PVTHDRSEQ {
            public Object get(PVTCategorizedChargesRVORowImpl obj) {
                return obj.getPVTHDRSEQ();
            }

            public void put(PVTCategorizedChargesRVORowImpl obj,
                            Object value) {
                obj.setPVTHDRSEQ((BigDecimal)value);
            }
        }
        ,
        ChargeType {
            public Object get(PVTCategorizedChargesRVORowImpl obj) {
                return obj.getChargeType();
            }

            public void put(PVTCategorizedChargesRVORowImpl obj,
                            Object value) {
                obj.setChargeType((Integer)value);
            }
        }
        ,
        ChargeAmount {
            public Object get(PVTCategorizedChargesRVORowImpl obj) {
                return obj.getChargeAmount();
            }

            public void put(PVTCategorizedChargesRVORowImpl obj,
                            Object value) {
                obj.setChargeAmount((BigDecimal)value);
            }
        }
        ,
        GenRefDataDetailLovVO1 {
            public Object get(PVTCategorizedChargesRVORowImpl obj) {
                return obj.getGenRefDataDetailLovVO1();
            }

            public void put(PVTCategorizedChargesRVORowImpl obj,
                            Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public abstract Object get(PVTCategorizedChargesRVORowImpl object);

        public abstract void put(PVTCategorizedChargesRVORowImpl object,
                                 Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int PVTHDRSEQ = AttributesEnum.PVTHDRSEQ.index();
    public static final int CHARGETYPE = AttributesEnum.ChargeType.index();
    public static final int CHARGEAMOUNT = AttributesEnum.ChargeAmount.index();
    public static final int GENREFDATADETAILLOVVO1 = AttributesEnum.GenRefDataDetailLovVO1.index();

    /**
     * This is the default constructor (do not remove).
     */
    public PVTCategorizedChargesRVORowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute PVTHDRSEQ.
     * @return the PVTHDRSEQ
     */
    public BigDecimal getPVTHDRSEQ() {
        return (BigDecimal) getAttributeInternal(PVTHDRSEQ);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute PVTHDRSEQ.
     * @param value value to set the  PVTHDRSEQ
     */
    public void setPVTHDRSEQ(BigDecimal value) {
        setAttributeInternal(PVTHDRSEQ, value);
    }

    /**
     * Gets the attribute value for the calculated attribute ChargeType.
     * @return the ChargeType
     */
    public Integer getChargeType() {
        return (Integer) getAttributeInternal(CHARGETYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ChargeType.
     * @param value value to set the  ChargeType
     */
    public void setChargeType(Integer value) {
        setAttributeInternal(CHARGETYPE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute ChargeAmount.
     * @return the ChargeAmount
     */
    public BigDecimal getChargeAmount() {
        return (BigDecimal) getAttributeInternal(CHARGEAMOUNT);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ChargeAmount.
     * @param value value to set the  ChargeAmount
     */
    public void setChargeAmount(BigDecimal value) {
        setAttributeInternal(CHARGEAMOUNT, value);
    }

    /**
     * Gets the view accessor <code>RowSet</code> GenRefDataDetailLovVO1.
     */
    public RowSet getGenRefDataDetailLovVO1() {
        return (RowSet)getAttributeInternal(GENREFDATADETAILLOVVO1);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}
