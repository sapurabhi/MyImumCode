package com.imum.cpms.model.transactions.eo;

import java.math.BigDecimal;

import java.sql.CallableStatement;
import java.sql.Date;
import java.sql.Timestamp;

import java.sql.Types;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Jul 17 12:35:25 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class InventoryStockUploadEOImpl extends EntityImpl {
    private static EntityDefImpl mDefinitionObject;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        UploadSeq {
            public Object get(InventoryStockUploadEOImpl obj) {
                return obj.getUploadSeq();
            }

            public void put(InventoryStockUploadEOImpl obj, Object value) {
                obj.setUploadSeq((BigDecimal)value);
            }
        }
        ,
        UploadDate {
            public Object get(InventoryStockUploadEOImpl obj) {
                return obj.getUploadDate();
            }

            public void put(InventoryStockUploadEOImpl obj, Object value) {
                obj.setUploadDate((Timestamp)value);
            }
        }
        ,
        VendorID {
            public Object get(InventoryStockUploadEOImpl obj) {
                return obj.getVendorID();
            }

            public void put(InventoryStockUploadEOImpl obj, Object value) {
                obj.setVendorID((Integer)value);
            }
        }
        ,
        CreatedBy {
            public Object get(InventoryStockUploadEOImpl obj) {
                return obj.getCreatedBy();
            }

            public void put(InventoryStockUploadEOImpl obj, Object value) {
                obj.setCreatedBy((String)value);
            }
        }
        ,
        CreatedDate {
            public Object get(InventoryStockUploadEOImpl obj) {
                return obj.getCreatedDate();
            }

            public void put(InventoryStockUploadEOImpl obj, Object value) {
                obj.setCreatedDate((Timestamp)value);
            }
        }
        ,
        Updatedby {
            public Object get(InventoryStockUploadEOImpl obj) {
                return obj.getUpdatedby();
            }

            public void put(InventoryStockUploadEOImpl obj, Object value) {
                obj.setUpdatedby((String)value);
            }
        }
        ,
        Updatedate {
            public Object get(InventoryStockUploadEOImpl obj) {
                return obj.getUpdatedate();
            }

            public void put(InventoryStockUploadEOImpl obj, Object value) {
                obj.setUpdatedate((Timestamp)value);
            }
        }
        ,
        Totalcardsreceived {
            public Object get(InventoryStockUploadEOImpl obj) {
                return obj.getTotalcardsreceived();
            }

            public void put(InventoryStockUploadEOImpl obj, Object value) {
                obj.setTotalcardsreceived((Integer)value);
            }
        }
        ,
        TotalErrorcards {
            public Object get(InventoryStockUploadEOImpl obj) {
                return obj.getTotalErrorcards();
            }

            public void put(InventoryStockUploadEOImpl obj, Object value) {
                obj.setTotalErrorcards((Integer)value);
            }
        }
        ,
        filename {
            public Object get(InventoryStockUploadEOImpl obj) {
                return obj.getfilename();
            }

            public void put(InventoryStockUploadEOImpl obj, Object value) {
                obj.setfilename((String)value);
            }
        }
        ,
        reuploadaprvseq {
            public Object get(InventoryStockUploadEOImpl obj) {
                return obj.getreuploadaprvseq();
            }

            public void put(InventoryStockUploadEOImpl obj, Object value) {
                obj.setreuploadaprvseq((BigDecimal)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public abstract Object get(InventoryStockUploadEOImpl object);

        public abstract void put(InventoryStockUploadEOImpl object,
                                 Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int UPLOADSEQ = AttributesEnum.UploadSeq.index();
    public static final int UPLOADDATE = AttributesEnum.UploadDate.index();
    public static final int VENDORID = AttributesEnum.VendorID.index();
    public static final int CREATEDBY = AttributesEnum.CreatedBy.index();
    public static final int CREATEDDATE = AttributesEnum.CreatedDate.index();
    public static final int UPDATEDBY = AttributesEnum.Updatedby.index();
    public static final int UPDATEDATE = AttributesEnum.Updatedate.index();
    public static final int TOTALCARDSRECEIVED = AttributesEnum.Totalcardsreceived.index();
    public static final int TOTALERRORCARDS = AttributesEnum.TotalErrorcards.index();
    public static final int FILENAME = AttributesEnum.filename.index();
    public static final int REUPLOADAPRVSEQ = AttributesEnum.reuploadaprvseq.index();

    /**
     * This is the default constructor (do not remove).
     */
    public InventoryStockUploadEOImpl() {
    }


    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        if (mDefinitionObject == null) {
            mDefinitionObject = EntityDefImpl.findDefObject("com.imum.cpms.model.transactions.eo.InventoryStockUploadEO");
        }
        return mDefinitionObject;
    }

    /**
     * Gets the attribute value for UploadSeq, using the alias name UploadSeq.
     * @return the UploadSeq
     */
    public BigDecimal getUploadSeq() {
        return (BigDecimal)getAttributeInternal(UPLOADSEQ);
    }

    /**
     * Sets <code>value</code> as the attribute value for UploadSeq.
     * @param value value to set the UploadSeq
     */
    public void setUploadSeq(BigDecimal value) {
        setAttributeInternal(UPLOADSEQ, value);
    }

    /**
     * Gets the attribute value for UploadDate, using the alias name UploadDate.
     * @return the UploadDate
     */
    public Timestamp getUploadDate() {
        return (Timestamp)getAttributeInternal(UPLOADDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for UploadDate.
     * @param value value to set the UploadDate
     */
    public void setUploadDate(Timestamp value) {
        setAttributeInternal(UPLOADDATE, value);
    }

    /**
     * Gets the attribute value for VendorID, using the alias name VendorID.
     * @return the VendorID
     */
    public Integer getVendorID() {
        return (Integer)getAttributeInternal(VENDORID);
    }

    /**
     * Sets <code>value</code> as the attribute value for VendorID.
     * @param value value to set the VendorID
     */
    public void setVendorID(Integer value) {
        setAttributeInternal(VENDORID, value);
    }

    /**
     * Gets the attribute value for CreatedBy, using the alias name CreatedBy.
     * @return the CreatedBy
     */
    public String getCreatedBy() {
        return (String)getAttributeInternal(CREATEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for CreatedBy.
     * @param value value to set the CreatedBy
     */
    public void setCreatedBy(String value) {
        setAttributeInternal(CREATEDBY, value);
    }

    /**
     * Gets the attribute value for CreatedDate, using the alias name CreatedDate.
     * @return the CreatedDate
     */
    public Timestamp getCreatedDate() {
        return (Timestamp)getAttributeInternal(CREATEDDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for CreatedDate.
     * @param value value to set the CreatedDate
     */
    public void setCreatedDate(Timestamp value) {
        setAttributeInternal(CREATEDDATE, value);
    }

    /**
     * Gets the attribute value for Updatedby, using the alias name Updatedby.
     * @return the Updatedby
     */
    public String getUpdatedby() {
        return (String)getAttributeInternal(UPDATEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for Updatedby.
     * @param value value to set the Updatedby
     */
    public void setUpdatedby(String value) {
        setAttributeInternal(UPDATEDBY, value);
    }

    /**
     * Gets the attribute value for Updatedate, using the alias name Updatedate.
     * @return the Updatedate
     */
    public Timestamp getUpdatedate() {
        return (Timestamp)getAttributeInternal(UPDATEDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for Updatedate.
     * @param value value to set the Updatedate
     */
    public void setUpdatedate(Timestamp value) {
        setAttributeInternal(UPDATEDATE, value);
    }

    /**
     * Gets the attribute value for Totalcardsreceived, using the alias name Totalcardsreceived.
     * @return the Totalcardsreceived
     */
    public Integer getTotalcardsreceived() {
        return (Integer)getAttributeInternal(TOTALCARDSRECEIVED);
    }

    /**
     * Sets <code>value</code> as the attribute value for Totalcardsreceived.
     * @param value value to set the Totalcardsreceived
     */
    public void setTotalcardsreceived(Integer value) {
        setAttributeInternal(TOTALCARDSRECEIVED, value);
    }

    /**
     * Gets the attribute value for TotalErrorcards, using the alias name TotalErrorcards.
     * @return the TotalErrorcards
     */
    public Integer getTotalErrorcards() {
        return (Integer)getAttributeInternal(TOTALERRORCARDS);
    }

    /**
     * Sets <code>value</code> as the attribute value for TotalErrorcards.
     * @param value value to set the TotalErrorcards
     */
    public void setTotalErrorcards(Integer value) {
        setAttributeInternal(TOTALERRORCARDS, value);
    }

    /**
     * Gets the attribute value for filename, using the alias name filename.
     * @return the filename
     */
    public String getfilename() {
        return (String)getAttributeInternal(FILENAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for filename.
     * @param value value to set the filename
     */
    public void setfilename(String value) {
        setAttributeInternal(FILENAME, value);
    }

    /**
     * Gets the attribute value for reuploadaprvseq, using the alias name reuploadaprvseq.
     * @return the reuploadaprvseq
     */
    public BigDecimal getreuploadaprvseq() {
        return (BigDecimal)getAttributeInternal(REUPLOADAPRVSEQ);
    }

    /**
     * Sets <code>value</code> as the attribute value for reuploadaprvseq.
     * @param value value to set the reuploadaprvseq
     */
    public void setreuploadaprvseq(BigDecimal value) {
        setAttributeInternal(REUPLOADAPRVSEQ, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }


    /**
     * @param uploadSeq key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(BigDecimal uploadSeq) {
        return new Key(new Object[]{uploadSeq});
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        super.create(attributeList);
        CallableStatement stmt = null;
                try {
                    System.out.println("getting uploaded sequence... @");
                    stmt = getDBTransaction().createCallableStatement("{call SEQUENCE_MST_INV(?,?) }", 0);//sequence_mst_trigger
                    stmt.setString(1, "INV_UPLOAD_SEQ");            
                    stmt.registerOutParameter(2, Types.BIGINT);
                    stmt.execute();           
                    BigDecimal SeqNum = stmt.getBigDecimal(2);
                    setUploadSeq(SeqNum);
                    System.out.println("Upload Sequence value in UploadHdrEO is : "+getUploadSeq());
                }  catch (Exception e) {
                                e.printStackTrace();
                       }
    }

    /**
     * Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        super.doDML(operation, e);
    }
}
