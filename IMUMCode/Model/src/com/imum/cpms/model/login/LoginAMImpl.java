package com.imum.cpms.model.login;

import com.imum.cpms.model.login.common.LoginAM;

import java.sql.CallableStatement;
import java.sql.PreparedStatement;

import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Types;

import java.util.Date;

import javax.faces.context.FacesContext;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Jun 09 14:32:53 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class LoginAMImpl extends ApplicationModuleImpl implements LoginAM {
    /**
     * This is the default constructor (do not remove).
     */
    public LoginAMImpl() {
    }
    
    private String lastLoginDate;

    /**
     * Container's getter for LoginVO1.
     * @return LoginVO1
     */
    public LoginVOImpl getLoginVO1() {
        return (LoginVOImpl)findViewObject("LoginVO1");
    }
    
    
    
    public String getHashString(String str){
//            if(true)return str;
            String HashStr ="";
                    CallableStatement stmt = null;
                    try {
                    
                    stmt = getDBTransaction().createCallableStatement("{call  gen_hashstring(?,?) }", 0);
                    stmt.setString(1, str);            
                    stmt.registerOutParameter(2, Types.VARCHAR);
                    stmt.execute();           
                    HashStr = stmt.getString(2);
                    
            System.out.println("output is "+HashStr);
                        return HashStr;

                } catch (SQLException sqlerr) {
                    sqlerr.printStackTrace();//throw new JboException(closeerr);
                } finally {
                    try {
                        if (stmt != null) {
                            stmt.close();
                        }
                    } catch (SQLException closeerr) {
                        closeerr.printStackTrace();//throw new JboException(closeerr);
                    } 
                    if(HashStr.equalsIgnoreCase(""))return "error";
                    else return HashStr;
                }
       
        }
    
    
    public String encryptLdapData(String value)
    {
//        if(true)return value;
        String encryPtPass = null;
        PreparedStatement preparedStatement = null;
        try {
            String sql = "select convert(varbinary(80),'"+value+"') as resultVal;" ;
            preparedStatement = getDBTransaction().createPreparedStatement(sql, 0);                   
            ResultSet rs =  preparedStatement.executeQuery();
            ResultSetMetaData rsmd = rs.getMetaData();
           System.out.println(rsmd.getColumnType(1));
            if(rs != null )
            {
                while(rs.next())
                {
                encryPtPass = rs.getString("resultVal");
                }                                                
            }                      
        }  catch (Exception e) {
            System.out.println("encryptData exception : "+e.getMessage());
        }
        return encryPtPass;   
    }
    

    public Boolean checkLoginCredentials(String enteredUserid, String enteredPassword)
    {
       Boolean result = true;
        String HashPwd = getHashString(enteredPassword);
        System.out.println("Hashed enteredPassword is :"+HashPwd);
        System.out.println("Validating entered credentials....." + enteredUserid + " +++ " + enteredPassword);
        setLastLoginDate(null);
        LoginVOImpl loginVO = getLoginVO1();
        loginVO.setWhereClause("user_id = '" + enteredUserid + "' and password= convert(varbinary(80),'"+ HashPwd + "') ");
        System.out.println("getQuery..." + loginVO.getQuery().toString());
        try {
            loginVO.executeQuery();
        } catch (Exception e) {
            System.out.println("Error occurred..." + e.toString());
        }
        UserVOImpl userVO = (UserVOImpl)this.getUserVO1();
        userVO.setWhereClause("user_id = '" + enteredUserid + "' and password= convert(varbinary(80),'"+ HashPwd + "') ");
        System.out.println("getQuery...--UserVO" + userVO.getQuery().toString());
        userVO.executeQuery();
        try {
            loginVO.executeQuery();
        } catch (Exception e) {
            System.out.println("Error occurred..." + e.toString());
        }
        Row currentRow = userVO.first();
        if(currentRow != null)
        {
            Date lastLoginDate = (Date)currentRow.getAttribute("Lastlogindatetime");
            if(currentRow.getAttribute("LoginPrintID")!=null) {
                String loginprintid=currentRow.getAttribute("LoginPrintID").toString();
                System.out.println(loginprintid);
                FacesContext.getCurrentInstance().getExternalContext().getSessionMap().put("loginprintid", loginprintid);
            }
             System.out.println("lastLoginDate"+lastLoginDate);
                       if(lastLoginDate ==   null){
                setLastLoginDate("true");
            }else{
                setLastLoginDate("false"); 
            }
            int rowCount = loginVO.getEstimatedRangePageCount();
            System.out.println("Retrieved rowCount = " + rowCount);
            if (rowCount == 0) {
                result = false;
                //throw new JboException("Invalid Userid / Password, Please enter again");
            }    
        }
        else
        {
            result = false;
//            throw new JboException("Invalid Userid / Password, Please enter again");    
        }       
        loginVO.clearCache();
        return result;
    }
    /**
     * Subiksha - 17-10-2014
     * Convert pwd to varbinary
     */
        public void convertPwd(String userId, String pwd)
        {
            String HashPwd = getHashString(pwd);
            PreparedStatement preparedStatement = null;
            try {
                String sql = "update gen_user_mst set password1 = password, password2 = password1, password3 = password2 , password4 = password3 , password = convert(varbinary(80),'"+HashPwd+"') where user_id = '"+userId+"'";
               // String sql = "update gen_user_mst set password = convert(varbinary,'"+pwd+"') where user_id = '"+userId+"'";
                preparedStatement = getDBTransaction().createPreparedStatement(sql, 0);
                preparedStatement.executeUpdate();
                getDBTransaction().commit();
            }  catch (Exception e) {
                e.printStackTrace();
            }
        }
   
   
    public void commit() {
        System.out.println("Committing the data....into database");
        getDBTransaction().commit();
    }
    
    /**
     * Container's getter for ResetPasswordVO1.
     * @return ResetPasswordVO1
     */
    public ViewObjectImpl getResetPasswordVO1() {
        return (ViewObjectImpl)findViewObject("ResetPasswordVO1");
    }

    /**
     * Container's getter for UserVO1.
     * @return UserVO1
     */
    public ViewObjectImpl getUserVO1() {
        return (ViewObjectImpl)findViewObject("UserVO1");
    }


    public void setLastLoginDate(String lastLoginDate) {
        this.lastLoginDate = lastLoginDate;
    }

    public String getLastLoginDate() {
        return lastLoginDate;
    }
}
