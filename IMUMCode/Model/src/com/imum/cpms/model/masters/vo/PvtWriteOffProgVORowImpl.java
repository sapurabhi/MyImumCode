package com.imum.cpms.model.masters.vo;

import java.math.BigDecimal;

import java.sql.Timestamp;

import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Sep 22 12:23:31 IST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class PvtWriteOffProgVORowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        PVTNo {
            public Object get(PvtWriteOffProgVORowImpl obj) {
                return obj.getPVTNo();
            }

            public void put(PvtWriteOffProgVORowImpl obj, Object value) {
                obj.setPVTNo((String)value);
            }
        }
        ,
        PVTDate {
            public Object get(PvtWriteOffProgVORowImpl obj) {
                return obj.getPVTDate();
            }

            public void put(PvtWriteOffProgVORowImpl obj, Object value) {
                obj.setPVTDate((Timestamp)value);
            }
        }
        ,
        OutstandingAmt {
            public Object get(PvtWriteOffProgVORowImpl obj) {
                return obj.getOutstandingAmt();
            }

            public void put(PvtWriteOffProgVORowImpl obj, Object value) {
                obj.setOutstandingAmt((BigDecimal)value);
            }
        }
        ,
        Remarks {
            public Object get(PvtWriteOffProgVORowImpl obj) {
                return obj.getRemarks();
            }

            public void put(PvtWriteOffProgVORowImpl obj, Object value) {
                obj.setRemarks((String)value);
            }
        }
        ,
        Document {
            public Object get(PvtWriteOffProgVORowImpl obj) {
                return obj.getDocument();
            }

            public void put(PvtWriteOffProgVORowImpl obj, Object value) {
                obj.setDocument((String)value);
            }
        }
        ,
        Remove {
            public Object get(PvtWriteOffProgVORowImpl obj) {
                return obj.getRemove();
            }

            public void put(PvtWriteOffProgVORowImpl obj, Object value) {
                obj.setRemove((String)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public abstract Object get(PvtWriteOffProgVORowImpl object);

        public abstract void put(PvtWriteOffProgVORowImpl object,
                                 Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int PVTNO = AttributesEnum.PVTNo.index();
    public static final int PVTDATE = AttributesEnum.PVTDate.index();
    public static final int OUTSTANDINGAMT = AttributesEnum.OutstandingAmt.index();
    public static final int REMARKS = AttributesEnum.Remarks.index();
    public static final int DOCUMENT = AttributesEnum.Document.index();
    public static final int REMOVE = AttributesEnum.Remove.index();

    /**
     * This is the default constructor (do not remove).
     */
    public PvtWriteOffProgVORowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute PVTNo.
     * @return the PVTNo
     */
    public String getPVTNo() {
        return (String) getAttributeInternal(PVTNO);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute PVTNo.
     * @param value value to set the  PVTNo
     */
    public void setPVTNo(String value) {
        setAttributeInternal(PVTNO, value);
    }

    /**
     * Gets the attribute value for the calculated attribute PVTDate.
     * @return the PVTDate
     */
    public Timestamp getPVTDate() {
        return (Timestamp) getAttributeInternal(PVTDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute PVTDate.
     * @param value value to set the  PVTDate
     */
    public void setPVTDate(Timestamp value) {
        setAttributeInternal(PVTDATE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute OutstandingAmt.
     * @return the OutstandingAmt
     */
    public BigDecimal getOutstandingAmt() {
        return (BigDecimal) getAttributeInternal(OUTSTANDINGAMT);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute OutstandingAmt.
     * @param value value to set the  OutstandingAmt
     */
    public void setOutstandingAmt(BigDecimal value) {
        setAttributeInternal(OUTSTANDINGAMT, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Remarks.
     * @return the Remarks
     */
    public String getRemarks() {
        return (String) getAttributeInternal(REMARKS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Remarks.
     * @param value value to set the  Remarks
     */
    public void setRemarks(String value) {
        setAttributeInternal(REMARKS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Document.
     * @return the Document
     */
    public String getDocument() {
        return (String) getAttributeInternal(DOCUMENT);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Document.
     * @param value value to set the  Document
     */
    public void setDocument(String value) {
        setAttributeInternal(DOCUMENT, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Remove.
     * @return the Remove
     */
    public String getRemove() {
        return (String) getAttributeInternal(REMOVE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Remove.
     * @param value value to set the  Remove
     */
    public void setRemove(String value) {
        setAttributeInternal(REMOVE, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}
