package com.imum.cpms.model.masters.vo;

import java.math.BigDecimal;

import java.sql.Timestamp;

import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Jul 06 11:10:08 IST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class PVTcourtsearchVORowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        PVTNum {
            public Object get(PVTcourtsearchVORowImpl obj) {
                return obj.getPVTNum();
            }

            public void put(PVTcourtsearchVORowImpl obj, Object value) {
                obj.setPVTNum((String)value);
            }
        }
        ,
        PVTHDRSEQ {
            public Object get(PVTcourtsearchVORowImpl obj) {
                return obj.getPVTHDRSEQ();
            }

            public void put(PVTcourtsearchVORowImpl obj, Object value) {
                obj.setPVTHDRSEQ((BigDecimal)value);
            }
        }
        ,
        PVTAMTPAYABLE {
            public Object get(PVTcourtsearchVORowImpl obj) {
                return obj.getPVTAMTPAYABLE();
            }

            public void put(PVTcourtsearchVORowImpl obj, Object value) {
                obj.setPVTAMTPAYABLE((BigDecimal)value);
            }
        }
        ,
        PVTdatetime {
            public Object get(PVTcourtsearchVORowImpl obj) {
                return obj.getPVTdatetime();
            }

            public void put(PVTcourtsearchVORowImpl obj, Object value) {
                obj.setPVTdatetime((Timestamp)value);
            }
        }
        ,
        contraDesc {
            public Object get(PVTcourtsearchVORowImpl obj) {
                return obj.getcontraDesc();
            }

            public void put(PVTcourtsearchVORowImpl obj, Object value) {
                obj.setcontraDesc((String)value);
            }
        }
        ,
        statusDesc {
            public Object get(PVTcourtsearchVORowImpl obj) {
                return obj.getstatusDesc();
            }

            public void put(PVTcourtsearchVORowImpl obj, Object value) {
                obj.setstatusDesc((String)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public abstract Object get(PVTcourtsearchVORowImpl object);

        public abstract void put(PVTcourtsearchVORowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int PVTNUM = AttributesEnum.PVTNum.index();
    public static final int PVTHDRSEQ = AttributesEnum.PVTHDRSEQ.index();
    public static final int PVTAMTPAYABLE = AttributesEnum.PVTAMTPAYABLE.index();
    public static final int PVTDATETIME = AttributesEnum.PVTdatetime.index();
    public static final int CONTRADESC = AttributesEnum.contraDesc.index();
    public static final int STATUSDESC = AttributesEnum.statusDesc.index();

    /**
     * This is the default constructor (do not remove).
     */
    public PVTcourtsearchVORowImpl() {
    }

    /**
     * Gets PVTHeaderEO entity object.
     * @return the PVTHeaderEO
     */
    public EntityImpl getPVTHeaderEO() {
        return (EntityImpl)getEntity(0);
    }

    /**
     * Gets the attribute value for PVT_Num using the alias name PVTNum.
     * @return the PVT_Num
     */
    public String getPVTNum() {
        return (String) getAttributeInternal(PVTNUM);
    }

    /**
     * Sets <code>value</code> as attribute value for PVT_Num using the alias name PVTNum.
     * @param value value to set the PVT_Num
     */
    public void setPVTNum(String value) {
        setAttributeInternal(PVTNUM, value);
    }

    /**
     * Gets the attribute value for PVT_HDR_SEQ using the alias name PVTHDRSEQ.
     * @return the PVT_HDR_SEQ
     */
    public BigDecimal getPVTHDRSEQ() {
        return (BigDecimal) getAttributeInternal(PVTHDRSEQ);
    }

    /**
     * Sets <code>value</code> as attribute value for PVT_HDR_SEQ using the alias name PVTHDRSEQ.
     * @param value value to set the PVT_HDR_SEQ
     */
    public void setPVTHDRSEQ(BigDecimal value) {
        setAttributeInternal(PVTHDRSEQ, value);
    }

    /**
     * Gets the attribute value for PVT_AMT_PAYABLE using the alias name PVTAMTPAYABLE.
     * @return the PVT_AMT_PAYABLE
     */
    public BigDecimal getPVTAMTPAYABLE() {
        return (BigDecimal) getAttributeInternal(PVTAMTPAYABLE);
    }

    /**
     * Sets <code>value</code> as attribute value for PVT_AMT_PAYABLE using the alias name PVTAMTPAYABLE.
     * @param value value to set the PVT_AMT_PAYABLE
     */
    public void setPVTAMTPAYABLE(BigDecimal value) {
        setAttributeInternal(PVTAMTPAYABLE, value);
    }

    /**
     * Gets the attribute value for PVT_date_time using the alias name PVTdatetime.
     * @return the PVT_date_time
     */
    public Timestamp getPVTdatetime() {
        return (Timestamp) getAttributeInternal(PVTDATETIME);
    }

    /**
     * Sets <code>value</code> as attribute value for PVT_date_time using the alias name PVTdatetime.
     * @param value value to set the PVT_date_time
     */
    public void setPVTdatetime(Timestamp value) {
        setAttributeInternal(PVTDATETIME, value);
    }

    /**
     * Gets the attribute value for the calculated attribute contraDesc.
     * @return the contraDesc
     */
    public String getcontraDesc() {
        return (String) getAttributeInternal(CONTRADESC);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute contraDesc.
     * @param value value to set the  contraDesc
     */
    public void setcontraDesc(String value) {
        setAttributeInternal(CONTRADESC, value);
    }

    /**
     * Gets the attribute value for the calculated attribute statusDesc.
     * @return the statusDesc
     */
    public String getstatusDesc() {
        return (String) getAttributeInternal(STATUSDESC);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute statusDesc.
     * @param value value to set the  statusDesc
     */
    public void setstatusDesc(String value) {
        setAttributeInternal(STATUSDESC, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}
