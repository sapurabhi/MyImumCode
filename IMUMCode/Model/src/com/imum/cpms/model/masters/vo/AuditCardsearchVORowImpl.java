package com.imum.cpms.model.masters.vo;

import java.math.BigDecimal;

import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Jul 23 21:15:30 IST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class AuditCardsearchVORowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        cardfrom {
            public Object get(AuditCardsearchVORowImpl obj) {
                return obj.getcardfrom();
            }

            public void put(AuditCardsearchVORowImpl obj, Object value) {
                obj.setcardfrom((String)value);
            }
        }
        ,
        cardto {
            public Object get(AuditCardsearchVORowImpl obj) {
                return obj.getcardto();
            }

            public void put(AuditCardsearchVORowImpl obj, Object value) {
                obj.setcardto((String)value);
            }
        }
        ,
        totalcards {
            public Object get(AuditCardsearchVORowImpl obj) {
                return obj.gettotalcards();
            }

            public void put(AuditCardsearchVORowImpl obj, Object value) {
                obj.settotalcards((Integer)value);
            }
        }
        ,
        DenominationType {
            public Object get(AuditCardsearchVORowImpl obj) {
                return obj.getDenominationType();
            }

            public void put(AuditCardsearchVORowImpl obj, Object value) {
                obj.setDenominationType((String)value);
            }
        }
        ,
        CardDenomAmt {
            public Object get(AuditCardsearchVORowImpl obj) {
                return obj.getCardDenomAmt();
            }

            public void put(AuditCardsearchVORowImpl obj, Object value) {
                obj.setCardDenomAmt((BigDecimal)value);
            }
        }
        ,
        Locationid {
            public Object get(AuditCardsearchVORowImpl obj) {
                return obj.getLocationid();
            }

            public void put(AuditCardsearchVORowImpl obj, Object value) {
                obj.setLocationid((Integer)value);
            }
        }
        ,
        CardTypeCode {
            public Object get(AuditCardsearchVORowImpl obj) {
                return obj.getCardTypeCode();
            }

            public void put(AuditCardsearchVORowImpl obj, Object value) {
                obj.setCardTypeCode((Integer)value);
            }
        }
        ,
        seq {
            public Object get(AuditCardsearchVORowImpl obj) {
                return obj.getseq();
            }

            public void put(AuditCardsearchVORowImpl obj, Object value) {
                obj.setseq((BigDecimal)value);
            }
        }
        ,
        countcards {
            public Object get(AuditCardsearchVORowImpl obj) {
                return obj.getcountcards();
            }

            public void put(AuditCardsearchVORowImpl obj, Object value) {
                obj.setcountcards((Integer)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public abstract Object get(AuditCardsearchVORowImpl object);

        public abstract void put(AuditCardsearchVORowImpl object,
                                 Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int CARDFROM = AttributesEnum.cardfrom.index();
    public static final int CARDTO = AttributesEnum.cardto.index();
    public static final int TOTALCARDS = AttributesEnum.totalcards.index();
    public static final int DENOMINATIONTYPE = AttributesEnum.DenominationType.index();
    public static final int CARDDENOMAMT = AttributesEnum.CardDenomAmt.index();
    public static final int LOCATIONID = AttributesEnum.Locationid.index();
    public static final int CARDTYPECODE = AttributesEnum.CardTypeCode.index();
    public static final int SEQ = AttributesEnum.seq.index();
    public static final int COUNTCARDS = AttributesEnum.countcards.index();

    /**
     * This is the default constructor (do not remove).
     */
    public AuditCardsearchVORowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute cardfrom.
     * @return the cardfrom
     */
    public String getcardfrom() {
        return (String) getAttributeInternal(CARDFROM);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute cardfrom.
     * @param value value to set the  cardfrom
     */
    public void setcardfrom(String value) {
        setAttributeInternal(CARDFROM, value);
    }

    /**
     * Gets the attribute value for the calculated attribute cardto.
     * @return the cardto
     */
    public String getcardto() {
        return (String) getAttributeInternal(CARDTO);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute cardto.
     * @param value value to set the  cardto
     */
    public void setcardto(String value) {
        setAttributeInternal(CARDTO, value);
    }

    /**
     * Gets the attribute value for the calculated attribute totalcards.
     * @return the totalcards
     */
    public Integer gettotalcards() {
        return (Integer) getAttributeInternal(TOTALCARDS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute totalcards.
     * @param value value to set the  totalcards
     */
    public void settotalcards(Integer value) {
        setAttributeInternal(TOTALCARDS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute DenominationType.
     * @return the DenominationType
     */
    public String getDenominationType() {
        return (String) getAttributeInternal(DENOMINATIONTYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute DenominationType.
     * @param value value to set the  DenominationType
     */
    public void setDenominationType(String value) {
        setAttributeInternal(DENOMINATIONTYPE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute CardDenomAmt.
     * @return the CardDenomAmt
     */
    public BigDecimal getCardDenomAmt() {
        return (BigDecimal) getAttributeInternal(CARDDENOMAMT);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute CardDenomAmt.
     * @param value value to set the  CardDenomAmt
     */
    public void setCardDenomAmt(BigDecimal value) {
        setAttributeInternal(CARDDENOMAMT, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Locationid.
     * @return the Locationid
     */
    public Integer getLocationid() {
        return (Integer) getAttributeInternal(LOCATIONID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Locationid.
     * @param value value to set the  Locationid
     */
    public void setLocationid(Integer value) {
        setAttributeInternal(LOCATIONID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute CardTypeCode.
     * @return the CardTypeCode
     */
    public Integer getCardTypeCode() {
        return (Integer) getAttributeInternal(CARDTYPECODE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute CardTypeCode.
     * @param value value to set the  CardTypeCode
     */
    public void setCardTypeCode(Integer value) {
        setAttributeInternal(CARDTYPECODE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute seq.
     * @return the seq
     */
    public BigDecimal getseq() {
        return (BigDecimal) getAttributeInternal(SEQ);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute seq.
     * @param value value to set the  seq
     */
    public void setseq(BigDecimal value) {
        setAttributeInternal(SEQ, value);
    }


    /**
     * Gets the attribute value for the calculated attribute countcards.
     * @return the countcards
     */
    public Integer getcountcards() {
        return (Integer) getAttributeInternal(COUNTCARDS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute countcards.
     * @param value value to set the  countcards
     */
    public void setcountcards(Integer value) {
        setAttributeInternal(COUNTCARDS, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}
