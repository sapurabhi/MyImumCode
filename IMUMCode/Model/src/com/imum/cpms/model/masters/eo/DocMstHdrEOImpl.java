package com.imum.cpms.model.masters.eo;

import java.sql.Timestamp;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Jun 19 17:13:37 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class DocMstHdrEOImpl extends EntityImpl {
    private static EntityDefImpl mDefinitionObject;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        PRMDocMstseq {
            public Object get(DocMstHdrEOImpl obj) {
                return obj.getPRMDocMstseq();
            }

            public void put(DocMstHdrEOImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        CityCode {
            public Object get(DocMstHdrEOImpl obj) {
                return obj.getCityCode();
            }

            public void put(DocMstHdrEOImpl obj, Object value) {
                obj.setCityCode((String)value);
            }
        }
        ,
        CountryCode {
            public Object get(DocMstHdrEOImpl obj) {
                return obj.getCountryCode();
            }

            public void put(DocMstHdrEOImpl obj, Object value) {
                obj.setCountryCode((String)value);
            }
        }
        ,
        PrmCategCode {
            public Object get(DocMstHdrEOImpl obj) {
                return obj.getPrmCategCode();
            }

            public void put(DocMstHdrEOImpl obj, Object value) {
                obj.setPrmCategCode((String)value);
            }
        }
        ,
        PrmTypeCode {
            public Object get(DocMstHdrEOImpl obj) {
                return obj.getPrmTypeCode();
            }

            public void put(DocMstHdrEOImpl obj, Object value) {
                obj.setPrmTypeCode((String)value);
            }
        }
        ,
        LocalFlag {
            public Object get(DocMstHdrEOImpl obj) {
                return obj.getLocalFlag();
            }

            public void put(DocMstHdrEOImpl obj, Object value) {
                obj.setLocalFlag((String)value);
            }
        }
        ,
        Relativeflag {
            public Object get(DocMstHdrEOImpl obj) {
                return obj.getRelativeflag();
            }

            public void put(DocMstHdrEOImpl obj, Object value) {
                obj.setRelativeflag((String)value);
            }
        }
        ,
        CompAccomFlag {
            public Object get(DocMstHdrEOImpl obj) {
                return obj.getCompAccomFlag();
            }

            public void put(DocMstHdrEOImpl obj, Object value) {
                obj.setCompAccomFlag((String)value);
            }
        }
        ,
        Activeflag {
            public Object get(DocMstHdrEOImpl obj) {
                return obj.getActiveflag();
            }

            public void put(DocMstHdrEOImpl obj, Object value) {
                obj.setActiveflag((String)value);
            }
        }
        ,
        CreatedBy {
            public Object get(DocMstHdrEOImpl obj) {
                return obj.getCreatedBy();
            }

            public void put(DocMstHdrEOImpl obj, Object value) {
                obj.setCreatedBy((String)value);
            }
        }
        ,
        CreatedDate {
            public Object get(DocMstHdrEOImpl obj) {
                return obj.getCreatedDate();
            }

            public void put(DocMstHdrEOImpl obj, Object value) {
                obj.setCreatedDate((Timestamp)value);
            }
        }
        ,
        Updatedby {
            public Object get(DocMstHdrEOImpl obj) {
                return obj.getUpdatedby();
            }

            public void put(DocMstHdrEOImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        Updateddate {
            public Object get(DocMstHdrEOImpl obj) {
                return obj.getUpdateddate();
            }

            public void put(DocMstHdrEOImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public abstract Object get(DocMstHdrEOImpl object);

        public abstract void put(DocMstHdrEOImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int PRMDOCMSTSEQ = AttributesEnum.PRMDocMstseq.index();
    public static final int CITYCODE = AttributesEnum.CityCode.index();
    public static final int COUNTRYCODE = AttributesEnum.CountryCode.index();
    public static final int PRMCATEGCODE = AttributesEnum.PrmCategCode.index();
    public static final int PRMTYPECODE = AttributesEnum.PrmTypeCode.index();
    public static final int LOCALFLAG = AttributesEnum.LocalFlag.index();
    public static final int RELATIVEFLAG = AttributesEnum.Relativeflag.index();
    public static final int COMPACCOMFLAG = AttributesEnum.CompAccomFlag.index();
    public static final int ACTIVEFLAG = AttributesEnum.Activeflag.index();
    public static final int CREATEDBY = AttributesEnum.CreatedBy.index();
    public static final int CREATEDDATE = AttributesEnum.CreatedDate.index();
    public static final int UPDATEDBY = AttributesEnum.Updatedby.index();
    public static final int UPDATEDDATE = AttributesEnum.Updateddate.index();

    /**
     * This is the default constructor (do not remove).
     */
    public DocMstHdrEOImpl() {
    }


    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        if (mDefinitionObject == null) {
            mDefinitionObject = EntityDefImpl.findDefObject("com.imum.cpms.model.masters.eo.DocMstHdrEO");
        }
        return mDefinitionObject;
    }

    /**
     * Gets the attribute value for PRMDocMstseq, using the alias name PRMDocMstseq.
     * @return the PRMDocMstseq
     */
    public Integer getPRMDocMstseq() {
        return (Integer)getAttributeInternal(PRMDOCMSTSEQ);
    }

    /**
     * Gets the attribute value for CityCode, using the alias name CityCode.
     * @return the CityCode
     */
    public String getCityCode() {
        return (String)getAttributeInternal(CITYCODE);
    }

    /**
     * Sets <code>value</code> as the attribute value for CityCode.
     * @param value value to set the CityCode
     */
    public void setCityCode(String value) {
        setAttributeInternal(CITYCODE, value);
    }

    /**
     * Gets the attribute value for CountryCode, using the alias name CountryCode.
     * @return the CountryCode
     */
    public String getCountryCode() {
        return (String)getAttributeInternal(COUNTRYCODE);
    }

    /**
     * Sets <code>value</code> as the attribute value for CountryCode.
     * @param value value to set the CountryCode
     */
    public void setCountryCode(String value) {
        setAttributeInternal(COUNTRYCODE, value);
    }

    /**
     * Gets the attribute value for PrmCategCode, using the alias name PrmCategCode.
     * @return the PrmCategCode
     */
    public String getPrmCategCode() {
        return (String)getAttributeInternal(PRMCATEGCODE);
    }

    /**
     * Sets <code>value</code> as the attribute value for PrmCategCode.
     * @param value value to set the PrmCategCode
     */
    public void setPrmCategCode(String value) {
        setAttributeInternal(PRMCATEGCODE, value);
    }

    /**
     * Gets the attribute value for PrmTypeCode, using the alias name PrmTypeCode.
     * @return the PrmTypeCode
     */
    public String getPrmTypeCode() {
        return (String)getAttributeInternal(PRMTYPECODE);
    }

    /**
     * Sets <code>value</code> as the attribute value for PrmTypeCode.
     * @param value value to set the PrmTypeCode
     */
    public void setPrmTypeCode(String value) {
        setAttributeInternal(PRMTYPECODE, value);
    }

    /**
     * Gets the attribute value for LocalFlag, using the alias name LocalFlag.
     * @return the LocalFlag
     */
    public String getLocalFlag() {
        return (String)getAttributeInternal(LOCALFLAG);
    }

    /**
     * Sets <code>value</code> as the attribute value for LocalFlag.
     * @param value value to set the LocalFlag
     */
    public void setLocalFlag(String value) {
        setAttributeInternal(LOCALFLAG, value);
    }

    /**
     * Gets the attribute value for Relativeflag, using the alias name Relativeflag.
     * @return the Relativeflag
     */
    public String getRelativeflag() {
        return (String)getAttributeInternal(RELATIVEFLAG);
    }

    /**
     * Sets <code>value</code> as the attribute value for Relativeflag.
     * @param value value to set the Relativeflag
     */
    public void setRelativeflag(String value) {
        setAttributeInternal(RELATIVEFLAG, value);
    }

    /**
     * Gets the attribute value for CompAccomFlag, using the alias name CompAccomFlag.
     * @return the CompAccomFlag
     */
    public String getCompAccomFlag() {
        return (String)getAttributeInternal(COMPACCOMFLAG);
    }

    /**
     * Sets <code>value</code> as the attribute value for CompAccomFlag.
     * @param value value to set the CompAccomFlag
     */
    public void setCompAccomFlag(String value) {
        setAttributeInternal(COMPACCOMFLAG, value);
    }

    /**
     * Gets the attribute value for Activeflag, using the alias name Activeflag.
     * @return the Activeflag
     */
    public String getActiveflag() {
        return (String)getAttributeInternal(ACTIVEFLAG);
    }

    /**
     * Sets <code>value</code> as the attribute value for Activeflag.
     * @param value value to set the Activeflag
     */
    public void setActiveflag(String value) {
        setAttributeInternal(ACTIVEFLAG, value);
    }

    /**
     * Gets the attribute value for CreatedBy, using the alias name CreatedBy.
     * @return the CreatedBy
     */
    public String getCreatedBy() {
        return (String)getAttributeInternal(CREATEDBY);
    }


    /**
     * Sets <code>value</code> as the attribute value for CreatedBy.
     * @param value value to set the CreatedBy
     */
    public void setCreatedBy(String value) {
        setAttributeInternal(CREATEDBY, value);
    }

    /**
     * Gets the attribute value for CreatedDate, using the alias name CreatedDate.
     * @return the CreatedDate
     */
    public Timestamp getCreatedDate() {
        return (Timestamp)getAttributeInternal(CREATEDDATE);
    }


    /**
     * Sets <code>value</code> as the attribute value for CreatedDate.
     * @param value value to set the CreatedDate
     */
    public void setCreatedDate(Timestamp value) {
        setAttributeInternal(CREATEDDATE, value);
    }

    /**
     * Gets the attribute value for Updatedby, using the alias name Updatedby.
     * @return the Updatedby
     */
    public String getUpdatedby() {
        return (String)getAttributeInternal(UPDATEDBY);
    }


    /**
     * Gets the attribute value for Updateddate, using the alias name Updateddate.
     * @return the Updateddate
     */
    public Timestamp getUpdateddate() {
        return (Timestamp)getAttributeInternal(UPDATEDDATE);
    }


    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }


    /**
     * @param pRMDocMstseq key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Integer pRMDocMstseq) {
        return new Key(new Object[]{pRMDocMstseq});
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        super.create(attributeList);
    }

    /**
     * Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        super.doDML(operation, e);
    }
}
