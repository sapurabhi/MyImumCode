package com.imum.cpms.model.masters.eo;

import java.sql.Date;
import java.sql.Timestamp;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Jun 19 17:15:21 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class DocMstDtlEOImpl extends EntityImpl {
    private static EntityDefImpl mDefinitionObject;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        PRMDocMstDtlseq {
            public Object get(DocMstDtlEOImpl obj) {
                return obj.getPRMDocMstDtlseq();
            }

            public void put(DocMstDtlEOImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        PRMDocMstseq {
            public Object get(DocMstDtlEOImpl obj) {
                return obj.getPRMDocMstseq();
            }

            public void put(DocMstDtlEOImpl obj, Object value) {
                obj.setPRMDocMstseq((Integer)value);
            }
        }
        ,
        DocName {
            public Object get(DocMstDtlEOImpl obj) {
                return obj.getDocName();
            }

            public void put(DocMstDtlEOImpl obj, Object value) {
                obj.setDocName((String)value);
            }
        }
        ,
        DocDesc {
            public Object get(DocMstDtlEOImpl obj) {
                return obj.getDocDesc();
            }

            public void put(DocMstDtlEOImpl obj, Object value) {
                obj.setDocDesc((String)value);
            }
        }
        ,
        Mandatoryflag {
            public Object get(DocMstDtlEOImpl obj) {
                return obj.getMandatoryflag();
            }

            public void put(DocMstDtlEOImpl obj, Object value) {
                obj.setMandatoryflag((String)value);
            }
        }
        ,
        Activeflag {
            public Object get(DocMstDtlEOImpl obj) {
                return obj.getActiveflag();
            }

            public void put(DocMstDtlEOImpl obj, Object value) {
                obj.setActiveflag((String)value);
            }
        }
        ,
        CreatedBy {
            public Object get(DocMstDtlEOImpl obj) {
                return obj.getCreatedBy();
            }

            public void put(DocMstDtlEOImpl obj, Object value) {
                obj.setCreatedBy((String)value);
            }
        }
        ,
        CreatedDate {
            public Object get(DocMstDtlEOImpl obj) {
                return obj.getCreatedDate();
            }

            public void put(DocMstDtlEOImpl obj, Object value) {
                obj.setCreatedDate((Timestamp)value);
            }
        }
        ,
        Updatedby {
            public Object get(DocMstDtlEOImpl obj) {
                return obj.getUpdatedby();
            }

            public void put(DocMstDtlEOImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        Updateddate {
            public Object get(DocMstDtlEOImpl obj) {
                return obj.getUpdateddate();
            }

            public void put(DocMstDtlEOImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        ActivefromDate {
            public Object get(DocMstDtlEOImpl obj) {
                return obj.getActivefromDate();
            }

            public void put(DocMstDtlEOImpl obj, Object value) {
                obj.setActivefromDate((Date)value);
            }
        }
        ,
        ActivetoDate {
            public Object get(DocMstDtlEOImpl obj) {
                return obj.getActivetoDate();
            }

            public void put(DocMstDtlEOImpl obj, Object value) {
                obj.setActivetoDate((Date)value);
            }
        }
        ,
        ChangedFlag {
            public Object get(DocMstDtlEOImpl obj) {
                return obj.getChangedFlag();
            }

            public void put(DocMstDtlEOImpl obj, Object value) {
                obj.setChangedFlag((String)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public abstract Object get(DocMstDtlEOImpl object);

        public abstract void put(DocMstDtlEOImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int PRMDOCMSTDTLSEQ = AttributesEnum.PRMDocMstDtlseq.index();
    public static final int PRMDOCMSTSEQ = AttributesEnum.PRMDocMstseq.index();
    public static final int DOCNAME = AttributesEnum.DocName.index();
    public static final int DOCDESC = AttributesEnum.DocDesc.index();
    public static final int MANDATORYFLAG = AttributesEnum.Mandatoryflag.index();
    public static final int ACTIVEFLAG = AttributesEnum.Activeflag.index();
    public static final int CREATEDBY = AttributesEnum.CreatedBy.index();
    public static final int CREATEDDATE = AttributesEnum.CreatedDate.index();
    public static final int UPDATEDBY = AttributesEnum.Updatedby.index();
    public static final int UPDATEDDATE = AttributesEnum.Updateddate.index();
    public static final int ACTIVEFROMDATE = AttributesEnum.ActivefromDate.index();
    public static final int ACTIVETODATE = AttributesEnum.ActivetoDate.index();
    public static final int CHANGEDFLAG = AttributesEnum.ChangedFlag.index();

    /**
     * This is the default constructor (do not remove).
     */
    public DocMstDtlEOImpl() {
    }


    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        if (mDefinitionObject == null) {
            mDefinitionObject = EntityDefImpl.findDefObject("com.imum.cpms.model.masters.eo.DocMstDtlEO");
        }
        return mDefinitionObject;
    }

    /**
     * Gets the attribute value for PRMDocMstDtlseq, using the alias name PRMDocMstDtlseq.
     * @return the PRMDocMstDtlseq
     */
    public Integer getPRMDocMstDtlseq() {
        return (Integer)getAttributeInternal(PRMDOCMSTDTLSEQ);
    }

    /**
     * Gets the attribute value for PRMDocMstseq, using the alias name PRMDocMstseq.
     * @return the PRMDocMstseq
     */
    public Integer getPRMDocMstseq() {
        return (Integer)getAttributeInternal(PRMDOCMSTSEQ);
    }

    /**
     * Sets <code>value</code> as the attribute value for PRMDocMstseq.
     * @param value value to set the PRMDocMstseq
     */
    public void setPRMDocMstseq(Integer value) {
        setAttributeInternal(PRMDOCMSTSEQ, value);
    }

    /**
     * Gets the attribute value for DocName, using the alias name DocName.
     * @return the DocName
     */
    public String getDocName() {
        return (String)getAttributeInternal(DOCNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for DocName.
     * @param value value to set the DocName
     */
    public void setDocName(String value) {
        setAttributeInternal(DOCNAME, value);
    }

    /**
     * Gets the attribute value for DocDesc, using the alias name DocDesc.
     * @return the DocDesc
     */
    public String getDocDesc() {
        return (String)getAttributeInternal(DOCDESC);
    }

    /**
     * Sets <code>value</code> as the attribute value for DocDesc.
     * @param value value to set the DocDesc
     */
    public void setDocDesc(String value) {
        setAttributeInternal(DOCDESC, value);
    }

    /**
     * Gets the attribute value for Mandatoryflag, using the alias name Mandatoryflag.
     * @return the Mandatoryflag
     */
    public String getMandatoryflag() {
        return (String)getAttributeInternal(MANDATORYFLAG);
    }

    /**
     * Sets <code>value</code> as the attribute value for Mandatoryflag.
     * @param value value to set the Mandatoryflag
     */
    public void setMandatoryflag(String value) {
        setAttributeInternal(MANDATORYFLAG, value);
    }

    /**
     * Gets the attribute value for Activeflag, using the alias name Activeflag.
     * @return the Activeflag
     */
    public String getActiveflag() {
        return (String)getAttributeInternal(ACTIVEFLAG);
    }

    /**
     * Sets <code>value</code> as the attribute value for Activeflag.
     * @param value value to set the Activeflag
     */
    public void setActiveflag(String value) {
        setAttributeInternal(ACTIVEFLAG, value);
    }

    /**
     * Gets the attribute value for CreatedBy, using the alias name CreatedBy.
     * @return the CreatedBy
     */
    public String getCreatedBy() {
        return (String)getAttributeInternal(CREATEDBY);
    }


    /**
     * Sets <code>value</code> as the attribute value for CreatedBy.
     * @param value value to set the CreatedBy
     */
    public void setCreatedBy(String value) {
        setAttributeInternal(CREATEDBY, value);
    }

    /**
     * Gets the attribute value for CreatedDate, using the alias name CreatedDate.
     * @return the CreatedDate
     */
    public Timestamp getCreatedDate() {
        return (Timestamp)getAttributeInternal(CREATEDDATE);
    }


    /**
     * Sets <code>value</code> as the attribute value for CreatedDate.
     * @param value value to set the CreatedDate
     */
    public void setCreatedDate(Timestamp value) {
        setAttributeInternal(CREATEDDATE, value);
    }

    /**
     * Gets the attribute value for Updatedby, using the alias name Updatedby.
     * @return the Updatedby
     */
    public String getUpdatedby() {
        return (String)getAttributeInternal(UPDATEDBY);
    }


    /**
     * Gets the attribute value for Updateddate, using the alias name Updateddate.
     * @return the Updateddate
     */
    public Timestamp getUpdateddate() {
        return (Timestamp)getAttributeInternal(UPDATEDDATE);
    }


    /**
     * Gets the attribute value for ActivefromDate, using the alias name ActivefromDate.
     * @return the ActivefromDate
     */
    public Date getActivefromDate() {
        return (Date)getAttributeInternal(ACTIVEFROMDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for ActivefromDate.
     * @param value value to set the ActivefromDate
     */
    public void setActivefromDate(Date value) {
        setAttributeInternal(ACTIVEFROMDATE, value);
    }

    /**
     * Gets the attribute value for ActivetoDate, using the alias name ActivetoDate.
     * @return the ActivetoDate
     */
    public Date getActivetoDate() {
        return (Date)getAttributeInternal(ACTIVETODATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for ActivetoDate.
     * @param value value to set the ActivetoDate
     */
    public void setActivetoDate(Date value) {
        setAttributeInternal(ACTIVETODATE, value);
    }

    /**
     * Gets the attribute value for ChangedFlag, using the alias name ChangedFlag.
     * @return the ChangedFlag
     */
    public String getChangedFlag() {
        return (String)getAttributeInternal(CHANGEDFLAG);
    }

    /**
     * Sets <code>value</code> as the attribute value for ChangedFlag.
     * @param value value to set the ChangedFlag
     */
    public void setChangedFlag(String value) {
        setAttributeInternal(CHANGEDFLAG, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }


    /**
     * @param pRMDocMstDtlseq key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Integer pRMDocMstDtlseq) {
        return new Key(new Object[]{pRMDocMstDtlseq});
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        super.create(attributeList);
    }

    /**
     * Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        super.doDML(operation, e);
    }
}
