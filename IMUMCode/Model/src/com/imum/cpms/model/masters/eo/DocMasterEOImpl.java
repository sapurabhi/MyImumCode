package com.imum.cpms.model.masters.eo;


import java.math.BigDecimal;
import java.sql.CallableStatement;
import java.sql.Date;
import java.sql.Timestamp;
import java.sql.Types;
import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri May 16 18:06:34 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class DocMasterEOImpl extends EntityImpl {
    private static EntityDefImpl mDefinitionObject;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        PRMDocMstseq {
            public Object get(DocMasterEOImpl obj) {
                return obj.getPRMDocMstseq();
            }

            public void put(DocMasterEOImpl obj, Object value) {
                obj.setPRMDocMstseq((BigDecimal)value);
            }
        }
        ,
        CountryCode {
            public Object get(DocMasterEOImpl obj) {
                return obj.getCountryCode();
            }

            public void put(DocMasterEOImpl obj, Object value) {
                obj.setCountryCode((String)value);
            }
        }
        ,
        CityCode {
            public Object get(DocMasterEOImpl obj) {
                return obj.getCityCode();
            }

            public void put(DocMasterEOImpl obj, Object value) {
                obj.setCityCode((String)value);
            }
        }
        ,
        DocCtg {
            public Object get(DocMasterEOImpl obj) {
                return obj.getDocCtg();
            }

            public void put(DocMasterEOImpl obj, Object value) {
                obj.setDocCtg((String)value);
            }
        }
        ,
        DocName {
            public Object get(DocMasterEOImpl obj) {
                return obj.getDocName();
            }

            public void put(DocMasterEOImpl obj, Object value) {
                obj.setDocName((String)value);
            }
        }
        ,
        DocDesc {
            public Object get(DocMasterEOImpl obj) {
                return obj.getDocDesc();
            }

            public void put(DocMasterEOImpl obj, Object value) {
                obj.setDocDesc((String)value);
            }
        }
        ,
        Mandatoryflag {
            public Object get(DocMasterEOImpl obj) {
                return obj.getMandatoryflag();
            }

            public void put(DocMasterEOImpl obj, Object value) {
                obj.setMandatoryflag((String)value);
            }
        }
        ,
        Activeflag {
            public Object get(DocMasterEOImpl obj) {
                return obj.getActiveflag();
            }

            public void put(DocMasterEOImpl obj, Object value) {
                obj.setActiveflag((String)value);
            }
        }
        ,
        Activefrom {
            public Object get(DocMasterEOImpl obj) {
                return obj.getActivefrom();
            }

            public void put(DocMasterEOImpl obj, Object value) {
                obj.setActivefrom((Date)value);
            }
        }
        ,
        Activeto {
            public Object get(DocMasterEOImpl obj) {
                return obj.getActiveto();
            }

            public void put(DocMasterEOImpl obj, Object value) {
                obj.setActiveto((Date)value);
            }
        }
        ,
        CreatedBy {
            public Object get(DocMasterEOImpl obj) {
                return obj.getCreatedBy();
            }

            public void put(DocMasterEOImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        CreatedDate {
            public Object get(DocMasterEOImpl obj) {
                return obj.getCreatedDate();
            }

            public void put(DocMasterEOImpl obj, Object value) {
                obj.setCreatedDate((Date)value);
            }
        }
        ,
        Updatedby {
            public Object get(DocMasterEOImpl obj) {
                return obj.getUpdatedby();
            }

            public void put(DocMasterEOImpl obj, Object value) {
                obj.setUpdatedby((String)value);
            }
        }
        ,
        Changedflag {
            public Object get(DocMasterEOImpl obj) {
                return obj.getChangedflag();
            }

            public void put(DocMasterEOImpl obj, Object value) {
                obj.setChangedflag((String)value);
            }
        }
        ,
        DocSubCtg {
            public Object get(DocMasterEOImpl obj) {
                return obj.getDocSubCtg();
            }

            public void put(DocMasterEOImpl obj, Object value) {
                obj.setDocSubCtg((String)value);
            }
        }
        ,
        Updateddate {
            public Object get(DocMasterEOImpl obj) {
                return obj.getUpdateddate();
            }

            public void put(DocMasterEOImpl obj, Object value) {
                obj.setUpdateddate((Timestamp)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public abstract Object get(DocMasterEOImpl object);

        public abstract void put(DocMasterEOImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int PRMDOCMSTSEQ = AttributesEnum.PRMDocMstseq.index();
    public static final int COUNTRYCODE = AttributesEnum.CountryCode.index();
    public static final int CITYCODE = AttributesEnum.CityCode.index();
    public static final int DOCCTG = AttributesEnum.DocCtg.index();
    public static final int DOCNAME = AttributesEnum.DocName.index();
    public static final int DOCDESC = AttributesEnum.DocDesc.index();
    public static final int MANDATORYFLAG = AttributesEnum.Mandatoryflag.index();
    public static final int ACTIVEFLAG = AttributesEnum.Activeflag.index();
    public static final int ACTIVEFROM = AttributesEnum.Activefrom.index();
    public static final int ACTIVETO = AttributesEnum.Activeto.index();
    public static final int CREATEDBY = AttributesEnum.CreatedBy.index();
    public static final int CREATEDDATE = AttributesEnum.CreatedDate.index();
    public static final int UPDATEDBY = AttributesEnum.Updatedby.index();
    public static final int CHANGEDFLAG = AttributesEnum.Changedflag.index();
    public static final int DOCSUBCTG = AttributesEnum.DocSubCtg.index();
    public static final int UPDATEDDATE = AttributesEnum.Updateddate.index();

    /**
     * This is the default constructor (do not remove).
     */
    public DocMasterEOImpl() {
    }


    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        if (mDefinitionObject == null) {
            mDefinitionObject = EntityDefImpl.findDefObject("com.imum.cpms.model.masters.eo.DocMasterEO");
        }
        return mDefinitionObject;
    }

    /**
     * Gets the attribute value for PRMDocMstseq, using the alias name PRMDocMstseq.
     * @return the PRMDocMstseq
     */
    public BigDecimal getPRMDocMstseq() {
        return (BigDecimal)getAttributeInternal(PRMDOCMSTSEQ);
    }

    /**
     * Sets <code>value</code> as the attribute value for PRMDocMstseq.
     * @param value value to set the PRMDocMstseq
     */
    public void setPRMDocMstseq(BigDecimal value) {
        setAttributeInternal(PRMDOCMSTSEQ, value);
    }

    /**
     * Gets the attribute value for CountryCode, using the alias name CountryCode.
     * @return the CountryCode
     */
    public String getCountryCode() {
        return (String)getAttributeInternal(COUNTRYCODE);
    }

    /**
     * Sets <code>value</code> as the attribute value for CountryCode.
     * @param value value to set the CountryCode
     */
    public void setCountryCode(String value) {
        setAttributeInternal(COUNTRYCODE, value);
    }

    /**
     * Gets the attribute value for CityCode, using the alias name CityCode.
     * @return the CityCode
     */
    public String getCityCode() {
        return (String)getAttributeInternal(CITYCODE);
    }

    /**
     * Sets <code>value</code> as the attribute value for CityCode.
     * @param value value to set the CityCode
     */
    public void setCityCode(String value) {
        setAttributeInternal(CITYCODE, value);
    }

    /**
     * Gets the attribute value for DocCtg, using the alias name DocCtg.
     * @return the DocCtg
     */
    public String getDocCtg() {
        return (String)getAttributeInternal(DOCCTG);
    }

    /**
     * Sets <code>value</code> as the attribute value for DocCtg.
     * @param value value to set the DocCtg
     */
    public void setDocCtg(String value) {
        setAttributeInternal(DOCCTG, value);
    }

    /**
     * Gets the attribute value for DocSubCtg, using the alias name DocSubCtg.
     * @return the DocSubCtg
     */
    public String getDocSubCtg() {
        return (String)getAttributeInternal(DOCSUBCTG);
    }

    /**
     * Sets <code>value</code> as the attribute value for DocSubCtg.
     * @param value value to set the DocSubCtg
     */
    public void setDocSubCtg(String value) {
        setAttributeInternal(DOCSUBCTG, value);
    }

    /**
     * Gets the attribute value for Updateddate, using the alias name Updateddate.
     * @return the Updateddate
     */
    public Timestamp getUpdateddate() {
        return (Timestamp)getAttributeInternal(UPDATEDDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for Updateddate.
     * @param value value to set the Updateddate
     */
    public void setUpdateddate(Timestamp value) {
        setAttributeInternal(UPDATEDDATE, value);
    }

    /**
     * Gets the attribute value for DocName, using the alias name DocName.
     * @return the DocName
     */
    public String getDocName() {
        return (String)getAttributeInternal(DOCNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for DocName.
     * @param value value to set the DocName
     */
    public void setDocName(String value) {
        setAttributeInternal(DOCNAME, value);
    }

    /**
     * Gets the attribute value for DocDesc, using the alias name DocDesc.
     * @return the DocDesc
     */
    public String getDocDesc() {
        return (String)getAttributeInternal(DOCDESC);
    }

    /**
     * Sets <code>value</code> as the attribute value for DocDesc.
     * @param value value to set the DocDesc
     */
    public void setDocDesc(String value) {
        setAttributeInternal(DOCDESC, value);
    }

    /**
     * Gets the attribute value for Mandatoryflag, using the alias name Mandatoryflag.
     * @return the Mandatoryflag
     */
    public String getMandatoryflag() {
        return (String)getAttributeInternal(MANDATORYFLAG);
    }

    /**
     * Sets <code>value</code> as the attribute value for Mandatoryflag.
     * @param value value to set the Mandatoryflag
     */
    public void setMandatoryflag(String value) {
        setAttributeInternal(MANDATORYFLAG, value);
    }

    /**
     * Gets the attribute value for Activeflag, using the alias name Activeflag.
     * @return the Activeflag
     */
    public String getActiveflag() {
        return (String)getAttributeInternal(ACTIVEFLAG);
    }

    /**
     * Sets <code>value</code> as the attribute value for Activeflag.
     * @param value value to set the Activeflag
     */
    public void setActiveflag(String value) {
        setAttributeInternal(ACTIVEFLAG, value);
    }

    /**
     * Gets the attribute value for Activefrom, using the alias name Activefrom.
     * @return the Activefrom
     */
    public Date getActivefrom() {
        return (Date)getAttributeInternal(ACTIVEFROM);
    }

    /**
     * Sets <code>value</code> as the attribute value for Activefrom.
     * @param value value to set the Activefrom
     */
    public void setActivefrom(Date value) {
        setAttributeInternal(ACTIVEFROM, value);
    }

    /**
     * Gets the attribute value for Activeto, using the alias name Activeto.
     * @return the Activeto
     */
    public Date getActiveto() {
        return (Date)getAttributeInternal(ACTIVETO);
    }

    /**
     * Sets <code>value</code> as the attribute value for Activeto.
     * @param value value to set the Activeto
     */
    public void setActiveto(Date value) {
        setAttributeInternal(ACTIVETO, value);
    }

    /**
     * Gets the attribute value for CreatedBy, using the alias name CreatedBy.
     * @return the CreatedBy
     */
    public String getCreatedBy() {
        return (String)getAttributeInternal(CREATEDBY);
    }


    /**
     * Gets the attribute value for CreatedDate, using the alias name CreatedDate.
     * @return the CreatedDate
     */
    public Date getCreatedDate() {
        return (Date)getAttributeInternal(CREATEDDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for CreatedDate.
     * @param value value to set the CreatedDate
     */
    public void setCreatedDate(Date value) {
        setAttributeInternal(CREATEDDATE, value);
    }

    /**
     * Gets the attribute value for Updatedby, using the alias name Updatedby.
     * @return the Updatedby
     */
    public String getUpdatedby() {
        return (String)getAttributeInternal(UPDATEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for Updatedby.
     * @param value value to set the Updatedby
     */
    public void setUpdatedby(String value) {
        setAttributeInternal(UPDATEDBY, value);
    }


    /**
     * Gets the attribute value for Changedflag, using the alias name Changedflag.
     * @return the Changedflag
     */
    public String getChangedflag() {
        return (String)getAttributeInternal(CHANGEDFLAG);
    }

    /**
     * Sets <code>value</code> as the attribute value for Changedflag.
     * @param value value to set the Changedflag
     */
    public void setChangedflag(String value) {
        setAttributeInternal(CHANGEDFLAG, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }


    /**
     * @param pRMDocMstseq key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(BigDecimal pRMDocMstseq) {
        return new Key(new Object[]{pRMDocMstseq});
    }

    /**
     * Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        super.doDML(operation, e);
    }
    
}
