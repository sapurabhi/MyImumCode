package com.imum.cpms.model.masters.eo;

import java.sql.Timestamp;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Oct 01 15:46:28 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class GroupMstEOImpl extends EntityImpl {
    private static EntityDefImpl mDefinitionObject;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        GroupId {
            public Object get(GroupMstEOImpl obj) {
                return obj.getGroupId();
            }

            public void put(GroupMstEOImpl obj, Object value) {
                obj.setGroupId((Integer)value);
            }
        }
        ,
        CountryCode {
            public Object get(GroupMstEOImpl obj) {
                return obj.getCountryCode();
            }

            public void put(GroupMstEOImpl obj, Object value) {
                obj.setCountryCode((String)value);
            }
        }
        ,
        GroupName {
            public Object get(GroupMstEOImpl obj) {
                return obj.getGroupName();
            }

            public void put(GroupMstEOImpl obj, Object value) {
                obj.setGroupName((String)value);
            }
        }
        ,
        GroupDesc {
            public Object get(GroupMstEOImpl obj) {
                return obj.getGroupDesc();
            }

            public void put(GroupMstEOImpl obj, Object value) {
                obj.setGroupDesc((String)value);
            }
        }
        ,
        ActiveFlag {
            public Object get(GroupMstEOImpl obj) {
                return obj.getActiveFlag();
            }

            public void put(GroupMstEOImpl obj, Object value) {
                obj.setActiveFlag((String)value);
            }
        }
        ,
        CreatedBy {
            public Object get(GroupMstEOImpl obj) {
                return obj.getCreatedBy();
            }

            public void put(GroupMstEOImpl obj, Object value) {
                obj.setCreatedBy((String)value);
            }
        }
        ,
        CreatedDate {
            public Object get(GroupMstEOImpl obj) {
                return obj.getCreatedDate();
            }

            public void put(GroupMstEOImpl obj, Object value) {
                obj.setCreatedDate((Timestamp)value);
            }
        }
        ,
        UpdatedBy {
            public Object get(GroupMstEOImpl obj) {
                return obj.getUpdatedBy();
            }

            public void put(GroupMstEOImpl obj, Object value) {
                obj.setUpdatedBy((String)value);
            }
        }
        ,
        UpdatedDate {
            public Object get(GroupMstEOImpl obj) {
                return obj.getUpdatedDate();
            }

            public void put(GroupMstEOImpl obj, Object value) {
                obj.setUpdatedDate((Timestamp)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public abstract Object get(GroupMstEOImpl object);

        public abstract void put(GroupMstEOImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }

    public static final int GROUPID = AttributesEnum.GroupId.index();
    public static final int COUNTRYCODE = AttributesEnum.CountryCode.index();
    public static final int GROUPNAME = AttributesEnum.GroupName.index();
    public static final int GROUPDESC = AttributesEnum.GroupDesc.index();
    public static final int ACTIVEFLAG = AttributesEnum.ActiveFlag.index();
    public static final int CREATEDBY = AttributesEnum.CreatedBy.index();
    public static final int CREATEDDATE = AttributesEnum.CreatedDate.index();
    public static final int UPDATEDBY = AttributesEnum.UpdatedBy.index();
    public static final int UPDATEDDATE = AttributesEnum.UpdatedDate.index();

    /**
     * This is the default constructor (do not remove).
     */
    public GroupMstEOImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        if (mDefinitionObject == null) {
            mDefinitionObject = EntityDefImpl.findDefObject("com.imum.cpms.model.masters.eo.GroupMstEO");
        }
        return mDefinitionObject;
    }

    /**
     * Gets the attribute value for GroupId, using the alias name GroupId.
     * @return the GroupId
     */
    public Integer getGroupId() {
        return (Integer)getAttributeInternal(GROUPID);
    }

    /**
     * Sets <code>value</code> as the attribute value for GroupId.
     * @param value value to set the GroupId
     */
    public void setGroupId(Integer value) {
        setAttributeInternal(GROUPID, value);
    }

    /**
     * Gets the attribute value for CountryCode, using the alias name CountryCode.
     * @return the CountryCode
     */
    public String getCountryCode() {
        return (String)getAttributeInternal(COUNTRYCODE);
    }

    /**
     * Sets <code>value</code> as the attribute value for CountryCode.
     * @param value value to set the CountryCode
     */
    public void setCountryCode(String value) {
        setAttributeInternal(COUNTRYCODE, value);
    }

    /**
     * Gets the attribute value for GroupName, using the alias name GroupName.
     * @return the GroupName
     */
    public String getGroupName() {
        return (String)getAttributeInternal(GROUPNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for GroupName.
     * @param value value to set the GroupName
     */
    public void setGroupName(String value) {
        setAttributeInternal(GROUPNAME, value);
    }

    /**
     * Gets the attribute value for GroupDesc, using the alias name GroupDesc.
     * @return the GroupDesc
     */
    public String getGroupDesc() {
        return (String)getAttributeInternal(GROUPDESC);
    }

    /**
     * Sets <code>value</code> as the attribute value for GroupDesc.
     * @param value value to set the GroupDesc
     */
    public void setGroupDesc(String value) {
        setAttributeInternal(GROUPDESC, value);
    }

    /**
     * Gets the attribute value for ActiveFlag, using the alias name ActiveFlag.
     * @return the ActiveFlag
     */
    public String getActiveFlag() {
        return (String)getAttributeInternal(ACTIVEFLAG);
    }

    /**
     * Sets <code>value</code> as the attribute value for ActiveFlag.
     * @param value value to set the ActiveFlag
     */
    public void setActiveFlag(String value) {
        setAttributeInternal(ACTIVEFLAG, value);
    }

    /**
     * Gets the attribute value for CreatedBy, using the alias name CreatedBy.
     * @return the CreatedBy
     */
    public String getCreatedBy() {
        return (String)getAttributeInternal(CREATEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for CreatedBy.
     * @param value value to set the CreatedBy
     */
    public void setCreatedBy(String value) {
        setAttributeInternal(CREATEDBY, value);
    }

    /**
     * Gets the attribute value for CreatedDate, using the alias name CreatedDate.
     * @return the CreatedDate
     */
    public Timestamp getCreatedDate() {
        return (Timestamp)getAttributeInternal(CREATEDDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for CreatedDate.
     * @param value value to set the CreatedDate
     */
    public void setCreatedDate(Timestamp value) {
        setAttributeInternal(CREATEDDATE, value);
    }

    /**
     * Gets the attribute value for UpdatedBy, using the alias name UpdatedBy.
     * @return the UpdatedBy
     */
    public String getUpdatedBy() {
        return (String)getAttributeInternal(UPDATEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for UpdatedBy.
     * @param value value to set the UpdatedBy
     */
    public void setUpdatedBy(String value) {
        setAttributeInternal(UPDATEDBY, value);
    }

    /**
     * Gets the attribute value for UpdatedDate, using the alias name UpdatedDate.
     * @return the UpdatedDate
     */
    public Timestamp getUpdatedDate() {
        return (Timestamp)getAttributeInternal(UPDATEDDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for UpdatedDate.
     * @param value value to set the UpdatedDate
     */
    public void setUpdatedDate(Timestamp value) {
        setAttributeInternal(UPDATEDDATE, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }


    /**
     * @param groupId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Integer groupId) {
        return new Key(new Object[]{groupId});
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        super.create(attributeList);
    }

    /**
     * Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        super.doDML(operation, e);
    }
}
