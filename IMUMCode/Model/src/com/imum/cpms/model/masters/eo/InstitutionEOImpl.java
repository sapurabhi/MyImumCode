package com.imum.cpms.model.masters.eo;

import java.math.BigDecimal;

import java.sql.CallableStatement;
import java.sql.Date;

import java.sql.Types;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue May 27 09:29:15 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class InstitutionEOImpl extends EntityImpl {
    private static EntityDefImpl mDefinitionObject;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        INSTID,
        INSTNAME,
        tradelicensenum,
        INSTTYPE,
        CUSTINSTADDRSEQ,
        CityCode,
        CountryCode,
        Landlinenum,
        Faxnum,
        Primarycontact,
        EmailID,
        Activeflag,
        CreatedBy,
        CreatedDate,
        Updatedby,
        Updatedate,
        ALTERNATEPHONENUM;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }

    public static final int INSTID = AttributesEnum.INSTID.index();
    public static final int INSTNAME = AttributesEnum.INSTNAME.index();
    public static final int TRADELICENSENUM = AttributesEnum.tradelicensenum.index();
    public static final int INSTTYPE = AttributesEnum.INSTTYPE.index();
    public static final int CUSTINSTADDRSEQ = AttributesEnum.CUSTINSTADDRSEQ.index();
    public static final int CITYCODE = AttributesEnum.CityCode.index();
    public static final int COUNTRYCODE = AttributesEnum.CountryCode.index();
    public static final int LANDLINENUM = AttributesEnum.Landlinenum.index();
    public static final int FAXNUM = AttributesEnum.Faxnum.index();
    public static final int PRIMARYCONTACT = AttributesEnum.Primarycontact.index();
    public static final int EMAILID = AttributesEnum.EmailID.index();
    public static final int ACTIVEFLAG = AttributesEnum.Activeflag.index();
    public static final int CREATEDBY = AttributesEnum.CreatedBy.index();
    public static final int CREATEDDATE = AttributesEnum.CreatedDate.index();
    public static final int UPDATEDBY = AttributesEnum.Updatedby.index();
    public static final int UPDATEDATE = AttributesEnum.Updatedate.index();
    public static final int ALTERNATEPHONENUM = AttributesEnum.ALTERNATEPHONENUM.index();

    /**
     * This is the default constructor (do not remove).
     */
    public InstitutionEOImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        if (mDefinitionObject == null) {
            mDefinitionObject = EntityDefImpl.findDefObject("com.imum.cpms.model.masters.eo.InstitutionEO");
        }
        return mDefinitionObject;
    }

    /**
     * Gets the attribute value for INSTID, using the alias name INSTID.
     * @return the INSTID
     */
    public BigDecimal getINSTID() {
        return (BigDecimal)getAttributeInternal(INSTID);
    }

    /**
     * Sets <code>value</code> as the attribute value for INSTID.
     * @param value value to set the INSTID
     */
    public void setINSTID(BigDecimal value) {
        setAttributeInternal(INSTID, value);
    }

    /**
     * Gets the attribute value for INSTNAME, using the alias name INSTNAME.
     * @return the INSTNAME
     */
    public String getINSTNAME() {
        return (String)getAttributeInternal(INSTNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for INSTNAME.
     * @param value value to set the INSTNAME
     */
    public void setINSTNAME(String value) {
        setAttributeInternal(INSTNAME, value);
    }

    /**
     * Gets the attribute value for tradelicensenum, using the alias name tradelicensenum.
     * @return the tradelicensenum
     */
    public String gettradelicensenum() {
        return (String)getAttributeInternal(TRADELICENSENUM);
    }

    /**
     * Sets <code>value</code> as the attribute value for tradelicensenum.
     * @param value value to set the tradelicensenum
     */
    public void settradelicensenum(String value) {
        setAttributeInternal(TRADELICENSENUM, value);
    }

    /**
     * Gets the attribute value for INSTTYPE, using the alias name INSTTYPE.
     * @return the INSTTYPE
     */
    public String getINSTTYPE() {
        return (String)getAttributeInternal(INSTTYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for INSTTYPE.
     * @param value value to set the INSTTYPE
     */
    public void setINSTTYPE(String value) {
        setAttributeInternal(INSTTYPE, value);
    }

    /**
     * Gets the attribute value for CUSTINSTADDRSEQ, using the alias name CUSTINSTADDRSEQ.
     * @return the CUSTINSTADDRSEQ
     */
    public BigDecimal getCUSTINSTADDRSEQ() {
        return (BigDecimal)getAttributeInternal(CUSTINSTADDRSEQ);
    }

    /**
     * Sets <code>value</code> as the attribute value for CUSTINSTADDRSEQ.
     * @param value value to set the CUSTINSTADDRSEQ
     */
    public void setCUSTINSTADDRSEQ(BigDecimal value) {
        setAttributeInternal(CUSTINSTADDRSEQ, value);
    }

    /**
     * Gets the attribute value for CityCode, using the alias name CityCode.
     * @return the CityCode
     */
    public String getCityCode() {
        return (String)getAttributeInternal(CITYCODE);
    }

    /**
     * Sets <code>value</code> as the attribute value for CityCode.
     * @param value value to set the CityCode
     */
    public void setCityCode(String value) {
        setAttributeInternal(CITYCODE, value);
    }

    /**
     * Gets the attribute value for CountryCode, using the alias name CountryCode.
     * @return the CountryCode
     */
    public String getCountryCode() {
        return (String)getAttributeInternal(COUNTRYCODE);
    }

    /**
     * Sets <code>value</code> as the attribute value for CountryCode.
     * @param value value to set the CountryCode
     */
    public void setCountryCode(String value) {
        setAttributeInternal(COUNTRYCODE, value);
    }

    /**
     * Gets the attribute value for Landlinenum, using the alias name Landlinenum.
     * @return the Landlinenum
     */
    public String getLandlinenum() {
        return (String)getAttributeInternal(LANDLINENUM);
    }

    /**
     * Sets <code>value</code> as the attribute value for Landlinenum.
     * @param value value to set the Landlinenum
     */
    public void setLandlinenum(String value) {
        setAttributeInternal(LANDLINENUM, value);
    }

    /**
     * Gets the attribute value for Faxnum, using the alias name Faxnum.
     * @return the Faxnum
     */
    public String getFaxnum() {
        return (String)getAttributeInternal(FAXNUM);
    }

    /**
     * Sets <code>value</code> as the attribute value for Faxnum.
     * @param value value to set the Faxnum
     */
    public void setFaxnum(String value) {
        setAttributeInternal(FAXNUM, value);
    }

    /**
     * Gets the attribute value for Primarycontact, using the alias name Primarycontact.
     * @return the Primarycontact
     */
    public String getPrimarycontact() {
        return (String)getAttributeInternal(PRIMARYCONTACT);
    }

    /**
     * Sets <code>value</code> as the attribute value for Primarycontact.
     * @param value value to set the Primarycontact
     */
    public void setPrimarycontact(String value) {
        setAttributeInternal(PRIMARYCONTACT, value);
    }

    /**
     * Gets the attribute value for EmailID, using the alias name EmailID.
     * @return the EmailID
     */
    public String getEmailID() {
        return (String)getAttributeInternal(EMAILID);
    }

    /**
     * Sets <code>value</code> as the attribute value for EmailID.
     * @param value value to set the EmailID
     */
    public void setEmailID(String value) {
        setAttributeInternal(EMAILID, value);
    }

    /**
     * Gets the attribute value for Activeflag, using the alias name Activeflag.
     * @return the Activeflag
     */
    public String getActiveflag() {
        return (String)getAttributeInternal(ACTIVEFLAG);
    }

    /**
     * Sets <code>value</code> as the attribute value for Activeflag.
     * @param value value to set the Activeflag
     */
    public void setActiveflag(String value) {
        setAttributeInternal(ACTIVEFLAG, value);
    }

    /**
     * Gets the attribute value for CreatedBy, using the alias name CreatedBy.
     * @return the CreatedBy
     */
    public String getCreatedBy() {
        return (String)getAttributeInternal(CREATEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for CreatedBy.
     * @param value value to set the CreatedBy
     */
    public void setCreatedBy(String value) {
        setAttributeInternal(CREATEDBY, value);
    }

    /**
     * Gets the attribute value for CreatedDate, using the alias name CreatedDate.
     * @return the CreatedDate
     */
    public Date getCreatedDate() {
        return (Date)getAttributeInternal(CREATEDDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for CreatedDate.
     * @param value value to set the CreatedDate
     */
    public void setCreatedDate(Date value) {
        setAttributeInternal(CREATEDDATE, value);
    }

    /**
     * Gets the attribute value for Updatedby, using the alias name Updatedby.
     * @return the Updatedby
     */
    public String getUpdatedby() {
        return (String)getAttributeInternal(UPDATEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for Updatedby.
     * @param value value to set the Updatedby
     */
    public void setUpdatedby(String value) {
        setAttributeInternal(UPDATEDBY, value);
    }

    /**
     * Gets the attribute value for Updatedate, using the alias name Updatedate.
     * @return the Updatedate
     */
    public Date getUpdatedate() {
        return (Date)getAttributeInternal(UPDATEDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for Updatedate.
     * @param value value to set the Updatedate
     */
    public void setUpdatedate(Date value) {
        setAttributeInternal(UPDATEDATE, value);
    }

    /**
     * Gets the attribute value for ALTERNATEPHONENUM, using the alias name ALTERNATEPHONENUM.
     * @return the ALTERNATEPHONENUM
     */
    public String getALTERNATEPHONENUM() {
        return (String)getAttributeInternal(ALTERNATEPHONENUM);
    }

    /**
     * Sets <code>value</code> as the attribute value for ALTERNATEPHONENUM.
     * @param value value to set the ALTERNATEPHONENUM
     */
    public void setALTERNATEPHONENUM(String value) {
        setAttributeInternal(ALTERNATEPHONENUM, value);
    }


    /**
     * @param iNSTID key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(BigDecimal iNSTID) {
        return new Key(new Object[]{iNSTID});
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
   protected void create(AttributeList attributeList) {
        super.create(attributeList);
        CallableStatement stmt = null;
                try {
                    stmt = getDBTransaction().createCallableStatement("{call  sequence_mst_trigger(?,?) }", 0);
                    stmt.setString(1, "CUST_INST_ID");            
                    stmt.registerOutParameter(2, Types.BIGINT);
                    stmt.execute();           
                    BigDecimal SeqNum = stmt.getBigDecimal(2);
                    setINSTID(SeqNum);
                }  catch (Exception e) {
                                e.printStackTrace();
                       }

    }

    /**
     * Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        super.doDML(operation, e);
    }
}
