package com.imum.cpms.model.staffdeploy.vo;

import java.sql.Date;

import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Nov 13 18:39:54 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class piLeaveApprolVORowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        Sno {
            public Object get(piLeaveApprolVORowImpl obj) {
                return obj.getSno();
            }

            public void put(piLeaveApprolVORowImpl obj, Object value) {
                obj.setSno((Integer)value);
            }
        }
        ,
        PIid {
            public Object get(piLeaveApprolVORowImpl obj) {
                return obj.getPIid();
            }

            public void put(piLeaveApprolVORowImpl obj, Object value) {
                obj.setPIid((String)value);
            }
        }
        ,
        FromDate {
            public Object get(piLeaveApprolVORowImpl obj) {
                return obj.getFromDate();
            }

            public void put(piLeaveApprolVORowImpl obj, Object value) {
                obj.setFromDate((Date)value);
            }
        }
        ,
        ToDate {
            public Object get(piLeaveApprolVORowImpl obj) {
                return obj.getToDate();
            }

            public void put(piLeaveApprolVORowImpl obj, Object value) {
                obj.setToDate((Date)value);
            }
        }
        ,
        AppliedDate {
            public Object get(piLeaveApprolVORowImpl obj) {
                return obj.getAppliedDate();
            }

            public void put(piLeaveApprolVORowImpl obj, Object value) {
                obj.setAppliedDate((Date)value);
            }
        }
        ,
        LeavesApplied {
            public Object get(piLeaveApprolVORowImpl obj) {
                return obj.getLeavesApplied();
            }

            public void put(piLeaveApprolVORowImpl obj, Object value) {
                obj.setLeavesApplied((Float)value);
            }
        }
        ,
        LeaveReason {
            public Object get(piLeaveApprolVORowImpl obj) {
                return obj.getLeaveReason();
            }

            public void put(piLeaveApprolVORowImpl obj, Object value) {
                obj.setLeaveReason((String)value);
            }
        }
        ,
        SupId {
            public Object get(piLeaveApprolVORowImpl obj) {
                return obj.getSupId();
            }

            public void put(piLeaveApprolVORowImpl obj, Object value) {
                obj.setSupId((String)value);
            }
        }
        ,
        balencedLeaves {
            public Object get(piLeaveApprolVORowImpl obj) {
                return obj.getbalencedLeaves();
            }

            public void put(piLeaveApprolVORowImpl obj, Object value) {
                obj.setbalencedLeaves((Float)value);
            }
        }
        ,
        LeaveType {
            public Object get(piLeaveApprolVORowImpl obj) {
                return obj.getLeaveType();
            }

            public void put(piLeaveApprolVORowImpl obj, Object value) {
                obj.setLeaveType((String)value);
            }
        }
        ,
        Status {
            public Object get(piLeaveApprolVORowImpl obj) {
                return obj.getStatus();
            }

            public void put(piLeaveApprolVORowImpl obj, Object value) {
                obj.setStatus((String)value);
            }
        }
        ,
        Attachment {
            public Object get(piLeaveApprolVORowImpl obj) {
                return obj.getAttachment();
            }

            public void put(piLeaveApprolVORowImpl obj, Object value) {
                obj.setAttachment((String)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public abstract Object get(piLeaveApprolVORowImpl object);

        public abstract void put(piLeaveApprolVORowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int SNO = AttributesEnum.Sno.index();
    public static final int PIID = AttributesEnum.PIid.index();
    public static final int FROMDATE = AttributesEnum.FromDate.index();
    public static final int TODATE = AttributesEnum.ToDate.index();
    public static final int APPLIEDDATE = AttributesEnum.AppliedDate.index();
    public static final int LEAVESAPPLIED = AttributesEnum.LeavesApplied.index();
    public static final int LEAVEREASON = AttributesEnum.LeaveReason.index();
    public static final int SUPID = AttributesEnum.SupId.index();
    public static final int BALENCEDLEAVES = AttributesEnum.balencedLeaves.index();
    public static final int LEAVETYPE = AttributesEnum.LeaveType.index();
    public static final int STATUS = AttributesEnum.Status.index();
    public static final int ATTACHMENT = AttributesEnum.Attachment.index();

    /**
     * This is the default constructor (do not remove).
     */
    public piLeaveApprolVORowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute Sno.
     * @return the Sno
     */
    public Integer getSno() {
        return (Integer) getAttributeInternal(SNO);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Sno.
     * @param value value to set the  Sno
     */
    public void setSno(Integer value) {
        setAttributeInternal(SNO, value);
    }

    /**
     * Gets the attribute value for the calculated attribute PIid.
     * @return the PIid
     */
    public String getPIid() {
        return (String) getAttributeInternal(PIID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute PIid.
     * @param value value to set the  PIid
     */
    public void setPIid(String value) {
        setAttributeInternal(PIID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute FromDate.
     * @return the FromDate
     */
    public Date getFromDate() {
        return (Date) getAttributeInternal(FROMDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute FromDate.
     * @param value value to set the  FromDate
     */
    public void setFromDate(Date value) {
        setAttributeInternal(FROMDATE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute ToDate.
     * @return the ToDate
     */
    public Date getToDate() {
        return (Date) getAttributeInternal(TODATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ToDate.
     * @param value value to set the  ToDate
     */
    public void setToDate(Date value) {
        setAttributeInternal(TODATE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute AppliedDate.
     * @return the AppliedDate
     */
    public Date getAppliedDate() {
        return (Date) getAttributeInternal(APPLIEDDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute AppliedDate.
     * @param value value to set the  AppliedDate
     */
    public void setAppliedDate(Date value) {
        setAttributeInternal(APPLIEDDATE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute LeavesApplied.
     * @return the LeavesApplied
     */
    public Float getLeavesApplied() {
        return (Float) getAttributeInternal(LEAVESAPPLIED);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute LeavesApplied.
     * @param value value to set the  LeavesApplied
     */
    public void setLeavesApplied(Float value) {
        setAttributeInternal(LEAVESAPPLIED, value);
    }

    /**
     * Gets the attribute value for the calculated attribute LeaveReason.
     * @return the LeaveReason
     */
    public String getLeaveReason() {
        return (String) getAttributeInternal(LEAVEREASON);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute LeaveReason.
     * @param value value to set the  LeaveReason
     */
    public void setLeaveReason(String value) {
        setAttributeInternal(LEAVEREASON, value);
    }

    /**
     * Gets the attribute value for the calculated attribute SupId.
     * @return the SupId
     */
    public String getSupId() {
        return (String) getAttributeInternal(SUPID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute SupId.
     * @param value value to set the  SupId
     */
    public void setSupId(String value) {
        setAttributeInternal(SUPID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute balencedLeaves.
     * @return the balencedLeaves
     */
    public Float getbalencedLeaves() {
        return (Float) getAttributeInternal(BALENCEDLEAVES);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute balencedLeaves.
     * @param value value to set the  balencedLeaves
     */
    public void setbalencedLeaves(Float value) {
        setAttributeInternal(BALENCEDLEAVES, value);
    }

    /**
     * Gets the attribute value for the calculated attribute LeaveType.
     * @return the LeaveType
     */
    public String getLeaveType() {
        return (String) getAttributeInternal(LEAVETYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute LeaveType.
     * @param value value to set the  LeaveType
     */
    public void setLeaveType(String value) {
        setAttributeInternal(LEAVETYPE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Status.
     * @return the Status
     */
    public String getStatus() {
        return (String) getAttributeInternal(STATUS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Status.
     * @param value value to set the  Status
     */
    public void setStatus(String value) {
        setAttributeInternal(STATUS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Attachment.
     * @return the Attachment
     */
    public String getAttachment() {
        return (String) getAttributeInternal(ATTACHMENT);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Attachment.
     * @param value value to set the  Attachment
     */
    public void setAttachment(String value) {
        setAttributeInternal(ATTACHMENT, value);
    }


    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}
