package com.imum.cpms.model.staffdeploy.am;


import com.imum.cpms.model.masters.vo.HHDeviceMstUVOImpl;
import com.imum.cpms.model.staffdeploy.am.common.StaffDeploy;
import com.imum.cpms.model.staffdeploy.vo.EditVOImpl;
import com.imum.cpms.model.staffdeploy.vo.EditVORowImpl;
import com.imum.cpms.model.staffdeploy.vo.GenCoursesEndDateVOImpl;
import com.imum.cpms.model.staffdeploy.vo.GenCoursesEndDateVORowImpl;
import com.imum.cpms.model.staffdeploy.vo.GenTrainingCoursesMasterVOImpl;
import com.imum.cpms.model.staffdeploy.vo.HHCAssignSupCheckVOImpl;
import com.imum.cpms.model.staffdeploy.vo.HHCAssignSupCheckVORowImpl;
import com.imum.cpms.model.staffdeploy.vo.HHCAssignVOImpl;
import com.imum.cpms.model.staffdeploy.vo.HHCAssignVORowImpl;
import com.imum.cpms.model.staffdeploy.vo.HHCAssignWorkCheckVOImpl;
import com.imum.cpms.model.staffdeploy.vo.HHCAssignWorkCheckVORowImpl;
import com.imum.cpms.model.staffdeploy.vo.HHCNewReImpl;
import com.imum.cpms.model.staffdeploy.vo.HHCNewReRowImpl;
import com.imum.cpms.model.staffdeploy.vo.PIAssignListVOImpl;
import com.imum.cpms.model.staffdeploy.vo.PIGroupLOVVOImpl;
import com.imum.cpms.model.staffdeploy.vo.PILeaveMangementVOImpl;
import com.imum.cpms.model.staffdeploy.vo.PIObservationDocsVOImpl;
import com.imum.cpms.model.staffdeploy.vo.PITrainingActivityUVOImpl;
import com.imum.cpms.model.staffdeploy.vo.PITrainingActivityUVORowImpl;
import com.imum.cpms.model.staffdeploy.vo.PIUnAssignStatusVOImpl;
import com.imum.cpms.model.staffdeploy.vo.PIUnAssignStatusVORowImpl;
import com.imum.cpms.model.staffdeploy.vo.PIUserMstUVOImpl;
import com.imum.cpms.model.staffdeploy.vo.PIUserMstUVORowImpl;

import com.imum.cpms.model.staffdeploy.vo.PiTempMonthVOImpl;
import com.imum.cpms.model.staffdeploy.vo.ReportDynamicVOImpl;
import com.imum.cpms.model.staffdeploy.vo.SupervisorAssignmentVOImpl;
import com.imum.cpms.model.staffdeploy.vo.SupervisorAssignmentVORowImpl;

import com.imum.cpms.model.staffdeploy.vo.SupervisorSectorVOImpl;
import com.imum.cpms.model.staffdeploy.vo.SupervisorSectorVORowImpl;

import com.imum.cpms.model.staffdeploy.vo.piLeaveApprolVOImpl;
import com.imum.cpms.model.staffdeploy.vo.pisforobservationsLOVImpl;
import com.imum.cpms.model.staffdeploy.vo.TempViewObjImpl;
import com.imum.cpms.model.staffdeploy.vo.TempViewObjRowImpl;
import com.imum.cpms.model.transactions.vo.CardTypeMstUVOImpl;


import com.microsoft.sqlserver.jdbc.SQLServerException;

import java.io.PrintWriter;
import java.io.StringWriter;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.PreparedStatement;

import java.sql.ResultSet;
import java.sql.SQLException;

import java.sql.Statement;

import java.util.Calendar;

import java.util.Date;
import java.sql.Timestamp;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;


import java.util.HashMap;


//import javax.faces.context.ExternalContext;
//import javax.faces.application.FacesMessage;
////import javax.faces.context.FacesContext;
//import javax.faces.context.ExternalContext;
//import javax.faces.context.FacesContext;


import java.util.Iterator;
import java.util.concurrent.TimeUnit;

import javax.faces.application.FacesMessage;

import javax.faces.context.ExternalContext;
import javax.faces.context.FacesContext;

import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewObject;

import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.SequenceImpl;


import oracle.jbo.server.ViewObjectImpl;

import org.apache.myfaces.trinidad.event.SelectionEvent;

import javax.servlet.http.HttpSession;

import oracle.adf.model.BindingContext;

import oracle.adf.model.binding.DCIteratorBinding;
import oracle.adf.share.ADFContext;
import oracle.adf.view.rich.context.AdfFacesContext;
import oracle.adf.view.rich.util.FacesMessageUtils;

import oracle.jbo.DMLException;
import oracle.jbo.RowInconsistentException;
import oracle.jbo.RowSet;
import oracle.jbo.ViewCriteria;
import oracle.jbo.domain.BlobDomain;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.DBTransaction;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewDefImpl;
import oracle.jbo.server.ViewRowImpl;
import oracle.jbo.uicli.binding.JUCtrlListBinding;
import utils.system;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Oct 21 20:53:12 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class StaffDeployImpl extends ApplicationModuleImpl implements StaffDeploy {
    /**
     * This is the default constructor (do not remove).
     */
     
     private static final String DYNAMICVO_NAME = "ReportDynamicVO1";
     private static final String DYNAMICVO_PATH = "com.imum.cpms.model.staffdeploy.vo.ReportDynamicVO1";
     private boolean disabled= false;
    public StaffDeployImpl() {
    }
    public Boolean doCommit(){
        try{
           
        getDBTransaction().commit();
            if(getPIAssignSearch1()!=null || getPIworkVO1()!=null){
                getPIAssignSearch1().executeQuery();
                getPIworkVO1().executeEmptyRowSet();
            }
           
            return true;
        }catch(Exception e){
            e.printStackTrace();
            return false;
            }
        }
    public void createDynamicVOReport(Date dynamicReportMonthYear,String dynamicReportShift) {
            try {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        ExternalContext externalContext = facesContext.getExternalContext();
        HttpSession httpSession = (HttpSession) externalContext.getSession(false);
        String loggedinUser=httpSession.getAttribute("loggedinUserid").toString();
       
        //Get a new View Object Definition.
        ViewDefImpl dynamicVODef = new ViewDefImpl(DYNAMICVO_PATH);
        
        //Get the current View Object instance.
       
        ViewObjectImpl dynamicVO = (ViewObjectImpl)findViewObject(DYNAMICVO_NAME);
        if(dynamicVO.getAttributeIndexOf("AssignedDate") ==-1 ){
        dynamicVO.addDynamicAttribute("AssignedDate");
        }
//        ViewObjectImpl zonevo=(ViewObjectImpl)getSectorWorkVO1();
//        zonevo.setApplyViewCriteriaName("SectorReportVOCriteria");
//        zonevo.setNamedWhereClauseParam("superid", loggedinUser);
//        zonevo.executeQuery();
        ViewObjectImpl zonevo=(ViewObjectImpl)getSectorWorkAllZonesVO1();
         zonevo.setApplyViewCriteriaName("SectorWorkAllZonesVOCriteria");
         zonevo.setNamedWhereClauseParam("superid1",loggedinUser);
        Date dat = dynamicReportMonthYear;
                   Calendar cal1 = Calendar.getInstance();
                    cal1.setTime(dat);
                    int curyear=cal1.get(Calendar.YEAR);
                    int curmonth = cal1.get(Calendar.MONTH);
                    curmonth=curmonth+1;
                    
        String startDate="01-"+curmonth+"-"+curyear;
        SimpleDateFormat sdf2 = new SimpleDateFormat("dd-MM-yyyy");
        java.util.Date date;
       
            date = sdf2.parse(startDate);
       
        java.sql.Date sqlStartDate = new java.sql.Date(date.getTime());  
                    System.out.println(sqlStartDate.toString());
        zonevo.setNamedWhereClauseParam("reportstartDate",sqlStartDate);
        zonevo.setNamedWhereClauseParam("reportstartDate", sqlStartDate);
             System.out.println(loggedinUser);
            String query = zonevo.getQuery();
                System.out.println("zone query is:::"+query);

            zonevo.executeQuery();
        
       
          System.out.println("rowcount"+zonevo.getRowCount());
        RowSetIterator rsit=zonevo.createRowSetIterator(null);
        while(rsit.hasNext()){
            
            Row row=rsit.next();
            if(row.getAttribute("SectorZone")!=null && row.getAttribute("SectorZone")!=""){
                System.out.println("ZoneNameis"+row.getAttribute("SectorZone").toString());
                String sectorzone=row.getAttribute("SectorZone").toString();
                sectorzone=sectorzone.replace(" - ","_");
                sectorzone=sectorzone.replaceAll("-","_");
                sectorzone=sectorzone.replaceAll(" ","");
                System.out.println("index of Sector :::"+dynamicVO.getAttributeIndexOf(sectorzone));
                if(dynamicVO.getAttributeIndexOf(sectorzone) ==-1 ){
                dynamicVO.addDynamicAttribute(sectorzone);
                }
            }
        }
        
    
      insertRowsinDynamicVo(dynamicVO,dynamicReportMonthYear,dynamicReportShift);
        } catch (ParseException e) {
            e.printStackTrace();
        }
    }
    
    /**
     * Create the attributes for the View Object.
     * All attributes must be created as "Updatable" in order to set their values, otherwise you'll get an error saying that
     * you cannot update read only attributes.
     * 
     * @param dynamicVODef
     * @param dynamicVOAttributes
     * @return Return the list of read only attributes. 
     */
    
    public void insertRowsinDynamicVo(ViewObjectImpl dynamicVO,Date dynamicReportMonthYear,String dynamicReportShift){
        FacesContext facesContext = FacesContext.getCurrentInstance();
        ExternalContext externalContext = facesContext.getExternalContext();
        HttpSession httpSession = (HttpSession) externalContext.getSession(false);
        String loggedinUser=httpSession.getAttribute("loggedinUserid").toString();
        String monthstrtdate="";
        String monthenddate="";
        String dateass="";
        String zone="";
        Timestamp endttimestamp=null;
        Timestamp starttimestamp=null;
        java.sql.Date sqldatereq=null;
        Date dat = dynamicReportMonthYear;
                   Calendar cal1 = Calendar.getInstance();
                    cal1.setTime(dat);
                    int curyear=cal1.get(Calendar.YEAR);
                    int curmonth = cal1.get(Calendar.MONTH);
                    curmonth=curmonth+1;
                    String curmonth1="";
                    int totladays1 = cal1.getActualMaximum(cal1.DAY_OF_MONTH);
                    if(curmonth<=9){
                       curmonth1="0"+curmonth;
                        monthstrtdate=curyear+"-"+curmonth1+"-"+"01";
                        monthenddate=curyear+"-"+curmonth1+"-"+totladays1;
                        
                    }else
                    {
                        monthstrtdate=curyear+"-"+curmonth+"-"+"01";
                       monthenddate=curyear+"-"+curmonth+"-"+totladays1;
                    }
             
               dynamicVO.executeEmptyRowSet();
               dynamicVO.clearCache();
                    for(int i=totladays1;i>=1;i--){
                        Row newrow = dynamicVO.createRow();
                        newrow.setNewRowState(Row.STATUS_INITIALIZED);
                        if(i<=9){
                        dateass="0"+i+"-"+curmonth+"-"+curyear;
                        }else{
                            dateass=i+"-"+curmonth+"-"+curyear;
                        }
                        newrow.setAttribute("AssignedDate", dateass);
                        
                        dynamicVO.insertRow(newrow);
                        totladays1--;
                    }
                    
        try{
            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
            Date parsestrtdDate = dateFormat.parse(monthstrtdate);
            Date parsenddDate = dateFormat.parse(monthenddate);
             starttimestamp = new java.sql.Timestamp(parsestrtdDate.getTime());
             endttimestamp= new java.sql.Timestamp(parsenddDate.getTime());
            ViewObjectImpl pimonth=(ViewObjectImpl)getPImonthlyWorkAssignVO1();
            if(Integer.parseInt(dynamicReportShift)!=4){
       
        pimonth.setApplyViewCriteriaName("PImonthlyReportVOCriteria1");
        pimonth.setNamedWhereClauseParam("supervisorid", loggedinUser);
        pimonth.setNamedWhereClauseParam("pishift", Integer.parseInt(dynamicReportShift));
        pimonth.setNamedWhereClauseParam("reportstartdate", starttimestamp);
        pimonth.setNamedWhereClauseParam("reportenddate", endttimestamp);
        System.out.println(pimonth.getQuery());
        pimonth.executeQuery();
                pimonth.applyViewCriteria(null);
                pimonth.setWhereClause(null);
            //
            }
            else
            {
                pimonth.applyViewCriteria(null);
              pimonth.setWhereClause(null);
                pimonth.setWhereClause("Sup_Id='" + loggedinUser + "'" +
                                       " and Shift in(1,2,3) and Assgn_Date >='" +
                                       monthstrtdate + "'" +
                                       " and Assgn_Date <='" + monthenddate +
                                       "'");
                System.out.println(pimonth.getQuery());
                pimonth.executeQuery();
                pimonth.applyViewCriteria(null);
                pimonth.setWhereClause(null);
            }
       
        RowSetIterator rsid=pimonth.createRowSetIterator(null);
        RowSetIterator rsidyna=dynamicVO.createRowSetIterator(null);
            Row row=null;
        while(rsidyna.hasNext()){
            Row rdyna=rsidyna.next();
            String dynaassdate=rdyna.getAttribute("AssignedDate").toString();
           // System.out.println(dynaassdate);
            //SimpleDateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
            SimpleDateFormat dateFormat1 = new SimpleDateFormat("dd-MM-yyyy");
            Date parsestrtdDate1 = dateFormat1.parse(dynaassdate);
            //java.sql.Timestamp Assignedtimestamp = new java.sql.Timestamp(parsestrtdDate1.getTime());
           sqldatereq= new java.sql.Date(parsestrtdDate1.getTime());
         while(rsid.hasNext()){
            Row rowq=rsid.next();
             String monassndate=rowq.getAttribute("AssgnDate").toString();
             System.out.println(monassndate);
            //SimpleDateFormat dateFormat2 = new SimpleDateFormat("dd-MM-yyyy");
            SimpleDateFormat dateFormat2 = new SimpleDateFormat("yyyy-MM-dd");
            Date parsestrtdDate2 = dateFormat2.parse(monassndate);
            java.sql.Date sqlmonth=new java.sql.Date(parsestrtdDate2.getTime());
             System.out.println("Comparison"+sqldatereq+"--"+sqlmonth);
             if(sqldatereq.compareTo(sqlmonth)==0){
                 System.out.println("Second Comparison"+sqldatereq+"--"+sqlmonth);
                 if(rowq.getAttribute("SectorZone")!=null){
                     
                     if(rowq.getAttribute("UpdatedBy") != null && rowq.getAttribute("UpdatedBy").toString().equals("PI_ADMIN") && rowq.getAttribute("SectorZone")!=null && !rowq.getAttribute("SectorZone").toString().equals("ALL") ){
                        // if(!rowq.getAttribute("SectorZone").toString().equals("ALL")){
                                              String qzone1=rowq.getAttribute("SectorZone").toString();
                                              qzone1=qzone1.replace(" - ","_");
                                              qzone1=qzone1.replaceAll("-","_");
                                              qzone1=qzone1.replaceAll(" ","");
                                              if(rdyna.getAttribute(qzone1) == null){
                                                  rdyna.setAttribute(qzone1,rowq.getAttribute("PIid").toString()+"(L)");
                                              }else{
                                              rdyna.setAttribute(qzone1,rdyna.getAttribute(qzone1).toString()+","+rowq.getAttribute("PIid").toString()+"(L)");
                                              }
                    // }
                                              //rdyna.setAttribute(qzone1,rdyna.getAttribute(qzone1).toString()+","+rowq.getAttribute("PIid").toString());
                    } else if(!rowq.getAttribute("SectorZone").toString().equals("ALL") && !rowq.getAttribute("SectorZone").toString().equals("RESERVED") && !rowq.getAttribute("SectorZone").toString().equals("OFF")){
                        zone=rowq.getAttribute("SectorZone").toString();
                         zone=zone.replace(" - ","_");
                         zone=zone.replaceAll("-","_");
                         zone=zone.replaceAll(" ","");
                        //zone=rowq.getAttribute("SectorZone").toString().replace(" - ", "_");
                         if(rdyna.getAttribute(zone)!=null){
                             if(rdyna.getAttribute(zone).toString()!=null){
                               rdyna.setAttribute(zone,rdyna.getAttribute(zone).toString()+","+rowq.getAttribute("PIid").toString());
                             }
                         System.out.println("success");
                         }else{
                             rdyna.setAttribute(zone,rowq.getAttribute("PIid").toString());
                         }
                     }else if(rowq.getAttribute("SectorZone").toString().equals("ALL")){
//                         ViewObjectImpl zonevo=(ViewObjectImpl)getSectorWorkVO1();
//                         zonevo.setApplyViewCriteriaName("SectorReportVOCriteria");
//                         zonevo.setNamedWhereClauseParam("superid", loggedinUser);
//                         zonevo.executeQuery();
                                 ViewObjectImpl zonevo=(ViewObjectImpl)getSectorWorkVO1();
         zonevo.setApplyViewCriteriaName("SectorReportVOCriteria");
         zonevo.setNamedWhereClauseParam("superid",loggedinUser);
        Date dat1 = dynamicReportMonthYear;
                   Calendar cal11 = Calendar.getInstance();
                    cal11.setTime(dat1);
                    int curyear1=cal1.get(Calendar.YEAR);
                    int curmonth2 = cal11.get(Calendar.MONTH);
                    curmonth2=curmonth2+1;
                    
        String startDate="01-"+curmonth2+"-"+curyear1;
        SimpleDateFormat sdf2 = new SimpleDateFormat("dd-MM-yyyy");
        java.util.Date date;
       
            date = sdf2.parse(startDate);
       
        java.sql.Date sqlStartDate = new java.sql.Date(date.getTime());  
                    System.out.println(sqlStartDate.toString());
        // zonevo.setNamedWhereClauseParam("reportstartDate",sqlStartDate);
             System.out.println(loggedinUser);
       
        zonevo.executeQuery();
                         RowSetIterator rsit=zonevo.createRowSetIterator(null);
                        
                         while(rsit.hasNext()){
                          row=rsit.next();
                             if(row.getAttribute("SectorZone")!=null && (row.getAttribute("SectorZone")!="") && (!(row.getAttribute("SectorZone").toString()).equals("ALL")) && (!(row.getAttribute("SectorZone").toString()).equals("RESERVED")) &&  (!(row.getAttribute("SectorZone").toString()).equals("OFF"))){
                                 //System.out.println("ZoneNameis"+row.getAttribute("SectorZone").toString());
                               //dynamicVO.addDynamicAttribute(row.getAttribute("SectorZone").toString().replace(" - ","_"));
                               //zone=rowq.getAttribute("SectorZone").toString().replace(" - ", "_");
                                
                               if(rowq.getAttribute("UpdatedBy") != null && rowq.getAttribute("UpdatedBy").toString().equals("PI_ADMIN") && rowq.getAttribute("SectorZone")!=null  ){
                                  // if(!rowq.getAttribute("SectorZone").toString().equals("ALL")){
                                                        String qzone1=row.getAttribute("SectorZone").toString();
                                                        qzone1=qzone1.replace(" - ","_");
                                                        qzone1=qzone1.replaceAll("-","_");
                                                        qzone1=qzone1.replaceAll(" ","");
                                                        if(rdyna.getAttribute(qzone1) == null){
                                                            rdyna.setAttribute(qzone1,rowq.getAttribute("PIid").toString()+"(L)");
                                                        }else{
                                                        rdyna.setAttribute(qzone1,rdyna.getAttribute(qzone1).toString()+","+rowq.getAttribute("PIid").toString()+"(L)");
                                                        }
                               // }
                                                        //rdyna.setAttribute(qzone1,rdyna.getAttribute(qzone1).toString()+","+rowq.getAttribute("PIid").toString());
                               }else {
                                
                                
                                
                                 zone=rowq.getAttribute("SectorZone").toString();
                                 zone=zone.replace(" - ","_");
                                 zone=zone.replaceAll("-","_");
                                 zone=zone.replaceAll(" ","");
                                 String qzone=row.getAttribute("SectorZone").toString();
                                 qzone=qzone.replace(" - ","_");
                                 qzone=qzone.replaceAll("-","_");
                                 qzone=qzone.replaceAll(" ","");
//                                if(rdyna.getAttribute(zone)!=null){
//                                    if(rdyna.getAttribute(zone).toString()!=null){
                                        //rdyna.setAttribute(row.getAttribute("SectorZone").toString().replace(" - ","_").toString(),"ALL");
                                 if(rdyna.getAttribute(qzone) == null){
                                     rdyna.setAttribute(qzone,rowq.getAttribute("PIid").toString());
                                 }else{
                               rdyna.setAttribute(qzone,rdyna.getAttribute(qzone).toString()+","+rowq.getAttribute("PIid").toString());
                            
                                        }
//                                    }
//                                }
                                 
                                 
                               }
                                 
                             }
                         }
                        // rdyna.setAttribute(zone,rdyna.getAttribute(zone).toString()+","+rowq.getAttribute("PIid").toString());
                     }
                     
                 }
             }
                 
             
        }
            //rsid.first();
            rsid.reset();
        }
       System.out.println(dynamicVO.getRowCount());
        dynamicVO.executeQuery();
        }catch(Exception e){
            e.printStackTrace();;
        }
    }
    
    
    
    
    public void createPIProfile(HashMap map)
    {
        Timestamp sqlDate = new java.sql.Timestamp(new java.util.Date().getTime());
        
        ViewObjectImpl PIvo = this.getPIUserMstUVO1();
        
        if(PIvo != null)
        {
            PIUserMstUVORowImpl PIProfileRow = (PIUserMstUVORowImpl)PIvo.createRow();

            System.out.println("map"+map.get("DOB"));
           
          
             java.sql.Date DOB1 = null;
            java.sql.Date HireDate1 = null;
            java.sql.Date DOI1 = null;
            java.sql.Date DOE1 = null;
            if(map.get("DOB") != null)
            {
            Date currentDate = (Date)(map.get("DOB"));
          DOB1 = new java.sql.Date(currentDate.getTime());
              
            }
            if(map.get("hiredate") != null) {
                Date currentDate = (Date)(map.get("hiredate"));
                HireDate1 = new java.sql.Date(currentDate.getTime());
            }
            if(map.get("dateofIssue") != null) {
                Date currentDate = (Date)(map.get("dateofIssue"));
                DOI1 = new java.sql.Date(currentDate.getTime());
            }
            if(map.get("dateofExpiry") != null) {
                Date currentDate = (Date)(map.get("dateofExpiry"));
                DOE1 = new java.sql.Date(currentDate.getTime());
            }
            System.out.println("PIID"+map.get("PIID"));
          
         /* PIProfileRow.setAttribute("CreatedBy","supervisor");
            PIProfileRow.setAttribute("CreatedDate",sqlDate);*/
            if(!map.get("PIID").equals(null))
                PIProfileRow.setAttribute("UserId",(map.get("PIID").toString()));   
           
            PIProfileRow.setAttribute("FirstName",map.get("Firstname") == null? " ":map.get("Firstname").toString());  
            PIProfileRow.setAttribute("LastName",map.get("Lastname") == null? " ":map.get("Lastname").toString());  
            if(map.get("Gender").toString().equals("0"))
                PIProfileRow.setAttribute("Gender","M"); 
            else
                
            PIProfileRow.setAttribute("Gender","F");  
            if(map.get("DOB") != null)
            PIProfileRow.setAttribute("BirthDate",DOB1);  
            PIProfileRow.setAttribute("LocalAdd1",map.get("Address1") == null? " ":map.get("Address1").toString());  
            PIProfileRow.setAttribute("LocalAdd2",map.get("address2") == null? " ":map.get("address2").toString()); 
          
            ViewObjectImpl cityvo = (ViewObjectImpl)getGenCityLOVVO1();
            RowSetIterator rs = cityvo.createRowSetIterator(null);
            rs.reset();
            String citycode = null;
            while (rs.hasNext()) {
            Row row1 = rs.next();
                if(row1.getAttribute("cityname") != null && map.get("City") != null)
                {
            if (row1.getAttribute("cityname").toString().equals(map.get("City").toString()))  {
            citycode = row1.getAttribute("citycode").toString();
            }
            
            }}
            if(citycode != null)
            PIProfileRow.setAttribute("LocalCity",map.get("City") == null? " ":citycode); 
            
            ViewObjectImpl countryvo = (ViewObjectImpl)getGenCountryLOVVO1();
            RowSetIterator rs2 = countryvo.createRowSetIterator(null);
            rs2.reset();
            String countrycode = null;
            while (rs2.hasNext()) {
            Row row1 = rs2.next();
                if(row1.getAttribute("countryname") != null && map.get("country") != null)
                {
            if (row1.getAttribute("countryname").toString().equals(map.get("country").toString()))  {
            countrycode = row1.getAttribute("countrycode").toString();
            }
            
            }}
            PIProfileRow.setAttribute("LocalCountry",map.get("country") == null? " ":countrycode);  
            PIProfileRow.setAttribute("EmiratesId",map.get("emiratesId") == null? " ":map.get("emiratesId").toString()); 
            
            ViewObjectImpl  trainingvo= (ViewObjectImpl)getPITrainingStatusLOVVO1();
            RowSetIterator rs3 = trainingvo.createRowSetIterator(null);
            rs3.reset();
            String trainingcode = null;
            while (rs3.hasNext()) {
            Row row1 = rs3.next();
                if(row1.getAttribute("trainingstatus") != null && map.get("PIStatus") != null )
                {
            if (row1.getAttribute("trainingstatus").toString().equals(map.get("PIStatus").toString()))  {
            trainingcode = row1.getAttribute("trainingcode").toString();
            }
            
            }}
            
            if(map.get("PIStatus") != null)
            PIProfileRow.setAttribute("Trainingstatus",Integer.parseInt(trainingcode));  
            PIProfileRow.setAttribute("PassportNumber",map.get("passportnumber") == null? " ":map.get("passportnumber").toString());  
            if(map.get("dateofIssue") != null)
                
            PIProfileRow.setAttribute("pssptDateofIssue",DOI1);  
            if(map.get("dateofExpiry") != null)
            PIProfileRow.setAttribute("PSSPTDateofExpiry",DOE1);  
            
            ViewObjectImpl  nationalityvo = (ViewObjectImpl)getGennationalityLOVVO1();
            RowSetIterator rs4 = nationalityvo.createRowSetIterator(null);
            rs4.reset();
            String nationalitycode = null;
            while (rs4.hasNext()) {
            Row row1 = rs4.next();
                if(row1.getAttribute("nationalitydesc") != null && map.get("Nationality") != null )
                {
            if (row1.getAttribute("nationalitydesc").toString().equals(map.get("Nationality").toString()))  {
            nationalitycode = row1.getAttribute("nationalityid").toString();
            }
            
            }}
            
            
            PIProfileRow.setAttribute("Nationality",map.get("Nationality") == null? " ":nationalitycode);  
            
            ViewObjectImpl  qualifvo = (ViewObjectImpl)getPIQualificationLOVVO1();
            RowSetIterator rs5 = qualifvo.createRowSetIterator(null);
            rs5.reset();
            String qualificationcode = null;
            while (rs5.hasNext()) {
            Row row1 = rs5.next();
                if(row1.getAttribute("qualificationdetails") != null && map.get("EducationalQualification") != null )
                {
            if (row1.getAttribute("qualificationdetails").toString().equals(map.get("EducationalQualification").toString()))  {
            qualificationcode = row1.getAttribute("qualificationid").toString();
            }
            
            }}
            
            if(map.get("EducationalQualification") != null)
            PIProfileRow.setAttribute("EducationalQualifications",qualificationcode); 
            
            ViewObjectImpl  yenovo = (ViewObjectImpl)getYesNoLOVVO1();
            RowSetIterator rs6 = yenovo.createRowSetIterator(null);
            rs6.reset();
            String yesnocode = null;
            while (rs6.hasNext()) {
            Row row1 = rs6.next();
                if(row1.getAttribute("StatusName") != null && map.get("healthinsurance") != null )
                {
            if (row1.getAttribute("StatusName").toString().equals(map.get("healthinsurance").toString()))  {
            yesnocode = row1.getAttribute("StatusId").toString();
            }
            
            }}
            
            PIProfileRow.setAttribute("HealthInsuranceDetails",map.get("healthinsurance") == null? " ":yesnocode); 
            PIProfileRow.setAttribute("HireDate",map.get("hiredate") == null? " ":HireDate1); 
            PIProfileRow.setAttribute("MedicalExaminationsDetails",map.get("medicalDetails") == null? " ":map.get("medicalDetails").toString()); 
            PIProfileRow.setAttribute("comments",map.get("comments") == null? " ":map.get("comments").toString());
            System.out.println("status");
            System.out.println(map.get("trainingstatus"));
//            if(map.get("trainingstatus") != null)
//            {
//                if(map.get("trainingstatus").toString().equals("0"))
//                    PIProfileRow.setAttribute("IntExtTrainingStatus","I"); 
//                else
//                    
//                PIProfileRow.setAttribute("IntExtTrainingStatus","E");    
//            }
            if(map.get("Internaltraining")!=null) {
                if(map.get("Internaltraining").toString().equals("true"))
                PIProfileRow.setAttribute("IntExtTrainingStatus","I");
                else
                PIProfileRow.setAttribute("IntExtTrainingStatus","E");   
            }
            if(map.get("ExternalTraining")!=null) {
                if(map.get("ExternalTraining").toString().equals("true"))
                PIProfileRow.setAttribute("ExtTrainingStatus","E"); 
                else
                PIProfileRow.setAttribute("ExtTrainingStatus","N");     
            }
            if(map.get("trainingstatus")!=null) {
                if(map.get("trainingstatus").toString().equals("true"))
                PIProfileRow.setAttribute("medicaltestcompletedflag","Y"); 
            }
            
          ViewObjectImpl  groupvo= (ViewObjectImpl)getPIGroupLOVVO1();
          RowSetIterator grprs = groupvo.createRowSetIterator(null);
        grprs.reset();
         String grpid = null;
       while (grprs.hasNext()) {
        Row grprow = grprs.next();
             if(grprow.getAttribute("GroupName") != null)
             {
             if (grprow.getAttribute("GroupName").toString().equals(map.get("Groupname").toString()))  {
         int pigrpid =Integer.parseInt(grprow.getAttribute("GroupId").toString()) ;
            PIProfileRow.setGroupId(pigrpid);
             }
          
         }}
        
//            if(map.get("Groupname")!=null) {
//                String grpid= map.get("Groupname").toString();
//             int groupid=Integer.parseInt(grpid);
//             PIProfileRow.setAttribute("GroupId", groupid);
//            }
//            
           
            
            
            
            PIProfileRow.setCreatedby(map.get("encoder").toString());
            PIProfileRow.setCreateddate(sqlDate);
          
            PIProfileRow.setActiveFlag("Y");
           // PIProfileRow.setGroupId(26);
            PIProfileRow.setExtuserflag("Y");
            PIProfileRow.setLoginPrintID("1");
            PIProfileRow.setSecretqust("Question");
            PIvo.insertRow(PIProfileRow);    
        }

    }
public void deactivatworkpi(String userId){
    //ViewObjectImpl PIProfileVODeac = (ViewObjectImpl)getPImonthlyWorkAssignVO1();
//    PIProfileVODeac.setWhereClause("PI_id='"+userId+"' and Assgn_Date >= getDate()");
//    PIProfileVODeac.executeQuery();
    int c=0;
     ViewObjectImpl vo = (ViewObjectImpl)getPImonthlyWorkAssignVO1();
     vo.setApplyViewCriteriaName("PImonthlyWorkUnAssignVOCriteria1");
     vo.setNamedWhereClauseParam("unassignpiid",userId);
     vo.executeQuery();
    
    RowSetIterator rsi = vo.createRowSetIterator(null);
    rsi.reset();    
    while(rsi.hasNext()){
        Row row = rsi.next();
        row.setAttribute("ActiveFlag","N");
       // row.setAttribute("", arg1);
        System.out.println(c);
        c++;
    }
    
    
    //PIAllocToSpvsrGrpUVO
    
    int r=0;
     ViewObjectImpl PISupVo = (ViewObjectImpl)getPIAllocToSpvsrGrpUVO1();
     PISupVo.setWhereClause(" PI_id = '"+userId+"'");
     PISupVo.executeQuery();
    
    RowSetIterator PiSupRsi = PISupVo.createRowSetIterator(null);
    PiSupRsi.reset();    
    while(PiSupRsi.hasNext()){
        Row row = PiSupRsi.next();
        row.setAttribute("status","UnAssigned");
        System.out.println(r);
        r++;
    }
    
    
}

    public void SaveSup(String supname,String mang,Date sdate,Date endDate) {
        System.out.println("sdate--------"+sdate);
        String states="Assigned";
        int count=0;
      java.sql.Timestamp sqlDate = new java.sql.Timestamp(new java.util.Date().getTime());
        java.sql.Date cur=new java.sql.Date(sqlDate.getTime());
        java.sql.Date start = new java.sql.Date(sdate.getTime());
        java.sql.Date end = new java.sql.Date(endDate.getTime());
        ViewObjectImpl supvo = (ViewObjectImpl)getSupervisorAssignmentVO1();
        Row row = supvo.createRow();
        row.setAttribute("AssgnStartDate", start);
        row.setAttribute("AssgnEndDate", end);
        row.setAttribute("Assignedby", mang);
        row.setAttribute("Supid", supname);
        row.setAttribute("Status", states);
        row.setAttribute("CreatedDate", cur);
        supvo.insertRow(row);
        this.getDBTransaction().commit();
//        supass.setAssgnStartDate(start);
//        supass.setAssgnEndDate(end);
//        supass.setAssignedby(mang);
//        supass.setSupid(supname);
//        supass.setStatus(states);
//        supass.setCreatedDate(cur);
//        supvo.insertRow(supass);
       
       // this.doCommit();
        
         

//        ViewObject supalloc = (ViewObject)getSupervisorSectorVO1();
//        for(Object s : selectedsector) {
//        Row newRow = supalloc.createRow();
//        newRow.setAttribute("Allocid", Integer.parseInt(allocId));
//        newRow.setAttribute("shift", shift);
//        newRow.setAttribute("sector", s.toString());
//        supalloc.insertRow(newRow);
//          ++count;
//        }
//        
         getSupervisorSectorAssignmentVO1().executeQuery();
        
      }
    public String SaveAllocDtls(ArrayList selectedsector){
        int alloc;
        //System.out.println("------------" + shift);
        getSupervisorAssignmentVO1().executeQuery();
        ViewObjectImpl supass1 = (ViewObjectImpl)getSupervisorAssignmentVO1();
        RowSetIterator rs = supass1.createRowSetIterator(null);
        rs.reset();
        String allocationID = null;
        while (rs.hasNext()) {
        Row row1 = rs.next();
        //            System.out.println(row1.getAttribute("Supid"));
        //            System.out.println(row1.getAttribute("Allocid1"));
        if (row1.getAttribute("Allocid1") != null) {
        allocationID = row1.getAttribute("Allocid1").toString();
        }
        System.out.println("allocationID ::" + allocationID);
        }
        int allocid = Integer.parseInt(allocationID);
        ViewObjectImpl supalloc = (ViewObjectImpl)getSupervisorSectorVO1();
        for (Object s : selectedsector) {
            Row newRow = supalloc.createRow();
            newRow.setAttribute("Allocid", allocid);
            newRow.setAttribute("Sector", s.toString());
            //newRow.setAttribute("Shift", shift);
            supalloc.insertRow(newRow);
            this.getDBTransaction().commit();

        }
       // int result = allocid + 1;
        getSupervisorSectorAssignmentVO1().executeQuery();
        getsupervisorlistVO1().executeQuery();
        getsectorlistVo1().executeQuery();
        return String.valueOf(allocid);
    }
    
    public void SavePiobservation(String pi,Date cdate,String obtype,String pibcom,String employ,String employcom,String cid,String cidcom1,String s,String training,String trainingcom,String leavepay,String leavepaycom,
                        String emplett,String occ,String hous,String emb,String expix)
    {
        
        ViewObjectImpl supvo = (ViewObjectImpl)getPiobservationsVO1();
        Row row = supvo.createRow();
    row.setAttribute("PIID",pi); 
          row.setAttribute("Date",cdate);
          row.setAttribute("ObservationType",obtype);
          row.setAttribute("ObservationNotes",pibcom);
          row.setAttribute("empcontract",employ.equals("0")?'Y':'N'); 
       row.setAttribute("empcontractcomm",employcom);  
         row.setAttribute("CIDClearance", cid.equals("0")?'Y':'N');
                row.setAttribute("CIDClearancecomm",cidcom1);
                row.setAttribute("Supid",s );    
                row.setAttribute("TrainingNeeds",training.equals("0")?'Y':'N');  
                row.setAttribute("TrainingNeedscomm",trainingcom);  
                row.setAttribute("LeavePayreceived",leavepay.equals("0")?'Y':'N');
                row.setAttribute("LeavePayreceivedcomm", leavepaycom);  
                row.setAttribute("empletter",emplett.equals("0")?'Y':'N');
                row.setAttribute("Occupationalinsurance",occ.equals("0")?'Y':'N');
                row.setAttribute("Housingallowance",hous.equals("0")?'Y':'N');
                row.setAttribute("Embezzlement",emb.equals("0")?'Y':'N');
                row.setAttribute("ExcusesPI",expix.equals("0")?'Y':'N');   
                supvo.setCurrentRow(row);
       
        
        
              
    }
   
      
    public String saveUnAssignPreValues(String newAllocid,String oldAllocid,String mang,String supname,Date sdate,Date endDate){
        System.out.println("newAllocid :::"+newAllocid);
        System.out.println("oldAllocid :::"+oldAllocid);
        System.out.println("sdate ::"+sdate);
        System.out.println("endDate ::"+endDate);
        String msg = "failue";
        ViewObjectImpl supass1 = (ViewObjectImpl)getPIAllocToSpvsrGrpUVO2();
        ViewObjectImpl supass2 = (ViewObjectImpl)getPIAllocToSpvsrGrpUVO2();
        RowSetIterator rs = supass1.createRowSetIterator(null);
     //   Row row[]= rs.getFilteredRows("Allocid", oldAllocid );
       // System.out.println(row.length);
        rs.reset();
        java.sql.Date start = new java.sql.Date(sdate.getTime());
        java.sql.Date end = new java.sql.Date(endDate.getTime());
                while (rs.hasNext()) {
                    Row row1 = rs.next();
                   
                    String allocID = row1.getAttribute("Allocid").toString();
                   
                    if(allocID.equals(oldAllocid)){
                        if(row1.getAttribute("status").toString().equalsIgnoreCase("Assigned")){
                        System.out.println("allocID ::"+allocID);
                        System.out.println("PIid ::"+row1.getAttribute("PIid")); 
                        
                        row1.setAttribute("status", "UnAssigned");
                        row1.setAttribute("AssgnEndDate", new java.sql.Date(System.currentTimeMillis()));
                        
                        this.getDBTransaction().commit();
                        
                        Row newRow = supass2.createRow();
                        newRow.setAttribute("Allocid", newAllocid);
                        newRow.setAttribute("AssgnEndDate", end);
                        newRow.setAttribute("AssgnStDate", start);
                        newRow.setAttribute("AssignedTo", supname);
                        newRow.setAttribute("Createdby", mang);
                        newRow.setAttribute("CreatedDate", new java.sql.Date(System.currentTimeMillis()));
                        newRow.setAttribute("PIid", row1.getAttribute("PIid"));
                        newRow.setAttribute("status", "Assigned");
                        supass2.insertRow(newRow);
                        
                        msg = "success";
                        }
                    }
                }
        //supass1.executeQuery();
        this.getDBTransaction().commit();
        //getSupervisorAssignmentVO1().executeQuery();
        ViewObjectImpl supassUnAssign = (ViewObjectImpl)getSupervisorAssignmentVO1();
        RowSetIterator rsUnAssign = supassUnAssign.createRowSetIterator(null);
        rsUnAssign.reset();
        
                while (rsUnAssign.hasNext()) {
                    Row rowSupervisorAssign = rsUnAssign.next();
                    System.out.println("Supid ::"+rowSupervisorAssign.getAttribute("Supid"));
                    System.out.println("AllocID ::"+rowSupervisorAssign.getAttribute("Allocid1"));
                    String allocID = rowSupervisorAssign.getAttribute("Allocid1").toString();
                    System.out.println("allocID ::"+allocID);
                    System.out.println("Supid ::"+rowSupervisorAssign.getAttribute("Supid"));
                    if(allocID.equals(oldAllocid)){
                        rowSupervisorAssign.setAttribute("Status", "UnAssigned");
                        rowSupervisorAssign.setAttribute("AssgnEndDate", new java.sql.Date(System.currentTimeMillis()));
                        this.getDBTransaction().commit();
                        msg = "success";
                    }
                }
        ViewObjectImpl piunassign=(ViewObjectImpl) getPImonthlyWorkAssignVO1();
        piunassign.setApplyViewCriteriaName("PImonthlyAmmendmentWorkUnAssignVOCriteria1");
        piunassign.setNamedWhereClauseParam("allocid",oldAllocid);
        piunassign.setNamedWhereClauseParam("amenddate", start);
        piunassign.executeQuery();
        System.out.println(piunassign.getRowCount());
        RowSetIterator rsi=piunassign.createRowSetIterator(null);
        while(rsi.hasNext()){
            Row row=rsi.next();
            row.setAttribute("ActiveFlag","N");
        }
        this.getDBTransaction().commit();
        supassUnAssign.executeQuery();
        getSupervisorSectorAssignmentVO1().executeQuery();
        getsupervisorlistVO1().executeQuery();
        getsectorlistVo1().executeQuery();
        getPIAllocToSpvsrGrpUVO2().executeQuery();
        return msg;
    }
   

    /*vijay's code */
    public String HHSAssign(String piId,String stDate,String shift){
            ViewObjectImpl vo = (ViewObjectImpl)getHHSAssignValidateVO1();
            String str = "Failue";

            vo.setApplyViewCriteriaName("HHSAssignValidateVOCriteria");
            vo.setNamedWhereClauseParam("PIId",piId);
            vo.setNamedWhereClauseParam("PAssgndate", stDate);
            vo.setNamedWhereClauseParam("pShift",shift);



            vo.executeQuery();
            int rowcount = vo.getRowCount();
           
                
    
          RowSetIterator rs = (RowSetIterator)vo.createRowSetIterator(null);
          rs.reset();
            System.out.println(rs.getRowCount());
          while(rs.hasNext()) {
              Row row = rs.next();
              
              if(row!=null){
                 System.out.println(row.getAttribute("PIid").toString());
                          str = "Success";
                      }
          }
           return str; 
    
    }
    
    public String validatePIID(String date,String PIID){
        String str = "Failure";
        ViewObjectImpl vo = (ViewObjectImpl)getHHCreassignvalidateVO1();
        vo.setApplyViewCriteriaName("HHCreassignvalidateVOCriteria");
        vo.setNamedWhereClauseParam("piid",PIID);
        vo.setNamedWhereClauseParam("HHCDate",date);
        vo.executeQuery();
        RowSetIterator rs = (RowSetIterator)vo.createRowSetIterator(null);
        rs.reset();
          System.out.println(rs.getRowCount());
        while(rs.hasNext()) {
            Row row = rs.next();
            
            if(row!=null){
               
                        str = "Success";
                    }
        }
         return str; 

        
        //HHCreassignvalidateVOCriteria
    }
    public ViewObjectImpl getHHCAssignVO1() {
        return (ViewObjectImpl)findViewObject("HHCAssignVO1");
    }

    public String CheckUnique(String checkPIID,Date stDate,String assignedstatuss,String status,String HhcId,String Shift,String PrinterId) {
        //comment
        String result = "success";
        try{ 
        System.out.println("stDate"+stDate);
        ViewObjectImpl hhcassignvo = (ViewObjectImpl)getHHCAssignVO1();
//                    ViewCriteria vc = hhcassignvo.getViewCriteria("HHCAssignVOCriteria");
//                    hhcassignvo.resetCriteria(vc);
                    hhcassignvo.setWhereClause(null);
                    hhcassignvo.executeQuery();
        int rowcount = hhcassignvo.getRowCount();
            System.out.println(rowcount);
        RowSetIterator rs = hhcassignvo.createRowSetIterator(null);
       // Timestamp sqlDate = new java.sql.Timestamp(new java.util.Date().getTime());
            String PIIDfromDB = "";
            String statusfromDB = "" ;
            String AssignedStatusfromDB = "";
            String HHCIDfromDB = "";
            String PrinterIDfromDB="";
            Date issueddatefromDB = null;
            String issueddatefromDBValue= "";
            String stDateValue = "";
            String ShiftDB = "";
        
        
        rs.reset();
        //        java.sql.Date start = new java.sql.Date(sdate.getTime());
        //        java.sql.Date end = new java.sql.Date(endDate.getTime());
                while (rs.hasNext()) {
                    Row row1 = rs.next();
                   
                    System.out.println(row1.getAttribute("PIID"));
                    if(row1.getAttribute("PIID") != null)
                     PIIDfromDB = row1.getAttribute("PIID").toString();
                    if( row1.getAttribute("Status") != null)
                     statusfromDB = row1.getAttribute("Status").toString();
                    if(row1.getAttribute("AssignedStatus") != null)
                     AssignedStatusfromDB = row1.getAttribute("AssignedStatus").toString();
                    if(row1.getAttribute("HHSNo") != null)
                     HHCIDfromDB = row1.getAttribute("HHSNo").toString();
                    if(row1.getAttribute("PrinterSNo")!=null)
                        PrinterIDfromDB=row1.getAttribute("PrinterSNo").toString(); 
                    if(row1.getAttribute("IssuedDate1") != null)
                     issueddatefromDB = (Date)row1.getAttribute("IssuedDate1");
                    if(row1.getAttribute("Shift") != null)
                        ShiftDB = (String)row1.getAttribute("Shift").toString();
                   if(issueddatefromDB != null)
                     issueddatefromDBValue = issueddatefromDB.toString().replaceAll("-", "");
                     stDateValue = stDate.toString().replaceAll("-", "");
                    System.out.println("issueddatefromDB"+issueddatefromDB);
                    System.out.println(HHCIDfromDB.trim().equalsIgnoreCase(HhcId.trim()));
//                        System.out.println(HhcId.trim());
//                        System.out.println(HhcId);
//                            String hhc[] = HhcId.split(" ");
//                    System.out.println(hhc.length);
//                            for(int s=0;s<hhc.length;s++){
//                            HhcId = hhc[s].concat(hhc[s]);
//                            
//                            }
                  System.out.println(HHCIDfromDB.replaceAll(" ","").equalsIgnoreCase(HhcId.replaceAll(" ","")));
                          
                        if(HHCIDfromDB.replaceAll(" ","").equalsIgnoreCase(HhcId.replaceAll(" ",""))  && statusfromDB.equals(status) && AssignedStatusfromDB.equals(assignedstatuss) ){
                            result = "failureHHCID"; 
                        return result;
                            }
                        if(PrinterIDfromDB.replaceAll(" ","").equalsIgnoreCase(PrinterId.replaceAll(" ",""))  && statusfromDB.equals(status) && AssignedStatusfromDB.equals(assignedstatuss) ){
                            result = "failurePrinterId"; 
                        return result;
                            }
                   
                    if(checkPIID.equalsIgnoreCase(PIIDfromDB) && statusfromDB.equals(status) && AssignedStatusfromDB.equals(assignedstatuss) ){
                        result = "failurePIID";
                    return result;
                    }
                       
                      
                    }
                    return result;
                }
  
            
        catch(Exception e){
            e.printStackTrace(); 
        }
        return result;
    }
    public String CheckUniqueForReassign(String checkPIID,Date stDate,String assignedstatuss,String status,String HhcId,String Shift) {
        //comment
        String result = "success";
        try{ 
        System.out.println("stDate"+stDate);
        ViewObjectImpl hhcassignvo = (ViewObjectImpl)getHHCAssignVO1();
//                    ViewCriteria vc = hhcassignvo.getViewCriteria("HHCAssignVOCriteria");
//                    hhcassignvo.resetCriteria(vc);
//                    ViewCriteria vc = hhcassignvo.getViewCriteria("HHCAssignVOCriteria");
//            if(vc !=null){
//                    hhcassignvo.removeViewCriteria("HHCAssignVOCriteria");
//                    vc.resetCriteria();
//            }
                    hhcassignvo.setWhereClause("Status='Y' and Assigned_Status='Issued'");
                    hhcassignvo.executeQuery();
                    
                    System.out.println(hhcassignvo.getEstimatedRowCount());
        int rowcount = hhcassignvo.getRowCount();
            System.out.println(rowcount);
        RowSetIterator rs = hhcassignvo.createRowSetIterator(null);
       // Timestamp sqlDate = new java.sql.Timestamp(new java.util.Date().getTime());
            String PIIDfromDB = "";
            String statusfromDB = "" ;
            String AssignedStatusfromDB = "";
            String HHCIDfromDB = "";
            Date issueddatefromDB = null;
            String issueddatefromDBValue= "";
            String stDateValue = "";
                    String ShiftDB = "";
        
        
        rs.reset();
        //        java.sql.Date start = new java.sql.Date(sdate.getTime());
        //        java.sql.Date end = new java.sql.Date(endDate.getTime());
                while (rs.hasNext()) {
                    Row row1 = rs.next();
                   
                    System.out.println(row1.getAttribute("PIID"));
                    if(row1.getAttribute("PIID") != null)
                     PIIDfromDB = row1.getAttribute("PIID").toString();
                    if( row1.getAttribute("Status") != null)
                     statusfromDB = row1.getAttribute("Status").toString();
                    if(row1.getAttribute("AssignedStatus") != null)
                     AssignedStatusfromDB = row1.getAttribute("AssignedStatus").toString();
                    if(row1.getAttribute("HHCID") != null)
                     HHCIDfromDB = row1.getAttribute("HHCID").toString();
                    if(row1.getAttribute("IssuedDate1") != null)
                     issueddatefromDB = (Date)row1.getAttribute("IssuedDate1");
                    if(row1.getAttribute("Shift") != null)
                            ShiftDB = (String)row1.getAttribute("Shift").toString();
                   if(issueddatefromDB != null)
                     issueddatefromDBValue = issueddatefromDB.toString().replaceAll("-", "");
                     stDateValue = stDate.toString().replaceAll("-", "");
                    System.out.println("issueddatefromDB"+issueddatefromDB);
                        if(HHCIDfromDB.replaceAll(" ","").equalsIgnoreCase(HhcId.replaceAll(" ",""))  && statusfromDB.equals(status) && AssignedStatusfromDB.equals(assignedstatuss) ){
                            result = "failureHHCID"; 
                            hhcassignvo.setWhereClause(null);
                            hhcassignvo.executeQuery();
                            System.out.println(hhcassignvo.getRowCount());
//                    ViewCriteria vc1 = hhcassignvo.getViewCriteria("HHCAssignVOCriteria");
//                    if(vc1!=null){
//                    hhcassignvo.applyViewCriteria(vc1);
//                    hhcassignvo.executeQuery();
//                    }
//                    System.out.println(hhcassignvo.getEstimatedRowCount());
                        return result;
                        }
                    }
                    hhcassignvo.setWhereClause(null);
                    hhcassignvo.executeQuery();
                    System.out.println(hhcassignvo.getRowCount());
//                    ViewCriteria vc1 = hhcassignvo.getViewCriteria("HHCAssignVOCriteria");
//                    if(vc1!=null){
//                    hhcassignvo.applyViewCriteria(vc1);
//                    hhcassignvo.executeQuery();
//                    }
//            System.out.println(hhcassignvo.getRowCount());
                    return result;
                }
        catch(Exception e){
            e.printStackTrace(); 
        }
        return result;
    }
    public String HHCAssign(String date,String PIID){
        String str = "Failure";
        ViewObjectImpl vo = (ViewObjectImpl)getHHCreassignvalidateVO1();
        vo.setApplyViewCriteriaName("HHCreassignvalidateVOCriteria");
        vo.setNamedWhereClauseParam("PIID",PIID);
        vo.setNamedWhereClauseParam("HHCDate",date);
        vo.executeQuery();
        RowSetIterator rs = (RowSetIterator)vo.createRowSetIterator(null);
        rs.reset();
          System.out.println(rs.getRowCount());
        while(rs.hasNext()) {
            Row row = rs.next();
            
            if(row!=null){
               
                        str = "Success";
                    }
        }
         return str; 

        
        //HHCreassignvalidateVOCriteria
    }
    public void ReplacementHHC(String PIID,String ReplacementId,Date stDate, String comments,String oldHHCID) {
       
        /*ViewObjectImpl vo = (ViewObjectImpl)getHHCAssignVO1();
        HHCAssignVORowImpl row = (HHCAssignVORowImpl)vo.getCurrentRow();*/
        //vo.setWhereClause(null);
       // vo.setWhereClause("PI_ID");
       //vo.setNamedWhereClauseParam("PI_ID",PIID);
       //vo.setWhereClause(PIID);
        //vo.executeQuery();
        
        Timestamp timeDate = new java.sql.Timestamp(new java.util.Date().getTime());
        java.sql.Date sqlDate = new java.sql.Date(new Date(System.currentTimeMillis()).getTime());
        String status = "Y";
        String AssignedStatus = "Issued";
        ViewObjectImpl HHCvo = (ViewObjectImpl)getHHCNewRe1();
        HHCvo.setWhereClause("PI_ID = '"+PIID+"' and HHC_ID = '"+oldHHCID+"' and Assigned_Status = '"+AssignedStatus+"' and Status = '"+status+"' and convert(varchar(10),Issued_Date,120) = convert(varchar(10),'"+timeDate+"',120)");
        HHCvo.executeQuery();
        System.out.println(ReplacementId);
        String coordinator = "";
        String LocationID = "";
     
        int shift = 0;
      
          if(HHCvo != null)
          {
                Row row = HHCvo.getCurrentRow();
                if(row != null)
                {
                if(row.getAttribute("HHCID").equals(oldHHCID)){
                    row.setAttribute("Status","N");
                    if(row.getAttribute("CoOrdinator")!=null){
                    coordinator = row.getAttribute("CoOrdinator").toString();
                    }
                    if(row.getAttribute("Locationid")!=null){
                    LocationID = row.getAttribute("Locationid").toString();
                        if(row.getAttribute("Shift") !=null) {
                                            shift = Integer.parseInt(row.getAttribute("Shift").toString());
                                       }
          //      HHCNewReRowImpl row = (HHCNewReRowImpl)vo.getCurrentRow();
     //   Timestamp sqlDate = new java.sql.Timestamp(new java.util.Date().getTime());
       
     //   row.setAttribute("AssignedStatus","N");
        
     //   Object coordinato = row.getAttribute("CoOrdinator");
     //   String coordinator = null;
     //   if(row.getAttribute("CoOrdinator") != null)
     //     coordinator = coordinato.toString();
      //    HHCNewReRowImpl NewRow =(HHCNewReRowImpl) vo.createRow();
                    }
                }
                }
//            else if(vo.getRowCount()>1){
//                while(vo.hasNext()){
//                Row row = vo.next();
//            if(row.getAttribute("HHCID").equals(oldHHCID)){
//                row.setAttribute("Status","N");
//                if(row.getAttribute("CoOrdinator")!=null){
//                coordinator = row.getAttribute("CoOrdinator").toString();
//                }
//                if(row.getAttribute("Locationid")!=null){
//                LocationID = row.getAttribute("Locationid").toString();
//                }
//                if(row.getAttribute("Shift") !=null) {
//                    shift = Integer.parseInt(row.getAttribute("Shift").toString());
//                }
//            }
//            }
//        }
     
      
        System.out.println(sqlDate);
         HHCNewReRowImpl NewRow =(HHCNewReRowImpl) HHCvo.createRow();
         NewRow.setAttribute("PIID",PIID);
         NewRow.setAttribute("HHCID",ReplacementId);
         NewRow.setAttribute("IssuedDate1",timeDate);
         NewRow.setAttribute("IssuedDate2",timeDate);
         NewRow.setAttribute("CoOrdinator",coordinator);
         NewRow.setAttribute("Comments",comments);
         NewRow.setAttribute("AssignedStatus","Issued");
         NewRow.setAttribute("Status","Y");
        NewRow.setAttribute("Locationid",LocationID);
         NewRow.setAttribute("Shift", shift);
         HHCvo.insertRow(NewRow);
          }
     
    }
    public void displayHHCdtls(String shift,String location,java.sql.Date currentDate){
        try{
            ViewObjectImpl assignVO = (ViewObjectImpl)this.getHHCAssignVO1();
//            ViewCriteria vc = assignVO.getViewCriteria("HHCAssignVOCriteria");
//            assignVO.resetCriteria(vc);
            assignVO.setWhereClause(null);
            assignVO.executeQuery();
            System.out.println(assignVO.getRowCount());
           java.sql.Date sqlDate = new java.sql.Date(new Date(System.currentTimeMillis()).getTime());
            System.out.println(sqlDate);
            Timestamp timeDate = new java.sql.Timestamp(new java.util.Date().getTime());
//                    assignVO.setApplyViewCriteriaName("HHCAssignVOCriteria");
//                    assignVO.setNamedWhereClauseParam("shift", shift);
//                    assignVO.setNamedWhereClauseParam("location", location);
//                   assignVO.setNamedWhereClauseParam("currentDate", timeDate);
//                    assignVO.executeQuery();
//            convert(varchar(10),Issued_Date,120) = convert(varchar(10),getDate(),120)
//            convert(varchar(10),currentDate,120) = convert(varchar(10),timeDate,120) 
            assignVO.setWhereClause("convert(varchar(10),Issued_Date,120) = convert(varchar(10),'"+timeDate+"',120) and Locationid = '"+location+"' and Status = 'Y' and Assigned_Status = 'Issued' and Shift = '"+shift+"'");
           System.out.println(assignVO.getQuery());
            assignVO.executeQuery();
            System.out.println(assignVO.getQuery());
            System.out.println(assignVO.getEstimatedRowCount());
            
        }catch(Exception e){
            e.printStackTrace();
        }
        
    }
    /**
     * method for create insert in HHC Assignment
     * 
     */
    public void createHHCAssignRow(String checkPIID,
                   Date stDate, String masterHHId,
                       String  HHCID,
                       String shift,
                       int location,
                       String comments, String PriterIssuedStatusCode, String PrinterId)
    {
        
        int shiftint =Integer.parseInt(shift);
//        FacesContext facesContext = FacesContext.getCurrentInstance();
//        ExternalContext externalContext = facesContext.getExternalContext();
//        HttpSession httpSession = (HttpSession) externalContext.getSession(false);
//        String userName = httpSession.getAttribute("loggedinUserid").toString();
        ADFContext adfctx = ADFContext.getCurrent();
        String userName=adfctx.getSessionScope().get("loggedinUserid").toString();
        Date currentDate = new Date(System.currentTimeMillis());
        try{
        SimpleDateFormat stf = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss");
        currentDate = stf.parse(stf.format(currentDate));
        System.out.println("currentDate : "+currentDate);
        java.sql.Date sqlDt = new java.sql.Date(currentDate.getTime());
            System.out.println("sqlDt : "+sqlDt);
        Timestamp sqlDate = new java.sql.Timestamp(new java.util.Date().getTime());
            System.out.println(sqlDate);
           
        String shiftStr = shiftint+"";
        String locationStr = location+""; 
        displayHHCdtls(shiftStr,locationStr,sqlDt);
            
            
        ViewObjectImpl vo = (ViewObjectImpl)getHHCAssignVO1();
        HHCAssignVORowImpl createrow = (HHCAssignVORowImpl)vo.createRow();
        //createrow.setAssignedStatus("Y");
       // createrow.setDate(currentDate);
        createrow.setCoOrdinator(userName);
        createrow.setPIID(checkPIID);
        createrow.setIssuedDate1(sqlDate);
        createrow.setIssuedDate2(sqlDate);
        createrow.setHHCID(masterHHId);
        createrow.setHHSNo(HHCID);
        createrow.setLocationid(location);
        createrow.setComments(comments);
        createrow.setAssignedStatus("Issued");
        createrow.setStatus("Y");
        createrow.setShift(shiftint);
        createrow.setCreatedBy(userName);
        createrow.setCreateddate(sqlDate);
        createrow.setPrinterIssuedDate(sqlDate);
        createrow.setPrinterIssuedstatusCode(PriterIssuedStatusCode);
        createrow.setPrinterSNo(PrinterId);
        vo.insertRow(createrow);
       // vo.executeQuery();
        
       
       
     
        
        
    } catch (ParseException e) {
        }
    }

    public String CheckPIShift(String checkPIID,String shiftentered,Date stDate)
        {
            String PIShiftvalidate = "failure";
        try{
            
            ViewObjectImpl HHCWorkvo = (ViewObjectImpl)getHHCAssignWorkCheckVO1();
            HHCWorkvo.setApplyViewCriteriaName("HHCAssignWorkCheckVOCriteria");
            HHCWorkvo.setNamedWhereClauseParam("piid", checkPIID);
            System.out.println("StDate---"+stDate);
            java.sql.Date date = new java.sql.Date(stDate.getTime());
            HHCWorkvo.setNamedWhereClauseParam("assgndate", stDate);
            System.out.println(HHCWorkvo.getQuery());
            HHCWorkvo.executeQuery();
           
            System.out.println("HHCrowcount  "+HHCWorkvo.getRowCount()); 
            if(HHCWorkvo.getRowCount()==0)
                {
                    PIShiftvalidate= "failurePIID";
                    return PIShiftvalidate;
                }
//            HHCWorkvo.setWhereClause(null);
//            String ActiveFlag = "Y";
//            java.sql.Date sqlStDate = new java.sql.Date(stDate.getTime());  
//            //CONVERT(VARCHAR(50), @today, 121)
//            // convert(varchar(10),Assgn_Date,120) = '"+stDate+"'
//            System.out.println("sqlStDate : "+sqlStDate);
//            HHCWorkvo.setWhereClause("PI_id='"+checkPIID+"' and Assgn_Date='"+sqlStDate+"' and Active_Flag='"+ActiveFlag+"'"); 
//            
//            System.out.println("checkPIID"+checkPIID);
//                        System.out.println("HHCWorkvo"+HHCWorkvo.getQuery());
//                     System.out.println("HHCrowcount"+HHCWorkvo.getRowCount()); 
//            HHCWorkvo.executeQuery();

            Row  HHCWorkRow = (Row)HHCWorkvo.first();
            if(HHCWorkRow != null){
                           Integer Shiftval =(Integer) HHCWorkRow.getAttribute("Shift");
                           Integer pistatus =(Integer) HHCWorkRow.getAttribute("PiAvailabitystatusID");
                           if(Shiftval!=null){
                               if(pistatus==1){
                                   PIShiftvalidate = "success";  
                               }
                               else{
                                   PIShiftvalidate= "failurePIID";
                               }
                           }
                           else{
                               PIShiftvalidate= "failurePIID"; 
                           }
                        }
           /* commented by karim 
            * if(HHCWorkRow != null)
            {
            String Shift1Flag = HHCWorkRow.getAttribute("Shift1Flag").toString();
            String Shift2Flag = HHCWorkRow.getAttribute("Shift2Flag").toString();
            String Shift3Flag = HHCWorkRow.getAttribute("Shift3Flag").toString();
            JUCtrlListBinding listBinding1 = (JUCtrlListBinding)BindingContext.getCurrent().getCurrentBindingsEntry().getControlBinding("shiftlistVO1");
              String shift=listBinding1.getSelectedValue().toString();
              int ShiftInt = Integer.parseInt(shift);
            if(ShiftInt == 1)
            {
               if("Y".equals(Shift1Flag) )
                   PIShiftvalidate = "success";
            }
            else if(ShiftInt == 2) 
            {
                if("Y".equals(Shift2Flag))
                    PIShiftvalidate = "success";
            }
            else if(ShiftInt == 3) 
            {
                if("Y".equals(Shift3Flag) )
                    PIShiftvalidate = "success";
            }
           System.out.println("shift"+shift);
            System.out.println("shiftentered"+shiftentered);
        } */
            return PIShiftvalidate;
        }catch(Exception e){
            e.printStackTrace();
        }
            return PIShiftvalidate;  
        }
    
    public String checkHHCValid(String checkPIID,Date stDate,String HhcId,String PrinterId) 
    {
        String HHCValid = "failure";
        String status = "Y";
        String Assigned_status = "Issued";
        String HHCID = null;
       // ViewObjectImpl HHCAssignVO = (ViewObjectImpl)getHHCAssignVO1();
       ViewObjectImpl hhcassignvo = (ViewObjectImpl)getHHCAssignVO2();
       hhcassignvo.setWhereClause("Status='Y' and Assigned_Status='Issued'");
        System.out.println("recieve checking queryis ::"+hhcassignvo.getQuery());
        hhcassignvo.executeQuery();
          int count;
        count = hhcassignvo.getRowCount();
        System.out.println("rowu count is:::"+count);
        //RowSetIterator rs = hhcassignvo.createRowSetIterator(null); HHCAssignVOCriteria
        System.out.println("stDate"+stDate);
       
//        ViewCriteria vc = hhcassignvo.getViewCriteria("HHCAssignVOCriteria");
//        hhcassignvo.resetCriteria(vc);
//        hhcassignvo.setWhereClause(null);
//        hhcassignvo.executeQuery();
        
        RowSetIterator rs = hhcassignvo.createRowSetIterator(null);
        Timestamp sqlDate = new java.sql.Timestamp(new java.util.Date().getTime());
        String PIIDfromDB = null;
        String PrinterIdfromDB =null;
        String statusfromDB = null;
        String AssignedStatusfromDB = null;
        String HHCIDfromDB = null;
        Date issueddatefromDB = null;
        String issueddatefromDBValue = null;
        String stDateValue = null;
        
        //rs.reset();
//        java.sql.Date start = new java.sql.Date(sdate.getTime());
//        java.sql.Date end = new java.sql.Date(endDate.getTime());
                while (rs.hasNext()) {
                    Row row1 = rs.next();
                    System.out.println("row1.getAttribute(\"PIID\")"+row1.getAttribute("PIID"));
                    if(row1.getAttribute("PIID") != null)
                     PIIDfromDB = row1.getAttribute("PIID").toString();
                    if(row1.getAttribute("Status") != null)
                     statusfromDB = row1.getAttribute("Status").toString();
                    if(row1.getAttribute("AssignedStatus") != null)
                     AssignedStatusfromDB = row1.getAttribute("AssignedStatus").toString();
                    if(row1.getAttribute("HHSNo") != null)
                     HHCIDfromDB = row1.getAttribute("HHSNo").toString();
                    if(row1.getAttribute("PrinterSNo") != null)
                     PrinterIdfromDB = row1.getAttribute("PrinterSNo").toString();
                    
                    if(row1.getAttribute("IssuedDate1") != null)
                     issueddatefromDB = (Date)row1.getAttribute("IssuedDate1");
                    if(issueddatefromDB != null)
                     issueddatefromDBValue = issueddatefromDB.toString().substring(0, 10).replaceAll("-", "");
                     
                    if(stDate != null)
                     stDateValue = stDate.toString().replaceAll("-", "");
                    System.out.println("issueddatefromDB ::::"+issueddatefromDB);
                    System.out.println("issueddatefromDBValue"+issueddatefromDBValue);
                   
                   // if(checkPIID.equals(PIIDfromDB) && statusfromDB.equals(status) && AssignedStatusfromDB.equals(Assigned_status) && HHCIDfromDB.equals(HhcId) && issueddatefromDBValue.equals(stDateValue)&& PrinterId.equals(PrinterIdfromDB)){
                        if(checkPIID.equalsIgnoreCase(PIIDfromDB) && statusfromDB.equals(status) && AssignedStatusfromDB.equals(Assigned_status) && HHCIDfromDB.equalsIgnoreCase(HhcId)){
                            if(PrinterId.equalsIgnoreCase(PrinterIdfromDB)){
                                HHCValid = "success"; 
                                return HHCValid;
                            }
                            else{
                                HHCValid = "Printerfailure";
                                return HHCValid;
                            }
                        }
                       
                    if(checkPIID.equalsIgnoreCase(PIIDfromDB) && statusfromDB.equals(status) && AssignedStatusfromDB.equals(Assigned_status) && PrinterId.equalsIgnoreCase(PrinterIdfromDB) ){
                        if( HHCIDfromDB.equalsIgnoreCase(HhcId)){
                            HHCValid = "success"; 
                            return HHCValid;
                        }
                        else{
                            HHCValid = "HHCfailure"; 
                            return HHCValid;
                        }
                    }
                   
                        
                    
                        
//                        row1.setAttribute("AssignedStatus", "Received");
//                        row1.setAttribute("Status", "Y");
//                        row1.setAttribute("RecievedDate",stDate );
                        
                       // HHCValid = "success";
        
                    //}
                    
                }

        return HHCValid; 
    }
    
/**
     * Method for PI Training Activity
     */
     public String CreateTrainingRow(String PINO,String coursename,String coursedesc,Date  startdate,Date enddate,String result,String userName) {
        boolean rowExist = true;
        String resultValue = "failure";
        ViewObjectImpl TrainingVO = (ViewObjectImpl)getPITrainingActivityUVO1();
        RowSetIterator rsi = TrainingVO.createRowSetIterator(null);
        while(rsi.hasNext()){
            Row row = rsi.next();
            if(PINO.equalsIgnoreCase(row.getAttribute("PINumber").toString()) && coursename.equalsIgnoreCase(row.getAttribute("Coursename").toString())){
                rowExist = false;
                break;
            }
        }
        if(rowExist){
        PITrainingActivityUVORowImpl createrow = (PITrainingActivityUVORowImpl)TrainingVO.createRow();
        createrow.setAttribute("CourseDesc", coursedesc);
        createrow.setAttribute("Coursename", coursename);
        createrow.setAttribute("EndDate", new java.sql.Date(enddate.getTime()));
        createrow.setAttribute("PINumber", PINO);
        createrow.setAttribute("Result", result);
           
             Timestamp sqlDate = new java.sql.Timestamp(new java.util.Date().getTime());   
        createrow.setAttribute("StartDate", new java.sql.Date(startdate.getTime()));
             createrow.setAttribute("ActiveFlag", "Y");
             createrow.setAttribute("CreatedBy", userName);
              createrow.setAttribute("CreatedDate", sqlDate);
              try{
        TrainingVO.insertRow(createrow);
        this.getDBTransaction().commit(); 
            resultValue = "success";
              }catch(Exception e){
                  e.printStackTrace();
              }
        }
        return resultValue;
    }
    public void GetPINumberLOV(String PIType) 
      {
        try{       
        
        int groupidint = Integer.parseInt(PIType);
          ViewObjectImpl PINumbervo = (ViewObjectImpl)getGenPINumberLOVVO1();
          PINumbervo.setWhereClause("group_id = '"+groupidint+"'");
          PINumbervo.executeQuery();
          ViewObjectImpl GenCousevo = (ViewObjectImpl)getGenCoursesLOVVO1();
          GenCousevo.setWhereClause("group_id = '"+groupidint+"'");
          GenCousevo.executeQuery();
        }catch(Exception e){
            e.printStackTrace();
        }
         
      }
    public Date SetEndDateValue(Date startdate,String coursename,String piType) {
        ViewObjectImpl coursesvo = (ViewObjectImpl)getGenCoursesEndDateVO1();
        coursesvo.setWhereClause(" Active_Flag = 'Y' and Course_name  = '"+coursename+"' and Group_Name = '"+piType+"'");
        coursesvo.executeQuery();
        String Duration = null;
        java.sql.Date startdateappend = null;
      
        GenCoursesEndDateVORowImpl courserow = (GenCoursesEndDateVORowImpl)coursesvo.first();
        if(courserow != null)
        {
            if(courserow.getAttribute("CourseDuration") != null)
         Duration = courserow.getAttribute("CourseDuration").toString();
            int durationint = Integer.parseInt(Duration);
            
         
            SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
            Calendar c = Calendar.getInstance();
            c.setTime(startdate); // Now use today date.
            c.add(Calendar.DATE, durationint-1); // Adding 5 days
            Date output = c.getTime();
            System.out.println(output);
             startdateappend =new java.sql.Date(output.getTime());
            
        
        }

        return startdateappend;
    }





/**
     * Container's getter for PIUserMstUVO1.
     * @return PIUserMstUVO1
     */
    public ViewObjectImpl getPIUserMstUVO1() {
        return (ViewObjectImpl)findViewObject("PIUserMstUVO1");
    }

    /**
     * Container's getter for PIUserMstUVO2.
     * @return PIUserMstUVO2
     */
    public ViewObjectImpl getPIUserMstUVO2() {
        return (ViewObjectImpl)findViewObject("PIUserMstUVO2");
    }

    /**
     * Container's getter for CityLOVVO1.
     * @return CityLOVVO1
     */
    public ViewObjectImpl getCityLOVVO1() {
        return (ViewObjectImpl)findViewObject("CityLOVVO1");
    }

    /**
     * Container's getter for CountryLOVVO1.
     * @return CountryLOVVO1
     */
    public ViewObjectImpl getCountryLOVVO1() {
        return (ViewObjectImpl)findViewObject("CountryLOVVO1");
    }

    /**
     * Container's getter for SupervisorAssignmentVO1.
     * @return SupervisorAssignmentVO1
     */
    public ViewObjectImpl getSupervisorAssignmentVO1() {
        return (ViewObjectImpl)findViewObject("SupervisorAssignmentVO1");
    }

    /**
     * Container's getter for SupervisorSectorVO1.
     * @return SupervisorSectorVO1
     */
    public ViewObjectImpl getSupervisorSectorVO1() {
        return (ViewObjectImpl)findViewObject("SupervisorSectorVO1");
    }

    /**
     * Container's getter for supervisorlistVO1.
     * @return supervisorlistVO1
     */
    public ViewObjectImpl getsupervisorlistVO1() {
        return (ViewObjectImpl)findViewObject("supervisorlistVO1");
    }

    /**
     * Container's getter for sectorlistVo1.
     * @return sectorlistVo1
     */
    public ViewObjectImpl getsectorlistVo1() {
        return (ViewObjectImpl)findViewObject("sectorlistVo1");
    }

    /**
     * Container's getter for shiftlistVO1.
     * @return shiftlistVO1
     */
    public ViewObjectImpl getshiftlistVO1() {
        return (ViewObjectImpl)findViewObject("shiftlistVO1");
    }

    /**
     * Container's getter for resultVO1.
     * @return resultVO1
     */
    public ViewObjectImpl getresultVO1() {
        return (ViewObjectImpl)findViewObject("resultVO1");
    }
    
    public HashMap getSupervisorCurrentSector(String supervisorName){
        System.out.println("------supervisorName------" + supervisorName);
        ViewObjectImpl supass1 = (ViewObjectImpl)getSupervisorAssignmentVO1();
        RowSetIterator rs = supass1.createRowSetIterator(null);
        rs.reset();
        String allocationID = null;
        while (rs.hasNext()) {
        Row row1 = rs.next();
                    
            System.out.println("Supid ::"+row1.getAttribute("Supid"));
            System.out.println("status ::"+row1.getAttribute("Status"));
        if (row1.getAttribute("Supid").equals( supervisorName) && row1.getAttribute("Status").equals( "Assigned")) {
        allocationID = row1.getAttribute("Allocid1").toString();
            System.out.println(row1.getAttribute("Supid"));
            System.out.println("allocationID ::" + allocationID);
        }
        
        }
        int allocid = Integer.parseInt(allocationID);
        ViewObjectImpl supalloc = (ViewObjectImpl)getSupervisorSectorVO1();
        RowSetIterator rsSupAlloc = supalloc.createRowSetIterator(null);
        rsSupAlloc.reset();
        String sectorNames = "";
        HashMap hmap = new HashMap<String,String>();
        while (rsSupAlloc.hasNext()) {
        Row row1 = rsSupAlloc.next();
        //            System.out.println(row1.getAttribute("Supid"));
        //            System.out.println(row1.getAttribute("Allocid1"));
        if (Integer.parseInt(row1.getAttribute("Allocid").toString()) == (allocid)) {
            if(sectorNames.equals("")){
                sectorNames = "  "+row1.getAttribute("Sector").toString();
            }
            else{
                sectorNames = sectorNames+", "+ row1.getAttribute("Sector").toString();
            }
        }
        System.out.println("sectorNames ::" + sectorNames);
        }
        hmap.put("Allocid", allocationID);
        hmap.put("SectorNames", sectorNames);
        return hmap;
    }

    /**
     * Container's getter for PIAllocToSpvsrGrpUVO1.
     * @return PIAllocToSpvsrGrpUVO1
     */
    public ViewObjectImpl getPIAllocToSpvsrGrpUVO1() {
        return (ViewObjectImpl)findViewObject("PIAllocToSpvsrGrpUVO1");
    }
    /**
     * Container's getter for EditVO1.
     * @return EditVO1
     */
    public EditVOImpl getEditVO1() {
        return (EditVOImpl)findViewObject("EditVO1");
    }

    /**
     * Container's getter for GenBeatMstLOVVO1.
     * @return GenBeatMstLOVVO1
     */
    public ViewObjectImpl getGenBeatMstLOVVO1() {
        return (ViewObjectImpl)findViewObject("GenBeatMstLOVVO1");
    }

    /**
     * Container's getter for GenZoneMstLOVVO1.
     * @return GenZoneMstLOVVO1
     */
    public ViewObjectImpl getGenZoneMstLOVVO1() {
        return (ViewObjectImpl)findViewObject("GenZoneMstLOVVO1");
    }

    /**
     * Container's getter for SectorVO1.
     * @return SectorVO1
     */
    public ViewObjectImpl getSectorVO1() {
        return (ViewObjectImpl)findViewObject("SectorVO1");
    }

    /**
     * Container's getter for PIAssignSearch1.
     * @return PIAssignSearch1
     */
    public ViewObjectImpl getPIAssignSearch1() {
        return (ViewObjectImpl)findViewObject("PIAssignSearch1");
    }

    /**
     * Container's getter for ReAssignShiftRVO1.
     * @return ReAssignShiftRVO1
     */
    public ViewObjectImpl getReAssignShiftRVO1() {
        return (ViewObjectImpl)findViewObject("ReAssignShiftRVO1");
    }

    /**
     * Container's getter for PIUnassignUVO1.
     * @return PIUnassignUVO1
     */
    public ViewObjectImpl getPIUnassignUVO1() {
        return (ViewObjectImpl)findViewObject("PIUnassignUVO1");
    }

    /**
     * Container's getter for PIworkVO1.
     * @return PIworkVO1
     */
    public ViewObjectImpl getPIworkVO1() {
        return (ViewObjectImpl)findViewObject("PIworkVO1");
    }
    public void PIProfileOnLoad() {
        ViewObjectImpl piprofile=(ViewObjectImpl)getPIUserMstUVO1();
        piprofile.setWhereClause(null);
        piprofile.setWhereClauseParams(null);
        piprofile.executeQuery();
    }
    public void supervisorDeatials(){
        String levpi="";
      
        ViewObjectImpl assignSearch1 = getPIAssignSearch1();
        assignSearch1.setApplyViewCriteriaName("PIAssignSearchCriteria");
//        FacesContext fctx = FacesContext.getCurrentInstance();
//        ExternalContext ectx = fctx.getExternalContext();
//        HttpSession userSession = (HttpSession) ectx.getSession(false);
        ADFContext adfctx = ADFContext.getCurrent();
        String loginuser=adfctx.getSessionScope().get("loggedinUserid").toString();
        System.out.println("Logged in User is:"+loginuser);
        assignSearch1.setNamedWhereClauseParam("supervisorId", "supervisor2");
        assignSearch1.executeQuery();
        ViewObjectImpl leavePis = getPILeaveMangementVO1();
        leavePis.setApplyViewCriteriaName("PILeaveMangementVOCriteria");
        leavePis.executeQuery();
        RowSetIterator leavrset=leavePis.createRowSetIterator(null);
        leavrset.reset();
        RowSetIterator assearch = assignSearch1.createRowSetIterator(null);
        assearch.reset();
        while(leavrset.hasNext()){
            Row levrow=leavrset.next();
            if(levrow!=null){
               levpi = levrow.getAttribute("PIid").toString();
            }
            while(assearch.hasNext()){
               
                 Row assrow=assearch.next();
                    if(assrow!=null){
                }if(assrow.getAttribute("PIid").toString()!=null)
                if(levpi.equals(assrow.getAttribute("PIid").toString())){
                    assrow.setAttribute("AttendanceStatus", "On Leave");
                }
            
             }
            
        }
    }
    public void  getSectorDetails(){
        ViewObjectImpl getSectors=getSectorVO1();
        getSectors.setApplyViewCriteriaName("SectorVOCriteria");
        //getSectors.setNamedWhereClauseParam("supVsrID", "SV1");
        getSectors.executeQuery();
    }
    public Boolean sectorSave(String sector, int rowID){
       
        
        ViewObjectImpl workVO = (ViewObjectImpl)getPIworkVO1();
        RowSetIterator rs = workVO.createRowSetIterator(null);
        rs.reset();
        if(rs.hasNext()){
            Row row = rs.next();
            if(row.getAttribute("ID").toString().equals(rowID)){
                row.setAttribute("Sector", sector);
            }
        }
        return true;
    }
    public String getLovVal(String Val,String flag){
//        ViewObject vo1 =(ViewObject)getEditVO1();
//        RowSetIterator rsi = vo1.createRowSetIterator(null);
//        rsi.reset();
       Integer sec = new Integer(Val);
        String result = null;
       int val = sec.intValue();
        
        if (flag.equals("sector")){
            ViewObject vo1 =(ViewObject)getSectorVO1();
            RowSetIterator rsi = vo1.createRowSetIterator(null);
            rsi.reset();
            Row newRow = rsi.getRowAtRangeIndex(val-1);
            if(newRow.getAttribute("Sector")!=null){
            result = newRow.getAttribute("Sector").toString();
            }
        }
        else if (flag.equals("zone")) {
            ViewObjectImpl zoneVO =(ViewObjectImpl)getGenZoneMstLOVVO1();
//            Row newRow_Zone = zoneVO.getRowAtRangeIndex(val-1);
//            System.out.println(newRow_Zone);
//            if(newRow_Zone.getAttribute("ZoneName")!=null){
//            result = newRow_Zone.getAttribute("ZoneName").toString();
//            }
            result = "";
        } else if (flag.equals("beat")) {
            ViewObject beatVO =(ViewObject)getGenBeatMstLOVVO1();
//            Row newRow_beat = beatVO.getRowAtRangeIndex(val-1);
//            if(newRow_beat.getAttribute("BeatName")!=null){
//            result = newRow_beat.getAttribute("BeatName").toString();
//            }
             result = "";
        }
    return result;
    }
    public String insertToTable(Date startDate, Date endDate) {
        // Add event code here...
    //        BindingContext lBindingContext = BindingContext.getCurrent();
    //        DCBindingContainer lBindingContainer =(DCBindingContainer) lBindingContext.getCurrentBindingsEntry();
    //        DCBindingContainer bindingsIte = (DCBindingContainer) lBindingContainer ;
    //        DCIteratorBinding dciter = bindingsIte.findIteratorBinding("PIAssignSearch1Iterator");
        ViewObject vo =(ViewObject)getPIAssignSearch1();
        ViewObject secvo =(ViewObject)getSectorVO1();
        Row row = vo.getCurrentRow();
        Row sectrow=secvo.getCurrentRow();
       System.out.println(startDate);
         System.out.println(endDate);
       java.sql.Date start = new java.sql.Date(startDate.getTime());
           java.sql.Date end = new java.sql.Date(endDate.getTime());
        System.out.println(start+"test1");
          System.out.println(end+"test1");
       //System.out.println(row);PIworkVO1Iterator
      //  System.out.println(row.getAttribute("PIid"));
        ViewObject vo1 =(ViewObject)getPIworkVO1();
        RowSetIterator rsi = vo1.createRowSetIterator(null);
        Row lastRow = rsi.last();
        //obtain the index of the last row
        int lastRowIndex = rsi.getRangeIndexOf(lastRow);
        //create a new row
        Row newRow = rsi.createRow();
        //initialize the row
        newRow.setNewRowState(Row.STATUS_INITIALIZED);
        //add row to last index + 1 so it becomes last in the range set
        newRow.setAttribute("PIID",row.getAttribute("PIid"));
        System.out.println(newRow.getAttribute("PIID"));
        newRow.setAttribute("Sector",row.getAttribute("Sector"));
        newRow.setAttribute("Zone",row.getAttribute("Zone"));
        newRow.setAttribute("Beat",row.getAttribute("Beat"));
        newRow.setAttribute("Status","Assigned");
        newRow.setAttribute("Allocid", row.getAttribute("Allocid"));
        System.out.println(start+"test2");
          System.out.println(end+"test2");
        newRow.setAttribute("AssgnStDate",start);
        newRow.setAttribute("AssgnEndDate",end);
        newRow.setAttribute("CreatedDate",start);
       // newRow.REFRESH_CONTAINEES
        System.out.println("New Row :"+newRow.getAttribute("PIID"));
        rsi.insertRow(newRow);
        //make row the current row so it is displayed correctly
        rsi.setCurrentRow(newRow);   
       
        vo.removeCurrentRow();
        return "";
    }
    
    public void deleteFrmTable(){
        ViewObject vo =(ViewObject)getPIworkVO1();
        Row row = vo.getCurrentRow();
        
        System.out.println("Status :"+row.getAttribute("Status"));
        System.out.println("Status :"+row.getAttribute("PIID"));
        
        
        ViewObject vo1 =(ViewObject)getPIAssignSearch1();
        RowSetIterator rsi = vo1.createRowSetIterator(null);
        Row newRow = rsi.createRow();
        newRow.setNewRowState(Row.STATUS_INITIALIZED);
        newRow.setAttribute("PIid",row.getAttribute("PIID"));
        newRow.setAttribute("Sector",row.getAttribute("Sector"));
        newRow.setAttribute("Zone",row.getAttribute("Zone"));
        newRow.setAttribute("Beat",row.getAttribute("Beat"));
        newRow.setAttribute("AttendanceStatus","Present");
        
        vo.removeCurrentRow();
        rsi.insertRow(newRow);
        rsi.setCurrentRow(newRow);   
    }
    public String getPiWorkStatus(){
        String status="Unassigned";
        ViewObject vo1 =(ViewObject)getPIAssignSearch1();
        //RowSetIterator rsi = vo1.createRowSetIterator(null);
        Row currentRow=vo1.getCurrentRow();
        if(currentRow.getAttribute("Status")!=null){
        status = currentRow.getAttribute("Status").toString();
        System.out.println(status);
        }
        return status;
    }
    public String getPiAttendanceStatus(){
        String attstatus="Present";
        ViewObject vo1 =(ViewObject)getPIAssignSearch1();
        //RowSetIterator rsi = vo1.createRowSetIterator(null);
        Row currentRow=vo1.getCurrentRow();
        if(currentRow.getAttribute("AttendanceStatus")!=null){
        attstatus = currentRow.getAttribute("AttendanceStatus").toString();
        System.out.println(attstatus);
        }
        return attstatus;
    }
    public String validatePiWorkAssign(){
        String msg="Success";
        ViewObject workVO =(ViewObject)getPIworkVO1();
        RowSetIterator workrsi=workVO.createRowSetIterator(null);
        workrsi.reset();
        while(workrsi.hasNext()){
            Row row=workrsi.next();
            System.out.println(row.getAttribute("Sector"));
            System.out.println(row.getAttribute("Zone"));
            System.out.println(row.getAttribute("Beat"));
            if((row.getAttribute("Sector"))==null || (row.getAttribute("Zone"))==null  || (row.getAttribute("Beat"))==null) {
            
                msg="Failure";
              
                
            }
        }
        
        return msg;
    }
    public void saveUnassignDtls(String time){
        try{
        ViewObject vo1 =(ViewObject)getPIAssignSearch1();
       // RowSetIterator rsi = vo1.createRowSetIterator(null);
        Row newRow = vo1.getCurrentRow();
        String pid = "";
            String zone = "";
            String beat = "";
            String unassign = "UnAssigned";
            String Assign = "Assigned";
    //        Date startDate = null;
    //        Date endDate = null;
    //        SimpleDateFormat stf = new SimpleDateFormat("dd-MM-yyyy");
            
        if(newRow.getAttribute("PIid")!=null){
            pid = newRow.getAttribute("PIid").toString();
        }
            if(newRow.getAttribute("Zone")!=null){
                zone = newRow.getAttribute("Zone").toString();
            }
            if(newRow.getAttribute("Beat")!=null){
                beat = newRow.getAttribute("Beat").toString();
            }
    //        if(newRow.getAttribute("AssgnEndDate")!=null){
    //            String mon = newRow.getAttribute("AssgnEndDate").toString().substring(5, 7);
    //            System.out.println(mon);
    //            String year = newRow.getAttribute("AssgnEndDate").toString().substring(0, 4);
    //            System.out.println(year);
    //            String day = newRow.getAttribute("AssgnEndDate").toString().substring(8, 10);
    //            System.out.println(day);
    //            endDate = stf.parse(day+"-"+mon+"-"+year);
    //            System.out.println(endDate);
    //        }
    //        if(newRow.getAttribute("AssgnStDate")!=null){
    //            String mon = newRow.getAttribute("AssgnStDate").toString().substring(5, 7);
    //            System.out.println(mon);
    //            String year = newRow.getAttribute("AssgnStDate").toString().substring(0, 4);
    //            System.out.println(year);
    //            String day = newRow.getAttribute("AssgnStDate").toString().substring(8, 10);
    //            System.out.println(day);
    //            startDate = stf.parse(day+"-"+mon+"-"+year);
    //            System.out.println(startDate);
    //
    //        }
        
        //Since AssignSearchVO is transient , adding into AssignVO
        
        ViewObject vo2 =(ViewObject)getPIUnassignUVO1();
        RowSetIterator rsi = vo2.createRowSetIterator(null);
        rsi.reset();
        while(rsi.hasNext()){
            Row row = rsi.next();
     
       //     if(row.getAttribute("AssgnEndDate")!=null) && row.getAttribute("PIID")!=null && row.getAttribute("AssgnStDate")!=null){
                System.out.println(row.getAttribute("PIID"));
    //                System.out.println((Date)row.getAttribute("AssgnEndDate"));
    //                Date dt1 = (Date)row.getAttribute("AssgnEndDate");
    //                Date startDt = new Date(dt1.getTime());
    //                Date dt2 = (Date)row.getAttribute("AssgnStDate");
    //                Date endDt = new Date(dt2.getTime());
    //                System.out.println(startDt);
    //                System.out.println(endDt);
                
                if(row.getAttribute("PIID").equals(pid)
               && row.getAttribute("Zone").equals(zone) && 
               row.getAttribute("Beat").equals(beat) ){
            row.setAttribute("Status",unassign);
            
            //Should change it to TimeStamp in DB :
            
            Date currentDate = new Date(System.currentTimeMillis());
            java.sql.Date sqlDt = new java.sql.Date(currentDate.getTime());
            row.setAttribute("UnassignTime",sqlDt);
             ViewObject UnAssignvo2 =(ViewObject)getPIUnAssignStatusVO1();
                  if(UnAssignvo2 != null)
                  {
                      System.out.println(pid);
                   UnAssignvo2.setWhereClause("PI_ID = '"+pid+"' and Status = '"+Assign+"'");
                   UnAssignvo2.executeQuery();
                   PIUnAssignStatusVORowImpl UnAssignvoRow = (PIUnAssignStatusVORowImpl)UnAssignvo2.first();
                   if(UnAssignvoRow != null)
                   {
                   UnAssignvoRow.setAttribute("status", unassign);
                   }
                  }  
                   
                   
                   
             
            
               }
            }
    //    }
        
        this.getDBTransaction().commit();
        }catch(Exception e){
            e.printStackTrace();
        }
    }
    
    
    public void saveReassignDtls(String pidVal,String secVal,String zoneVal,String beatVal){


        
        ViewObjectImpl reasignvo = this.getEditVO1();
        
        if(reasignvo != null)
        {
            String reassign = "REASSIGNED";
            EditVORowImpl reasignRow = (EditVORowImpl)reasignvo.createRow();
                   
          
            reasignRow.setPIID(pidVal);
            reasignRow.setBeat(beatVal);
            reasignRow.setSector(secVal);
            reasignRow.setZone(zoneVal);
            reasignRow.setStatus(reassign);
            reasignvo.insertRow(reasignRow);   
           // Date currentDate = new Date(System.currentTimeMillis());
            //java.sql.Date sqlDt = new java.sql.Date(currentDate.getTime());
           // row.setAttribute("UnassignTime",sqlDt);
        }
         
        this.getDBTransaction().commit();


    }
        
        
        
   /*     
        try{
        ViewObject vo1 =(ViewObject)getPIAssignSearch1();
       // RowSetIterator rsi = vo1.createRowSetIterator(null);
        Row newRow = vo1.getCurrentRow();
        String pid = "";
            String zone = "";
            String beat = "";
            String unassign = "REASSIGNED";
    //        Date startDate = null;
    //        Date endDate = null;
    //        SimpleDateFormat stf = new SimpleDateFormat("dd-MM-yyyy");
            
        if(newRow.getAttribute("PIid")!=null){
            pid = newRow.getAttribute("PIid").toString();
        }
            if(newRow.getAttribute("Zone")!=null){
                zone = newRow.getAttribute("Zone").toString();
            }
            if(newRow.getAttribute("Beat")!=null){
                beat = newRow.getAttribute("Beat").toString();
            }
    //        if(newRow.getAttribute("AssgnEndDate")!=null){
    //            String mon = newRow.getAttribute("AssgnEndDate").toString().substring(5, 7);
    //            System.out.println(mon);
    //            String year = newRow.getAttribute("AssgnEndDate").toString().substring(0, 4);
    //            System.out.println(year);
    //            String day = newRow.getAttribute("AssgnEndDate").toString().substring(8, 10);
    //            System.out.println(day);
    //            endDate = stf.parse(day+"-"+mon+"-"+year);
    //            System.out.println(endDate);
    //        }
    //        if(newRow.getAttribute("AssgnStDate")!=null){
    //            String mon = newRow.getAttribute("AssgnStDate").toString().substring(5, 7);
    //            System.out.println(mon);
    //            String year = newRow.getAttribute("AssgnStDate").toString().substring(0, 4);
    //            System.out.println(year);
    //            String day = newRow.getAttribute("AssgnStDate").toString().substring(8, 10);
    //            System.out.println(day);
    //            startDate = stf.parse(day+"-"+mon+"-"+year);
    //            System.out.println(startDate);
    //
    //        }
        
        //Since AssignSearchVO is transient , adding into AssignVO
        
        ViewObject vo2 =(ViewObject)getPIUnassignUVO1();
        RowSetIterator rsi = vo2.createRowSetIterator(null);
        rsi.reset();
        while(rsi.hasNext()){
            Row row = rsi.next();
     
       //     if(row.getAttribute("AssgnEndDate")!=null) && row.getAttribute("PIID")!=null && row.getAttribute("AssgnStDate")!=null){
                System.out.println(row.getAttribute("PIID"));
    //                System.out.println((Date)row.getAttribute("AssgnEndDate"));
    //                Date dt1 = (Date)row.getAttribute("AssgnEndDate");
    //                Date startDt = new Date(dt1.getTime());
    //                Date dt2 = (Date)row.getAttribute("AssgnStDate");
    //                Date endDt = new Date(dt2.getTime());
    //                System.out.println(startDt);
    //                System.out.println(endDt);
                
                if(row.getAttribute("PIID").equals(pid)
               && row.getAttribute("Zone").equals(zone) && 
               row.getAttribute("Beat").equals(beat) ){
            row.setAttribute("Status",unassign);
            
            //Should change it to TimeStamp in DB :
            
            Date currentDate = new Date(System.currentTimeMillis());
            java.sql.Date sqlDt = new java.sql.Date(currentDate.getTime());
            row.setAttribute("UnassignTime",sqlDt);
               }
            }
    //    }
        
        this.getDBTransaction().commit();
        }catch(Exception e){
            e.printStackTrace();
        }
    }*/
    
    public String editSaveDtls(String pidVal,String secVal,String zoneVal,String beatVal){
        try{
        ViewObject vo1 =(ViewObject)getEditVO1();
        RowSetIterator rsi = vo1.createRowSetIterator(null);
        rsi.reset();
        while(rsi.hasNext()){
            Row newRow = rsi.next();
            if(newRow.getAttribute("PIID")!=null){
                if(newRow.getAttribute("PIID").toString().equals(pidVal)){
                    newRow.setAttribute("PIID",pidVal);
                    newRow.setAttribute("Sector",secVal);
                    newRow.setAttribute("Zone",zoneVal);
                    newRow.setAttribute("Beat",beatVal);
                }
            }
        }
        this.getDBTransaction().commit();
            return "success";
        }catch(Exception e){
            e.printStackTrace();
            return "fail" ;
        }
        
       
    }
    public void getPITable(){
        this.getSectorDetails();
        this.supervisorDeatials();
        ViewObjectImpl voimpl=this.getPIworkVO1();
        voimpl.executeEmptyRowSet();
        
        
        ViewObjectImpl piablv=getPIlvablistVO1();
        piablv.setApplyViewCriteriaName("PIlvablistVOCriteria");
        piablv.executeQuery();
        
    }
    public void getEmptyTable(){
    ViewObjectImpl voimpl=this.getPIworkVO1();
    voimpl.executeEmptyRowSet();
    }

    /**
     * Container's getter for TempTableVO1.
     * @return TempTableVO1
     */
    public ViewObjectImpl getTempTableVO1() {
        return (ViewObjectImpl)findViewObject("TempTableVO1");
    }

    /**
     * Container's getter for PIAssignVO1.
     * @return PIAssignVO1
     */
    public ViewObjectImpl getPIAssignVO1() {
        return (ViewObjectImpl)findViewObject("PIAssignVO1");
    }

    /**
     * Container's getter for AbsetiesVO1.
     * @return AbsetiesVO1
     */
    public ViewObjectImpl getAbsetiesVO1() {
        return (ViewObjectImpl)findViewObject("AbsetiesVO1");
    }
   
   public void filterSearchResults() {
       ViewObject vo1 =(ViewObject)getPIAssignSearch1();
       Row row= vo1.getCurrentRow();
       String pid= row.getAttribute("PIid").toString();
      
       
   }
    
   
   
    public void getPISupId()
    {
         String userName = "";
         ADFContext adfctx = ADFContext.getCurrent();
         if(adfctx.getSessionScope().get("loggedinUserid")!=null){
             userName = adfctx.getSessionScope().get("loggedinUserid").toString(); 
         }   
   
    ViewObjectImpl vo= (ViewObjectImpl)getpisforsupervisorVO1();
    vo.setApplyViewCriteriaName("pisforsupervisorVOCriteria");
    vo.setNamedWhereClauseParam("supid",userName);
    vo.executeQuery();
         RowSetIterator rs = (RowSetIterator)vo.createRowSetIterator(null);
         rs.reset();
         System.out.println(rs.getRowCount());
     }
   
   public void getTable(){
      getleaveApproveVO1().executeQuery();
     
   }
   
    public void getleaveserch(String pi,Date fd,Date td,String sup)
    {
    
    java.sql.Date fD1 = new java.sql.Date(fd.getTime());
    java.sql.Date tD1 = new java.sql.Date(td.getTime());
    System.out.println(fD1);
         System.out.println(tD1);
    ViewObjectImpl vo= (ViewObjectImpl)getserchleaveVO1();
    vo.setApplyViewCriteriaName("serchleaveVOCriteria");
    vo.setNamedWhereClauseParam("pi",pi);
    vo.setNamedWhereClauseParam("startDate",fD1);
    vo.setNamedWhereClauseParam("endDate",tD1);
    vo.setNamedWhereClauseParam("sup_id",sup);
    vo.executeQuery();
     }
    public void getSupervisorUnderpis(String  sup_id,String pinumber) {
        ViewObjectImpl vo= (ViewObjectImpl)getserchleaveVO1();
        vo.setApplyViewCriteriaName("serchleaveVOCriteria2");
        vo.setNamedWhereClauseParam("pi",pinumber);
        vo.setNamedWhereClauseParam("sup_id",sup_id);
        vo.executeQuery(); 
    }
    
    
    public String getCheckLeave(String pi,Date fd,Date td)
    {
         String str = "Success";
         java.sql.Date fD1 = new java.sql.Date(fd.getTime());
         java.sql.Date tD1 = new java.sql.Date(td.getTime());
    System.out.println(fD1);
         System.out.println(tD1);
    ViewObjectImpl vo= (ViewObjectImpl)getserchleaveVO1();
    //vo.addWhereClause(" Pi_id ='"+pi+"' and Status in ('Approve','Pending') and  ('"+fD1+"' between From_Date and To_Date or '"+tD1+"' between From_Date and To_Date)");
   //  vo.addWhereClause("Status in ('Approve','Pending') and  (Pi_id ='"+pi+"' and From_Date  between '"+fD1+"' and '"+tD1+"') or (Pi_id ='"+pi+"' and To_Date between '"+fD1+"' and '"+tD1+"') or (Pi_id ='"+pi+"' and '"+fD1+"' between From_Date and To_Date) or (Pi_id ='"+pi+"' and '"+tD1+"' between From_Date and To_Date)");
   vo.addWhereClause("(Status not in ('Denied') and Pi_id ='"+pi+"' and From_Date  between '"+fD1+"' and '"+tD1+"') or (Status not in ('Denied')  and Pi_id ='"+pi+"' and To_Date between '"+fD1+"' and '"+tD1+"') or (Status not in ('Denied') and Pi_id ='"+pi+"' and '"+fD1+"' between From_Date and To_Date) or (Status not in ('Denied') and Pi_id ='"+pi+"' and '"+tD1+"' between From_Date and To_Date)");   
   
   
   
//   select * from pi_leavemgmt where Status in ('Approve','Pending') and
//   (Pi_id ='1337' and  Status !='Denied' and From_Date between '2014-11-01' and '2014-12-01') or (Pi_id ='1337' and  Status !='Denied' and To_Date between '2014-11-01' and '2014-12-01') or 
//   (Pi_id ='1337' and  Status !='Denied' and '2014-11-01' between From_Date and To_Date) or (Pi_id ='1337' and  Status !='Denied' and'2014-12-01' between From_Date and To_Date)
//     //   (Pi_id ='1337' and From_Date between '2014-11-01' and '2014-12-01') or (Pi_id ='1337' and To_Date between '2014-11-01' and '2014-12-01')
//    vo.setApplyViewCriteriaName("serchleaveVOCriteria");
//    vo.setNamedWhereClauseParam("pi",pi);
//    vo.setNamedWhereClauseParam("startDate",fD1);
//    vo.setNamedWhereClauseParam("endDate",tD1);
      //  "Approve"
    vo.executeQuery();
    RowSetIterator rs = (RowSetIterator)vo.createRowSetIterator(null);
    rs.reset();
    System.out.println(rs.getRowCount());
   
         ArrayList list = new ArrayList();
         if(rs.hasNext()){
             System.out.println("inside ayyappa");
             str = "Failure";
//             vo.setWhereClause(null);
//             vo.setWhereClauseParams(null);
            //Row row = rs.next();
             //dates = calSupervisorAssignInBetweendates1(row.getAttribute("fromdate").toString(),row.getAttribute("ToDate").toString());
         }
        vo.setWhereClause(null);
        vo.setWhereClauseParams(null);
//         if(dates.contains(fD1.toString()) || dates.contains(tD1.toString())){
//           System.out.println("Already Leave applied in these days");  
//             str = "Failure";
//         }
//       dates.clear();
        return str;
    } 
    public void getvalues() {
        ViewObjectImpl vo = (ViewObjectImpl)getleaveApproveVO1();
        RowSetIterator rsit= vo.createRowSetIterator(null);
        vo.executeQuery();
        vo.setWhereClause(null);
        vo.setWhereClauseParams(null);
        getPILeaveMangementVO1().executeQuery();
        getleaveApproveVO1().executeQuery();
        
    }
  
    
    public String getMandatoryType(int indexCount){
        String type= null;
        ViewObjectImpl leaveTypeVO = (ViewObjectImpl)getleavetypeLOV1();
        RowSetIterator leaveTypeIterator  = leaveTypeVO.createRowSetIterator(null);
        leaveTypeIterator.reset();
        int count = 0;
             while (leaveTypeIterator.hasNext()) {
                 Row row1 = leaveTypeIterator.next();
                 System.out.println("leave type ::"+row1.getAttribute("leavetype"));
                    if(count == indexCount){
                 type = row1.getAttribute("leavetype").toString();
                 }
                 ++count;
             }
            return type;
    }
    public void getpilistobj(){
            String userName = "";
            ADFContext adfctx = ADFContext.getCurrent();
            if(adfctx.getSessionScope().get("loggedinUserid")!=null){
                userName = adfctx.getSessionScope().get("loggedinUserid").toString(); 
            }
//            FacesContext facesContext = FacesContext.getCurrentInstance();
//            ExternalContext externalContext = facesContext.getExternalContext();
//            HttpSession httpSession = (HttpSession) externalContext.getSession(false);
//            String userName = httpSession.getAttribute("loggedinUserid").toString();
            System.out.println(userName);
            ViewObjectImpl vo =(ViewObjectImpl)getpilistVO1();
            vo.setApplyViewCriteriaName("pilistVOCriteria");
            vo.setNamedWhereClauseParam("supid","supervisor2");
            vo.executeQuery();
        
        }

    
    public void getpisforobser()
    {
         String userName = "";
         ADFContext adfctx = ADFContext.getCurrent();
         if(adfctx.getSessionScope().get("loggedinUserid")!=null){
             userName = adfctx.getSessionScope().get("loggedinUserid").toString(); 
         }
            FacesContext facesContext = FacesContext.getCurrentInstance();
            ExternalContext externalContext = facesContext.getExternalContext();
            HttpSession httpSession = (HttpSession) externalContext.getSession(true);
            
            ViewObjectImpl userMstVO=(ViewObjectImpl)getgenUserMstGidRVO1();
            ViewObjectImpl piTypeMstVO=(ViewObjectImpl)  getgenPiTypeMstRVO1();
            ViewObjectImpl piObserVO= (ViewObjectImpl)getPiobservationsVO2();
            int userGroupid=0;
            int piTypeGid=0;
            String senSup="SeniourSupervisor";
           userMstVO.setWhereClause("User_Id='"+userName+"'");
           System.out.println("userMst qry:::"+userMstVO.getQuery());
           userMstVO.executeQuery();
           Row r=userMstVO.first();
           if(r!=null){
            userGroupid=(Integer)r.getAttribute("groupid");
           }
           piTypeMstVO.executeQuery();
           Row r1=piTypeMstVO.first();
           if(r1!=null){
            piTypeGid=(Integer)r1.getAttribute("groupid");
           }
           if(userGroupid==piTypeGid){
               httpSession.setAttribute("seniourSup", senSup);
               piObserVO.executeEmptyRowSet();
                          }
           else{
         
        try{
    ViewObjectImpl vo= (ViewObjectImpl)getpisforobservationsLOV1();
    vo.setApplyViewCriteriaName("pisforobservationsLOVCriteria");
    vo.setNamedWhereClauseParam("supid",userName);
    vo.executeQuery(); 
         ViewObjectImpl vo1= (ViewObjectImpl) getPiobservationsVO2();
         vo1.setWhereClause("Sup_id='"+userName+"'");
            System.out.println("under supervisor qry:::"+vo1.getQuery());
         vo1.executeQuery();
//            String supervisor2 = "supervisor2";
//            String assigned = "Assigned";
//            String yes = "Y";
//            
//            String pis = "SELECT distinct PSA.PI_id,sa.Sup_id " +
//                "FROM Sup_Alloc SA INNER JOIN PI_Sup_Alloc PSA " +
//                "ON SA.Alloc_id=PSA.Alloc_id " +
//                "right outer join GEN_USER_MST gu " +
//                "on gu.User_Id collate arabic_ci_as=psa.PI_id " +
//                "WHERE SA.Sup_id='supervisor2' AND psa.status='assigned' and gu.Active_Flag='Y'"; 
//            vo.setQuery(pis);
//            vo.executeQuery();
//            RowSetIterator rs = vo.createRowSetIterator(null);
//            rs.reset();
//            System.out.println(vo.getEstimatedRowCount());
//    
//            System.out.println("Query"+vo.getQuery());
//            vo.setWhereClause(null);COLLATE arabic_ci_as
//            vo.setWhereClauseParams(null);
//            vo.setWhereClause("sa.Sup_id = '"+supervisor2+"' and psa.status = '"+assigned+"' and gu.Active_Flag = '"+yes+"'"); 
//            System.out.println("Query"+vo.getQuery());
            
            
        }
        catch(Exception e) 
                {
            FacesMessage fm = new FacesMessage(userName+"under no pi's");
            fm.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext fctx = FacesContext.getCurrentInstance();
            fctx.addMessage(null, fm);
          
                }  
           }
        }
        

    
     
   
   /**
    /**
     * Container's getter for getpidetails1.
     * @return getpidetails1
     */
    public ViewObjectImpl getgetpidetails1() {
        return (ViewObjectImpl)findViewObject("getpidetails1");
    }

    /**
     * Container's getter for PIAllocToSpvsrGrpUVO1.
     * @return PIAllocToSpvsrGrpUVO1
     */
  
    /**
     * Container's getter for HHSAssignValidateVO1.
     * @return HHSAssignValidateVO1
     */
    public ViewObjectImpl getHHSAssignValidateVO1() {
        return (ViewObjectImpl)findViewObject("HHSAssignValidateVO1");
    }
    /**
     * Container's getter for SpvsrDtlsVO1.
     * @return SpvsrDtlsVO1
     */
   

    /**
     * Container's getter for PIsForGenPoolVO1.
     * @return PIsForGenPoolVO1
     */

    /**
     * Container's getter for PIAllocToSpvsrGrpUVO2.
     * @return PIAllocToSpvsrGrpUVO2
     */
    public ViewObjectImpl getPIAllocToSpvsrGrpUVO2() {
        return (ViewObjectImpl)findViewObject("PIAllocToSpvsrGrpUVO2");
    }

/**
     * Container's getter for supervisormappingvo1.
     * @return supervisormappingvo1
     */
  // public ViewObjectImpl getsupervisormappingvo1() {
      //  return (ViewObjectImpl)findViewObject("supervisormappingvo1");
   // }

    /**
     * Container's getter for getpidetails1.
     * @return getpidetails1
     */
   public ViewObjectImpl getgetpidetails() {
        return (ViewObjectImpl)findViewObject("getpidetails");
    }

    /**
     * Container's getter for SavePISupMappingVO1.
     * @return SavePISupMappingVO1
     */
   public ViewObjectImpl getSavePISupMappingVO1() {
        return (ViewObjectImpl)findViewObject("SavePISupMappingVO1");
    }
    public void getRow(){
        ViewObjectImpl sveVO;
        sveVO = this.getSavePISupMappingVO1();
        Row currenRow;
        currenRow = sveVO.getCurrentRow();
        System.out.println(currenRow.getAttribute("sol1"));
        }

    /**
     * Container's getter for PISpvsrMapUVO1.
     * @return PISpvsrMapUVO1
     */
   // public ViewObjectImpl getPISpvsrMapUVO1() {
    //    return (ViewObjectImpl)findViewObject("PISpvsrMapUVO1");
  //  }
 
    public String SavePIDtls(String PId,ArrayList selectedPIds,java.util.Date startDate,java.util.Date endDate){
       
        try{
                   //added -kiran
                   ViewObjectImpl supvo = (ViewObjectImpl)getSupervisorAssignmentVO1();
                   RowSetIterator itr =  supvo.createRowSetIterator(null);
                   
               ViewObject vo = (ViewObject)getPIAllocToSpvsrGrpUVO2();
                   java.sql.Date start = new java.sql.Date(startDate.getTime());
                   java.sql.Date end = new java.sql.Date(endDate.getTime());
                   FacesContext facesContext = FacesContext.getCurrentInstance();
                   ExternalContext externalContext = facesContext.getExternalContext();
                   HttpSession httpSession = (HttpSession) externalContext.getSession(true);
                   String sessionManager = httpSession.getAttribute("loggedinUserid").toString();
            String allocidnew = null;
                   //String manager ="manager";
                   ViewObject spverDtlsVo = (ViewObject)getSpvsrDtlsVO1();
                   Row spvsrRow = spverDtlsVo.getCurrentRow();
                   String allocId = spvsrRow.getAttribute("Allocid").toString();
                  // int allocId1 = Integer.parseInt(allocId)-1;
                   String supname ="";
                   System.out.println("alloc id ::"+allocId);
                   selectedPIds = new ArrayList();
                 // ArrayList selectedPIds1 = new ArrayList();
                   ViewObject tempVO = (ViewObject)getPiTempRVO1();
                   RowSetIterator rs = tempVO.createRowSetIterator(null);
                   rs.reset();
                 System.out.println(tempVO.getEstimatedRowCount());
                   int totalRows = (int)tempVO.getEstimatedRowCount();
                   ViewObject supallocid = (ViewObject)getSpvsrDtlsVO1();
                    while(rs.hasNext()){
                      Row rowTemp = rs.next();
                      if(rowTemp.getAttribute("PIId")!=null){
                      PId = rowTemp.getAttribute("PIId").toString();
                      }
                      supname = rowTemp.getAttribute("SupName").toString();
                              while(itr.hasNext()){
                                  Row  row = itr.next();
                                  if(row.getAttribute("Supid").toString().equals(supname)){
                                      end = (java.sql.Date)row.getAttribute("AssgnEndDate");
                                  }
                                  
                              }
//                      supallocid.setWhereClause("Sup_id= '"+supname+"'");
//                      supallocid.executeQuery();
//                      Row allocrow=supallocid.first();
//                      String allocId1=allocrow.getAttribute("Allocid").toString();
                                                
                        //for getting alloc id start
                        
                      
                        RowSetIterator rsalloc = supallocid.createRowSetIterator(null);
                        
                        rsalloc.reset();
                       
                                while (rsalloc.hasNext()) {
                                    Row row1 = rsalloc.next();
                                   
                                    String supervisorId = row1.getAttribute("Supid").toString();
                                   
                                    if(supervisorId.equals(supname)){
                                       
                                       allocidnew = row1.getAttribute("Allocid").toString();
                                      
                                    }    
                                }
                        
                        //for getting alloc id end
                      
                        
                        
                      Row newRow = vo.createRow();
                      newRow.setAttribute("Allocid", Integer.parseInt(allocidnew));
                        
                     
                        
                     // newRow.setAttribute("Allocid", 27);
                      String str1= PId.toString().substring(0, PId.toString().indexOf(" "));
                      System.out.println(str1);
                          newRow.setAttribute("PIid", str1);
                          newRow.setAttribute("AssignedTo", supname);
                          newRow.setAttribute("status", "Assigned");
                          newRow.setAttribute("Createdby", sessionManager);
                          newRow.setAttribute("CreatedDate", start);
                          newRow.setAttribute("AssgnStDate", start);
                          newRow.setAttribute("AssgnEndDate", end);
                            ////// added
                         ViewObjectImpl genusrpi=(ViewObjectImpl)getPIUserMstUVO1();
                                 genusrpi.setWhereClause("User_Id='"+str1+"'");
                                 genusrpi.executeQuery();
                                 Row genusrpirow=genusrpi.first();
                                 genusrpirow.setAttribute("ManagerId",supname);
                                 this.getDBTransaction().commit();  
                          ///added
                          vo.insertRow(newRow);
                          rs.removeCurrentRow();
                      }
                  
        //            if(totalRows==1){
        //                selectedPIds = new ArrayList();
        //                Row rowTemp = rs.getCurrentRow();
        //                if(rowTemp.getAttribute("PIId")!=null){
        //                PId = rowTemp.getAttribute("PIId").toString();
        //                }
        //                String str = rowTemp.getAttribute("SupName").toString();
        //                System.out.println(PId + str);
        //                selectedPIds.add(str);
        //
        //            }else{
                    /*   while(rs.hasNext()){
                       Row rowTemp = rs.next();
                       if(rowTemp.getAttribute("PIId")!=null){
                       PId = rowTemp.getAttribute("PIId").toString();
                       }
                        supname = rowTemp.getAttribute("SupName").toString();
                       System.out.println(PId + supname);
                       selectedPIds.add(PId);
                           rs.setCurrentRow(rowTemp);
                           rs.removeCurrentRow();
                       }*/
           /*st  kkk
                   String assign="Assigned";
               ViewObject supallocid = (ViewObject)getSpvsrDtlsVO1();
                  supallocid.setWhereClause("Sup_id= '"+supname+"'");
                   supallocid.executeQuery();
                   Row allocrow=supallocid.first();
                   String allocId1=allocrow.getAttribute("Allocid").toString();
                   System.out.println(start);
                   System.out.println(end);
                   for (Object s : selectedPIds) {
                       Row newRow = vo.createRow();
                       newRow.setAttribute("Allocid", Integer.parseInt(allocId1));
                       String str1= s.toString().substring(0, s.toString().indexOf(" "));
                        System.out.println(str1);
                       newRow.setAttribute("PIid", str1);
                       
                       newRow.setAttribute("AssignedTo", supname);
                       newRow.setAttribute("status", "Assigned");
                       newRow.setAttribute("Createdby", manager);
                       newRow.setAttribute("CreatedDate", start);
                       newRow.setAttribute("AssgnStDate", start);
                       newRow.setAttribute("AssgnEndDate", end);
                       vo.insertRow(newRow);
                  
                   }     
                 end kkk  */
                   return "success";
               }catch(Exception e){
                  e.printStackTrace();
                  return "failure";
                  }
        
    }
    
    public String addDetails(String PId,ArrayList selectedPIds){
        try{
        ViewObject vo = (ViewObject)getPiTempRVO1();
            for (Object s : selectedPIds) {
                Row newRow = vo.createRow();
                newRow.setAttribute("SupName",PId);
                System.out.println(PId);
                newRow.setAttribute("PIId", s.toString());
                System.out.println(s.toString());
                vo.insertRow(newRow);
            }
            
            
            System.out.println("Add Details in Staff IMPL Row count---"+vo.getRowCount());
            return "success";
        }catch(Exception e){
           e.printStackTrace();
           return "failure";
           }
    }
    public DBTransaction getDBConnection1(){
        DBTransaction  con= this.getDBTransaction();
        return  con;
    }
    public HashMap removeDetails(){
       ViewObjectImpl vo = (ViewObjectImpl) getPiTempRVO1();
       Row row =  vo.getCurrentRow();
       String supID = (String)row.getAttribute("SupName");
        String piID = (String)row.getAttribute("PIId");
        HashMap removeVal = new HashMap();
        removeVal.put(supID, piID);                                         
       vo.removeCurrentRow();
       
       //add to the supervisor nd PI pool list back
       ViewObject supVo = (ViewObject)getSpvsrDtlsVO1();
       RowSetIterator rs = supVo.createRowSetIterator(null);
       System.out.println(rs.getRowCount());
       rs.reset();
       boolean flag = false;
       while(rs.hasNext()){
           Row row1 = rs.next();
           if(!row1.getAttribute("Supid").toString().equals(supID)){
               flag = true;
           }
       }
//       if(flag==true){
//                       Row newSupRow = supVo.createRow();
//                        newSupRow.setAttribute("Supid", supID);
//                        supVo.insertRow(newSupRow);
//       }
       
       
        ViewObject piPoolVO = (ViewObject)getPIsForGenPoolVO1();
        RowSetIterator rs1 = piPoolVO.createRowSetIterator(null);
        rs1.reset();
        ArrayList list =  new ArrayList();
        while(rs1.hasNext()){
            Row row1 =  rs1.next();
            list.add(row1.getAttribute("PIid").toString());
        }
        if(!list.contains(piID)){
            Row newpiRow = piPoolVO.createRow();
            System.out.println(piPoolVO.getRowCount());
            newpiRow.setAttribute("PIid", piID);
            System.out.println(piPoolVO.getRowCount());
            piPoolVO.insertRow(newpiRow);
        }
//        Row newpiRow = piPoolVO.createRow();
//        System.out.println(piPoolVO.getRowCount());
//         newpiRow.setAttribute("PIid", piID);
//        System.out.println(piPoolVO.getRowCount());
//        piPoolVO.insertRow(newpiRow);
       
       
       return removeVal;
    }
    
    public void clearList(int[] indices){
        ArrayList sellistRows = new ArrayList();
        ArrayList listRows = new ArrayList();
        ViewObject vo;
        Row row ;
        vo = (ViewObject)getPIsForGenPoolVO1();
       
        System.out.println("VO Count"+vo.getRowCount());
        for(int index :indices){
             System.out.println(index);
            row = vo.getRowAtRangeIndex(index);
             sellistRows.add(row);
           //  vo.setCurrentRow(row);
           System.out.println("PI ID from pool------"+row.getAttribute("PIid"));
             
          //   vo.removeCurrentRow();
         }
        RowSetIterator rs1 = vo.createRowSetIterator(null);
        rs1.reset();
        while(rs1.hasNext()){
            row = rs1.next();
            listRows.add(row);
        }
        for(int index =0;index<sellistRows.size();index++)
       {
            for(int index1 =0;index1<listRows.size();index1++)
                if((listRows.get(index1).equals(sellistRows.get(index)))){
                    row = (Row)listRows.get(index1); 
                    vo.setCurrentRow(row);
                    vo.removeCurrentRow();
                   // doCommit();
                }
        }
    }
    public void clearListSpvsr(int[] indices){
        try{
        ViewObject vo;
        vo = (ViewObject)getSpvsrDtlsVO1();
        for(int index :indices){
             System.out.println(index);
        Row row = vo.getRowAtRangeIndex(index);
            vo.setCurrentRow(row);
             vo.removeCurrentRow();
                     }
        }catch(Exception e){
            e.printStackTrace();
        }
    }
    
    
    /**
     * Container's getter for PISUIDListVO1.
     * @return PISUIDListVO1
     */
  //  public ViewObjectImpl getPISUIDListVO1() {
     //   return (ViewObjectImpl)findViewObject("PISUIDListVO1");
  //  }


    /**
     * Container's getter for SpvsrDtlsVO1.
     * @return SpvsrDtlsVO1
     */
    public ViewObjectImpl getSpvsrDtlsVO1() {
        return (ViewObjectImpl)findViewObject("SpvsrDtlsVO1");
    }


    /**
     * Container's getter for PIAllocToSpvsrGrpUVO1.
     * @return PIAllocToSpvsrGrpUVO1
     */
    
    /**
     * Container's getter for PIsForGenPoolVO1.
     * @return PIsForGenPoolVO1
     */
    public ViewObjectImpl getPIsForGenPoolVO1() {
        return (ViewObjectImpl)findViewObject("PIsForGenPoolVO1");
    }
    /**
     * Container's getter for HHCreassignvalidateVO1.
     * @return HHCreassignvalidateVO1
     */
    public ViewObjectImpl getHHCreassignvalidateVO1() {
        return (ViewObjectImpl)findViewObject("HHCreassignvalidateVO1");
    }

    /**
     * Container's getter for HHCNewRe1.
     * @return HHCNewRe1
     */
    public HHCNewReImpl getHHCNewRe1() {
        return (HHCNewReImpl)findViewObject("HHCNewRe1");
    }
    /**
     * Container's getter for PiobservationsVO1.
     * @return PiobservationsVO1
     */
    public ViewObjectImpl getPiobservationsVO1() {
        return (ViewObjectImpl)findViewObject("PiobservationsVO1");
    }

    /**
     * Container's getter for ObservationstypesVO1.
     * @return ObservationstypesVO1
     */
    public ViewObjectImpl getObservationstypesVO1() {
        return (ViewObjectImpl)findViewObject("ObservationstypesVO1");
    }

    /**
     * Container's getter for pilistVO1.
     * @return pilistVO1
     */
    public ViewObjectImpl getpilistVO1() {
        return (ViewObjectImpl)findViewObject("pilistVO1");
    }

    /**
     * Container's getter for PILeaveMangementVO1.
     * @return PILeaveMangementVO1
     */
    public ViewObjectImpl getPILeaveMangementVO1() {
        return (ViewObjectImpl)findViewObject("PILeaveMangementVO1");
    }
    /**
     * Container's getter for PiTempRVO1.
     * @return PiTempRVO1
     */
    public ViewObjectImpl getPiTempRVO1() {
        return (ViewObjectImpl)findViewObject("PiTempRVO1");
    }

    /**
     * Container's getter for pisforsupervisorVO1.
     * @return pisforsupervisorVO1
     */
    public ViewObjectImpl getpisforsupervisorVO1() {
        return (ViewObjectImpl)findViewObject("pisforsupervisorVO1");
    }

    /**
     * Container's getter for PIUnAssignStatusVO1.
     * @return PIUnAssignStatusVO1
     */
    public ViewObjectImpl getPIUnAssignStatusVO1() {
        return (ViewObjectImpl)findViewObject("PIUnAssignStatusVO1");
    }
    public void getAssignedSupervisors(){
        FacesContext facesContext = FacesContext.getCurrentInstance();
        ExternalContext externalContext = facesContext.getExternalContext();
        HttpSession httpSession = (HttpSession) externalContext.getSession(true);
        String sessionManager = httpSession.getAttribute("loggedinUserid").toString();
//        System.out.println("sessionManager :::"+sessionManager);
        //String manager = "Manager";
        ViewObjectImpl assignedSupervisors = getSpvsrDtlsVO1();
        assignedSupervisors.setApplyViewCriteriaName("SpvsrDtlsVOCriteria");
        assignedSupervisors.setNamedWhereClauseParam("Assignedby", sessionManager);
        assignedSupervisors.executeQuery();
    }
    public void saveUploadedFile(BlobDomain blobFile){
        
    }

    /**
     * Container's getter for PIlvablistVO1.
     * @return PIlvablistVO1
     */
    public ViewObjectImpl getPIlvablistVO1() {
        return (ViewObjectImpl)findViewObject("PIlvablistVO1");
    }
    /**
     * Container's getter for HHCAssignSupCheckVO1.
     * @return HHCAssignSupCheckVO1
     */
    public ViewObjectImpl getHHCAssignSupCheckVO1() {
        return (ViewObjectImpl)findViewObject("HHCAssignSupCheckVO1");
    }


    /**
     * Container's getter for IntlTrainingLOVVO1.
     * @return IntlTrainingLOVVO1
     */
    public ViewObjectImpl getIntlTrainingLOVVO1() {
        return (ViewObjectImpl)findViewObject("IntlTrainingLOVVO1");
    }

    /**
     * Container's getter for pisforobservationsLOV1.
     * @return pisforobservationsLOV1
     */
    public ViewObjectImpl getpisforobservationsLOV1() {
        return (ViewObjectImpl)findViewObject("pisforobservationsLOV1");
    }
    /**
     * Container's getter for HHCAssginGridVO1.
     * @return HHCAssginGridVO1
     */
    public ViewObjectImpl getHHCAssginGridVO1() {
        return (ViewObjectImpl)findViewObject("HHCAssginGridVO1");
    }

    /**
     * Container's getter for serchleaveVO1.
     * @return serchleaveVO1
     */
    public ViewObjectImpl getserchleaveVO1() {
        return (ViewObjectImpl)findViewObject("serchleaveVO1");
    }

    /**
     * Container's getter for SupervisorSectorAssignmentVO1.
     * @return SupervisorSectorAssignmentVO1
     */
    public ViewObjectImpl getSupervisorSectorAssignmentVO1() {
        return (ViewObjectImpl)findViewObject("SupervisorSectorAssignmentVO1");
    }
    
  
    public void updateStatusExpiredEndDate(){
    
    //        DBTransaction con = getDBTransaction();
    //        PreparedStatement pstmt = con.createPreparedStatement("UPDATE Sup_Alloc SET Status= 'UnAssigned' WHERE Status ='Assigned' AND Assgn_EndDate < convert(varchar(10),getDate(),120)",0);
    //        try {
    //            int updateResult = pstmt.executeUpdate();
    //            con.commit();
    //            System.out.println("Update Query Success ::::"+updateResult);
    //            //con.closeTransaction();
    //        } catch (SQLException e) {
    //            e.printStackTrace();
    //        }

                getsectorlistVo1().executeQuery();
                getsupervisorlistVO1().executeQuery();
        
    }
    /**
     * Container's getter for SupervisorSectorAssignmentVO1.
     * @return SupervisorSectorAssignmentVO1
     */
//    public ViewObjectImpl getSupervisorSectorAssignmentVO1() {
//        return (ViewObjectImpl)findViewObject("SupervisorSectorAssignmentVO1");
//    }
    /**
     * Container's getter for PiTempMonthVO1.
     * @return PiTempMonthVO1
     */
    public PiTempMonthVOImpl getPiTempMonthVO1() {
        return (PiTempMonthVOImpl)findViewObject("PiTempMonthVO1");
    }

    /**
     * Container's getter for TempViewObj1.
     * @return TempViewObj1
     */
    public TempViewObjImpl getTempViewObj1() {
        return (TempViewObjImpl)findViewObject("TempViewObj1");
    }
   /*-------------      27-11-2014   */

    public void populateMonthlyReport(){
        ViewObjectImpl reportvo1=(ViewObjectImpl)getReportVO1();
        reportvo1.executeEmptyRowSet();
        ViewObjectImpl reportvo=(ViewObjectImpl)getReportVO1();
        reportvo.executeQuery();
    }





    public String  createTab(int days, String piselected,Date currentdate){
                try {
                    
                    // to populate particular Supervisor's sector details :
                    String loginuser="";
                
                    ADFContext adfctx = ADFContext.getCurrent();
                           if(adfctx.getSessionScope().get("loggedinUserid")!=null){
                             loginuser=adfctx.getSessionScope().get("loggedinUserid").toString();
                               this.getSession().getUserData().put("loginuser", loginuser);
                           }else{
                               loginuser=null;
                           }
                           if(loginuser==null){
                               loginuser="Supervisor1";
                               this.getSession().getUserData().put("loginuser", loginuser);
                           }
                           System.out.println("Logged in User is:"+loginuser);
                           ViewObjectImpl getsupassignedsectorzones=(ViewObjectImpl)getSectorWorkVO1();
                           getsupassignedsectorzones.setApplyViewCriteriaName("SectorWorkVOCriteria");
                           getsupassignedsectorzones.setNamedWhereClauseParam("superid", loginuser);
                           getsupassignedsectorzones.executeQuery();
                    //System.out.println(getsupassignedsectorzones.getQuery());
            //System.out.println(piselected);
            Row rowleave, rowtemp;
                Calendar cal1 = Calendar.getInstance();
                cal1.setTime(currentdate);
                //System.out.println(cal1.getTime());
                System.out.println(cal1.MONTH);
                int curyear=cal1.get(Calendar.YEAR);
                int curmonth = cal1.get(Calendar.MONTH);
                curmonth++;
                //System.out.println(curmonth);
                int totladays1 = cal1.getActualMaximum(cal1.DAY_OF_MONTH);
                    String monthstrtdate=curyear+"-"+curmonth+"-"+1;
                    String monthenddate=curyear+"-"+curmonth+"-"+totladays1;
                    
                SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
                 Date sqlstdate = format.parse(monthstrtdate);
                java.sql.Date sqlstd = new java.sql.Date(sqlstdate.getTime());
                Date sqlenddate = format.parse(monthenddate);
                java.sql.Date sqlend = new java.sql.Date(sqlenddate.getTime());   
                    
            ViewObjectImpl onleavepis = getPILeaveMangementVO1();
            onleavepis.setApplyViewCriteriaName("PIMonthLeaveMangementCriteria");
            onleavepis.setNamedWhereClauseParam("piid", piselected);
                onleavepis.setNamedWhereClauseParam("monthstdate", sqlstd);
                onleavepis.setNamedWhereClauseParam("monthenddate", sqlend);
            onleavepis.executeQuery();
            RowSetIterator rsi=onleavepis.createRowSetIterator(null);
            //System.out.println(rsi.getRowCount());
            ViewObjectImpl voimClear=(ViewObjectImpl)getPImonthlyWorkAssignVO2();
             voimClear.executeQuery();
           
            ViewObjectImpl voim=(ViewObjectImpl)getPImonthlyWorkAssignVO1();
                    voim.setWhereClause(null);
                    voim.executeQuery();
                    
                System.out.println(voim.getRowCount());
            SimpleDateFormat stf = new SimpleDateFormat("yyyy-MM-dd");
            String str = stf.format(currentdate);
            Date d = stf.parse(str);
            java.sql.Date sqlDate = new java.sql.Date(d.getTime());
                    voim.setWhereClause(null);
                
                System.out.println(voim.getRowCount());
                    System.out.println(sqlDate);
    //        voim.setWhereClause("PI_id='"+piselected+"' and Active_Flag='Y' and Assgn_Date='"+sqlDate+"'");
    //        voim.executeQuery();
                    voimClear.setWhereClause("PI_id='"+piselected+"' and Active_Flag='Y' and Assgn_Date>='"+sqlDate+"'");
                    voimClear.executeQuery();
                   System.out.println(voim.getRowCount());
                SimpleDateFormat stf1c = new SimpleDateFormat("dd");
                   int date1 = Integer.parseInt(stf1c.format(new Date()));
                     int date2 = Integer.parseInt(stf1c.format(currentdate));
                     SimpleDateFormat stf2 = new SimpleDateFormat("yyyy");
                     int year1 = Integer.parseInt(stf2.format(new Date()));
                       int year2 = Integer.parseInt(stf2.format(currentdate));
                     SimpleDateFormat stf3 = new SimpleDateFormat("MM");
                     int month1 = Integer.parseInt(stf3.format(new Date()));
                       int month2 = Integer.parseInt(stf3.format(currentdate));
            if(voimClear.getRowCount()==0){
            //System.out.println(voim.getRowCount());
            voim.executeEmptyRowSet();
           // System.out.println(days);
          
                if(year1==year2 && month1==month2){
                
                    for(int co=days; co>=date1; co--){
                               Row row=voim.createRow();
                              
                               row.setAttribute("Day", co);
                               row.setNewRowState(Row.STATUS_INITIALIZED);
                               voim.insertRow(row);
                            
                        }      
                }else{
                        for(int co=days; co>=1; co--){
                               Row row=voim.createRow();
                               row.setAttribute("Day", co);
                            row.setNewRowState(Row.STATUS_INITIALIZED);
                               voim.insertRow(row);
                        }   
                }
            RowSetIterator temprsi=voim.createRowSetIterator(null);
         //  System.out.println(temprsi.getRowCount());
           
                while(rsi.hasNext()){
                    rowleave=rsi.next();
                    String leavefromday=rowleave.getAttribute("FromDate").toString();
                    String leavetoday=rowleave.getAttribute("ToDate").toString();
                    String[] fromday = leavefromday.split("-");
                    String[] today = leavetoday.split("-");
                    int month=Integer.parseInt(today[1]);
                   // System.out.println(month);
                    int lfromyear=Integer.parseInt(fromday[0]);
                    int lfrommonth=Integer.parseInt(fromday[1]);
                    int ltomonth=Integer.parseInt(fromday[1]);
                    //System.out.println(lfrommonth);
                    int lfromday = Integer.parseInt(fromday[2]);
                    int ltoday = Integer.parseInt(today[2]);
                    //System.out.println(lfromday);
                    //System.out.println(ltoday);
                  
                     ViewObjectImpl tempVO=(ViewObjectImpl)getPImonthlyWorkAssignVO1();
                   // System.out.println(tempVO.getRowCount());
                   // System.out.println("from"+leavefromday+"to"+leavetoday);
                     while(lfromday<=ltoday){
    //                    int val = lfromday-1;
                        RowSetIterator rsi1=tempVO.createRowSetIterator(null);
                         while(rsi1.hasNext()){
                             Row r1=rsi1.next();
                             int day=Integer.parseInt(r1.getAttribute("Day").toString());
                             if(day>=lfromday && day<=ltoday){
                                 r1.setAttribute("Temp", "On Leave"); 
                             }
                         }
    //                    rowtemp=tempVO.getRowAtRangeIndex(val);
    //                    rowtemp.setAttribute("Temp", "OnLeave");  
    //                    int day=Integer.parseInt(rowtemp.getAttribute("Day").toString());
    //                   // System.out.println(day);
    //                    System.out.println(lfromday);
                        lfromday++;
                    }
                    
    //                   while(lfromday<=ltoday){
    //                   // String sdate=lfromyear+"-"+lfrommonth+"-"+lfromday;
    //                    //String edate=lfromyear+"-"+lfrommonth+"-"+ltoday;
    //                     //  System.out.println(sdate);
    //                  //  SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
    //                    //        Date sqlstdate = format.parse(sdate);
    //                    //        java.sql.Date sqlstd = new java.sql.Date(sqlstdate.getTime());
    //                  //  Date sqlendate = format.parse(edate);
    //                  //  java.sql.Date sqlend = new java.sql.Date(sqlendate.getTime());
    //                   // tempVO.setWhereClause("Assgn_Date >='"+sqlstd+"' and Assgn_Date <='"+sqlend );
    ////                       RowSetIterator rsi1=tempVO.createRowSetIterator(null);
    ////                       while(rsi1.hasNext()){
    ////                           Row row123=rsi1.next();
    ////                           System.out.println(row123.getAttribute("AssgnDate"));
    ////                           
    ////                       }
    //                       tempVO.setApplyViewCriteriaName("PImonthlyLeaveStatusVOCriteria1");
    //                       tempVO.setNamedWhereClauseParam("leavestart", lfromday);
    //                       tempVO.setNamedWhereClauseParam("leaveend", ltoday);
    //                       tempVO.executeQuery();
    //                       System.out.println(tempVO.getRowCount());
    //                   int val = lfromday-1;
    //                   rowtemp=tempVO.getRowAtRangeIndex(val);
    //                    rowtemp.setAttribute("Temp", "OnLeave");  
    //                    int day=Integer.parseInt(rowtemp.getAttribute("Day").toString());
    //                    System.out.println(day);
    //                    System.out.println(lfromday);
    //                    lfromday++;
    //                }     
                    
                    
                }
               
                ViewObjectImpl getsupassignedsectorzones1=(ViewObjectImpl)getSectorWorkVO1();
                            getsupassignedsectorzones1.setApplyViewCriteriaName("SectorWorkVOCriteria");
                            getsupassignedsectorzones1.setNamedWhereClauseParam("superid", loginuser);
                //getsupassignedsectorzones.setWhereClause("sup_id = '"+loginuser+"' ");
                getsupassignedsectorzones1.executeQuery();
               // System.out.println(getsupassignedsectorzones1.getQuery());
                //System.out.println(getsupassignedsectorzones1.getRowCount());
            }else  if(voimClear.getRowCount()==1){
                    voim.executeEmptyRowSet();
                for(int co=days; co>=date1+1; co--){
                           voimClear.executeQuery();
                           Row row=voim.createRow();
                           row.setAttribute("Day", co);
                           row.setNewRowState(Row.STATUS_INITIALIZED);
                           voim.insertRow(row);
                        
                    }      
                
                while(rsi.hasNext()){
                    rowleave=rsi.next();
                    String leavefromday=rowleave.getAttribute("FromDate").toString();
                    String leavetoday=rowleave.getAttribute("ToDate").toString();
                    String[] fromday = leavefromday.split("-");
                    String[] today = leavetoday.split("-");
                    int month=Integer.parseInt(today[1]);
                   // System.out.println(month);
                    int lfromyear=Integer.parseInt(fromday[0]);
                    int lfrommonth=Integer.parseInt(fromday[1]);
                    int ltomonth=Integer.parseInt(fromday[1]);
                    //System.out.println(lfrommonth);
                    int lfromday = Integer.parseInt(fromday[2]);
                    int ltoday = Integer.parseInt(today[2]);
                    //System.out.println(lfromday);
                    //System.out.println(ltoday);
                  
                     ViewObjectImpl tempVO=(ViewObjectImpl)getPImonthlyWorkAssignVO1();
                   // System.out.println(tempVO.getRowCount());
                   // System.out.println("from"+leavefromday+"to"+leavetoday);
                     while(lfromday<=ltoday){
                //                    int val = lfromday-1;
                        RowSetIterator rsi1=tempVO.createRowSetIterator(null);
                         while(rsi1.hasNext()){
                             Row r1=rsi1.next();
                             int day=Integer.parseInt(r1.getAttribute("Day").toString());
                             if(day>=lfromday && day<=ltoday){
                                 r1.setAttribute("Temp", "On Leave"); 
                             }
                         }
                //                    rowtemp=tempVO.getRowAtRangeIndex(val);
                //                    rowtemp.setAttribute("Temp", "OnLeave");
                //                    int day=Integer.parseInt(rowtemp.getAttribute("Day").toString());
                //                   // System.out.println(day);
                //                    System.out.println(lfromday);
                        lfromday++;
                    }
                    
                //                   while(lfromday<=ltoday){
                //                   // String sdate=lfromyear+"-"+lfrommonth+"-"+lfromday;
                //                    //String edate=lfromyear+"-"+lfrommonth+"-"+ltoday;
                //                     //  System.out.println(sdate);
                //                  //  SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
                //                    //        Date sqlstdate = format.parse(sdate);
                //                    //        java.sql.Date sqlstd = new java.sql.Date(sqlstdate.getTime());
                //                  //  Date sqlendate = format.parse(edate);
                //                  //  java.sql.Date sqlend = new java.sql.Date(sqlendate.getTime());
                //                   // tempVO.setWhereClause("Assgn_Date >='"+sqlstd+"' and Assgn_Date <='"+sqlend );
                ////                       RowSetIterator rsi1=tempVO.createRowSetIterator(null);
                ////                       while(rsi1.hasNext()){
                ////                           Row row123=rsi1.next();
                ////                           System.out.println(row123.getAttribute("AssgnDate"));
                ////
                ////                       }
                //                       tempVO.setApplyViewCriteriaName("PImonthlyLeaveStatusVOCriteria1");
                //                       tempVO.setNamedWhereClauseParam("leavestart", lfromday);
                //                       tempVO.setNamedWhereClauseParam("leaveend", ltoday);
                //                       tempVO.executeQuery();
                //                       System.out.println(tempVO.getRowCount());
                //                   int val = lfromday-1;
                //                   rowtemp=tempVO.getRowAtRangeIndex(val);
                //                    rowtemp.setAttribute("Temp", "OnLeave");
                //                    int day=Integer.parseInt(rowtemp.getAttribute("Day").toString());
                //                    System.out.println(day);
                //                    System.out.println(lfromday);
                //                    lfromday++;
                //                }
                    
                    
                }
            System.out.println("Multiple Test test");
            }
            else{
                ViewObjectImpl getsupassignedsectorzones2=(ViewObjectImpl)getSectorWorkVO1();
               getsupassignedsectorzones2.setApplyViewCriteriaName("SectorWorkVOCriteria");
                getsupassignedsectorzones2.setNamedWhereClauseParam("superid", loginuser);
              //  getsupassignedsectorzones.setWhereClause("sup_id = '"+loginuser+"' ");
                getsupassignedsectorzones2.executeQuery();
               // System.out.println(getsupassignedsectorzones2.getQuery());
               // System.out.println(getsupassignedsectorzones2.getRowCount());
                
                ViewObjectImpl monthVO=(ViewObjectImpl)getPImonthlyWorkAssignVO1();
                monthVO.setWhereClause(null);
                monthVO.executeQuery();
               // System.out.println(monthVO.getEstimatedRowCount());
                monthVO.setApplyViewCriteriaName("PImonthlyWorkAssignVOCriteria");
                monthVO.setNamedWhereClauseParam("piid", piselected);
                SimpleDateFormat stf1 = new SimpleDateFormat("yyyy-MM-dd");
                String str1 = stf1.format(currentdate);
                Date d1 = stf1.parse(str1);
                java.sql.Date sqlDate1 = new java.sql.Date(d1.getTime());
                monthVO.setNamedWhereClauseParam("start", sqlDate1);
                Calendar cal = Calendar.getInstance();
                cal.setTime(d1);
                SimpleDateFormat stf12 = new SimpleDateFormat("dd");
                   int date12 = Integer.parseInt(stf12.format(new Date()));
                     int date22 = Integer.parseInt(stf12.format(currentdate));
                     SimpleDateFormat stf22 = new SimpleDateFormat("yyyy");
                     int year12 = Integer.parseInt(stf22.format(new Date()));
                       int year22 = Integer.parseInt(stf22.format(currentdate));
                     SimpleDateFormat stf32 = new SimpleDateFormat("MM");
                     int month12 = Integer.parseInt(stf32.format(new Date()));
                       int month22 = Integer.parseInt(stf32.format(currentdate));
                     if(year12==year22 && month12==month22){
                            int day1=days-date22;
                         cal.add(Calendar.DATE,day1);
                     }else{
                         cal.add(Calendar.DATE,days);
                     }
                Date d2=cal.getTime();
                java.sql.Date sqlDate2 = new java.sql.Date(d2.getTime());
                monthVO.setNamedWhereClauseParam("end", sqlDate2);
                //System.out.println(sqlDate2+"-----"+sqlDate1);
                monthVO.executeQuery();
    //            int i =1;
    //            Row row = monthVO.first();
    //            row.setAttribute("Day", i);
    //            while(monthVO.hasNext()){
    //                Row row1 = monthVO.next();
    //                i++;
    //                row1.setAttribute("Day", i);
    //            }
    //                                                            int i =days;
    //                                                Row row = monthVO.last();
    //                                                row.setAttribute("Day", i);
    //                                                while(monthVO.hasPrevious()){
    //                                                    Row row1 = monthVO.previous();
    //                                                    i--;
    //                                                    if(row1.getAttribute("Shift1")!=null && row1.getAttribute("Shift2")!=null && row1.getAttribute("Shift3")!=null){
    //                                                        if(row1.getAttribute("Shift1").toString().equals("OnLeave")){
    //                                                            row1.setAttribute("Temp", "OnLeave"); 
    //                                                        }
    //                                                    }
    //                                                    row1.setAttribute("Day", i);
    //                                                }
                
                
                                            int i =date22;
                    Row row = monthVO.first();
                    if(row.getAttribute("Shift1")!=null && row.getAttribute("Shift2")!=null && row.getAttribute("Shift3")!=null){
                        if(row.getAttribute("Shift1").toString().equals("On Leave")){
                            row.setAttribute("Temp", "On Leave"); 
                        }
                    }
                    row.setAttribute("Day", i);
                    while(monthVO.hasNext()){
                        Row row1 = monthVO.next();
                        i++;
                        if(row1.getAttribute("Shift1")!=null && row1.getAttribute("Shift2")!=null && row1.getAttribute("Shift3")!=null){
                            if(row1.getAttribute("Shift1").toString().equals("On Leave")){
                                row1.setAttribute("Temp", "On Leave"); 
                            }
                        }
                        row1.setAttribute("Day", i);
                    }
                
          
          
             
                
                //System.out.println("Query is:"+monthVO.getQuery());
               // System.out.println(monthVO.getEstimatedRowCount());
            }
            } catch (Exception e) {
                    e.printStackTrace();
            }
            return "success";
        }












    /**
     * Container's getter for PIAssignListVO1.
     * @return PIAssignListVO1
     */
    public PIAssignListVOImpl getPIAssignListVO1() {
        return (PIAssignListVOImpl)findViewObject("PIAssignListVO1");
    }
    public void insertMonthlyAllocationDetails(String piid){
                ViewObjectImpl piassign = getPIAssignSearch1();
                piassign.setApplyViewCriteriaName("PIAllocidSupIDVOCriteria");
                piassign.setWhereClause("PI_id"+piid);
                piassign.executeQuery();
       // System.out.println(piassign.getRowCount());
        RowSetIterator assignrsi = piassign.createRowSetIterator(null);
//        while(assignrsi.hasNext()){
//            Row assignrow=assignrsi.next();
//            
//            
//            
//        }
//       
        

        ViewObjectImpl pishiftdetails = (ViewObjectImpl)getPImonthlyWorkAssignVO1();
        RowSetIterator rsi=pishiftdetails.createRowSetIterator(null);
        while(rsi.hasNext()){
            Row row=rsi.next();
//            System.out.println(row.getAttribute("Shift1"));
//            System.out.println(row.getAttribute("Shift2"));
//            System.out.println(row.getAttribute("Shift3"));
            
        }
        
    
//        RowSetIterator shiftrsi=pishiftdetails.createRowSetIterator(null);
//        System.out.println(shiftrsi.getRowCount());
//        while(shiftrsi.hasNext()){
//        Row row=shiftrsi.next();
//////           
//            for(int i=0;i<pishiftdetails.getRowCount();i++) {
//                TempViewObjRowImpl temprow = (TempViewObjRowImpl)pishiftdetails.getRowAtRangeIndex(i);
//                System.out.println(temprow.getAttribute("Day"));
//                System.out.println(temprow.getAttribute("Shift1"));
//            }
            }
                
//                
//            
//                
//                
//            }
    public int getFridaysOnly(String stDate,String endDate){
        int friday = 0;
        try{
          
           
            
            DateFormat formatter1 = new SimpleDateFormat("E MMM dd HH:mm:ss Z yyyy");
            Date stDate0 = (Date)formatter1.parse(stDate);
           
            DateFormat formatter2 = new SimpleDateFormat("E MMM dd HH:mm:ss Z yyyy");
            Date endDate0 = (Date)formatter2.parse(endDate);
            Calendar cal = Calendar.getInstance();
            cal.setTime(stDate0);
           // String stDate1 = cal.get(Calendar.DATE) + "/" + (cal.get(Calendar.MONTH) + 1) + "/" +         cal.get(Calendar.YEAR) ;
            String stDate1 = cal.get(Calendar.YEAR) + "-" + (cal.get(Calendar.MONTH) + 1) + "-" + cal.get(Calendar.DATE);
            
            cal.setTime(endDate0);
            String endDate1 =  cal.get(Calendar.YEAR) + "-" + (cal.get(Calendar.MONTH) + 1) + "-" + cal.get(Calendar.DATE);//cal.get(Calendar.DATE) + "/" + (cal.get(Calendar.MONTH) + 1) + "/" +         cal.get(Calendar.YEAR);
            
            
        String qry  = "select datediff(day, -3, '"+endDate1.toString()+"' )/7-datediff(day, -2, '"+stDate1.toString()+"')/7 as friday";
        DBTransaction dbTrans = getDBConnection1();
        Statement st = dbTrans.createStatement(1);
        ResultSet rs = st.executeQuery(qry);
            
            if(rs.next()){
                String count = rs.getString("friday").toString();
                friday = Integer.parseInt(count);    
            }
        }
        catch(Exception e){
            e.printStackTrace();
        }
        return friday;
    }
    
    
    public String  insertMonthlyPIAllocation(String piid,Date date,int assignmonth,int assignyear ){
            int count=0;
            String msg="Success";
            String day="";

            try{
               
               
//        System.out.println(piid);
        ViewObjectImpl piassign = getPIAllocidSupIDVO1();
        piassign.setApplyViewCriteriaName("PIAllocidSupIDVOCriteria");
        piassign.setNamedWhereClauseParam("piid",piid);
        piassign.setNamedWhereClauseParam("pistatus","Assigned");
        System.out.println("PI Allocation Query is:::"+piassign.getQuery());
        piassign.executeQuery();
       

                if(piassign.getRowCount()!=0){
        RowSetIterator assignrsi = piassign.createRowSetIterator(null);
        Row allocidrow=assignrsi.first();
        String Allocid=allocidrow.getAttribute("Allocid").toString();
        String supid=allocidrow.getAttribute("AssignedTo").toString();
        ViewObjectImpl pishiftdetails = (ViewObjectImpl)getPImonthlyWorkAssignVO1();
        RowSetIterator rsi=pishiftdetails.createRowSetIterator(null);
        RowSetIterator rsi1=pishiftdetails.createRowSetIterator(null);
      
                  DBTransaction con = getDBConnection1();
                  msg =  isSelectedPIAllocation(rsi);
                  if(msg.equals("Failure")){
                    msg = "Failure";
//                    System.out.println("Mesage in IF"+msg);
                      return msg;
                  }
                  else{
                      while(rsi1.hasNext()){
                             Row row=rsi1.next();
                             row.setAttribute("PIid", piid);
                             row.setAttribute("AllocId", Allocid);
                             row.setAttribute("SupId", supid);
                             row.setAttribute("ActiveFlag", "Y");
                             row.setAttribute("CreatedBy", supid);
                             if(row.getAttribute("Day")!=null){
                             day=row.getAttribute("Day").toString();
                             }
                             String stringdate=assignyear+"-"+assignmonth+"-"+day;
                             SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
                             Date parsed = format.parse(stringdate);
                             java.sql.Date assignsql = new java.sql.Date(parsed.getTime());
//                             System.out.println(assignsql);
                             java.util.Date utilDate = new java.util.Date();
                             java.sql.Date currsqlDate = new java.sql.Date(utilDate.getTime());
                             row.setAttribute("CreatedDate", currsqlDate);
                             row.setAttribute("AssgnDate", assignsql);
                             if(row.getAttribute("Temp")!=null){
                             if(row.getAttribute("Temp").equals("On Leave")){
                                 row.setAttribute("Shift1", "On Leave");
                                 row.setAttribute("Shift2", "On Leave");
                                 row.setAttribute("Shift3", "On Leave");
                                 row.setAttribute("Shift1Flag", "N");
                                 row.setAttribute("Shift2Flag", "N");
                                 row.setAttribute("Shift3Flag", "N");
                             }
                             }
                             if((row.getAttribute("Shift1")!=null) ){
                                 if(row.getAttribute("Shift1").toString().length()>0){
                                    
                                     if(row.getAttribute("Shift1").toString().equals("OFF")){
                                         row.setAttribute("Shift1Flag", "N");
                                         row.setAttribute("Shift2Flag", "N");
                                         row.setAttribute("Shift3Flag", "N");
                                     }                                     else{
                                           row.setAttribute("Shift1Flag", "Y");
                                           row.setAttribute("Shift2Flag", "N");
                                           row.setAttribute("Shift3Flag", "N");
                                       }
                                   
                                     if(row.getAttribute("Shift1").toString().equals("RESERVED")){
                                        
                                         row.setAttribute("Shift1Flag", "N");
                                         row.setAttribute("Shift2Flag", "N");
                                         row.setAttribute("Shift3Flag", "N");
                                     }
                                     else if(!row.getAttribute("Shift1").toString().equals("OFF")) {
                                           row.setAttribute("Shift1Flag", "Y");
                                           row.setAttribute("Shift2Flag", "N");
                                           row.setAttribute("Shift3Flag", "N");
                                       }
                                 row.setAttribute("Shift", "1");
                                 String sctrzne=row.getAttribute("Shift1").toString();
                             if(!(row.getAttribute("Shift1").toString()).equals("On Leave")){
                                 if((row.getAttribute("Shift1").toString()).equals("ALL") || (row.getAttribute("Shift1").toString()).equals("RESERVED") || (row.getAttribute("Shift1").toString()).equals("OFF") ){
                                     row.setAttribute("SectorZone", row.getAttribute("Shift1").toString());
                                     row.setAttribute("SectorName", row.getAttribute("Shift1").toString());
                                     row.setAttribute("ZoneName",row.getAttribute("Shift1").toString());
                                 }else{
                                 String sector=sctrzne.substring(0,sctrzne.indexOf(" - "));
//                                 System.out.println(sector);
//                                 System.out.println(sctrzne.indexOf(" - "));
                                 String zone=sctrzne.substring(sctrzne.indexOf(" - ")+3, sctrzne.length());
//                                 System.out.println(zone);
                                 row.setAttribute("SectorZone", sctrzne);
                                 row.setAttribute("SectorName", sector);
                                 row.setAttribute("ZoneName",zone);
                                 }
                                     }else{
                                             row.setAttribute("SectorZone", "On Leave");
                                             row.setAttribute("SectorName", "On Leave");
                                             row.setAttribute("ZoneName","On Leave");
                                             row.setAttribute("Shift",0);
                                             row.setAttribute("Shift1Flag", "N");
                                             row.setAttribute("Shift2Flag", "N");
                                             row.setAttribute("Shift3Flag", "N");
                                         }
                                 }
                                 
                             }
//                          System.out.println(row.getAttribute("Shift2")+"-------");
                             if((row.getAttribute("Shift2")!=null)){
                                 if(row.getAttribute("Shift2").toString().length()>0){
                                     if(row.getAttribute("Shift2").toString().equals("OFF") ){
                                         row.setAttribute("Shift1Flag", "N");
                                         row.setAttribute("Shift2Flag", "N");
                                         row.setAttribute("Shift3Flag", "N");
                                     }   else{
                                        
                                         row.setAttribute("Shift2Flag", "Y");
                                         row.setAttribute("Shift1Flag", "N");
                                         row.setAttribute("Shift3Flag", "N");
                                     }
                              
                                     if(row.getAttribute("Shift2").toString().equals("RESERVED")){
                                         row.setAttribute("Shift1Flag", "N");
                                         row.setAttribute("Shift2Flag", "N");
                                         row.setAttribute("Shift3Flag", "N");
                                     }   else if(!row.getAttribute("Shift2").toString().equals("OFF")){
                                        
                                         row.setAttribute("Shift2Flag", "Y");
                                         row.setAttribute("Shift1Flag", "N");
                                         row.setAttribute("Shift3Flag", "N");
                                     }
                                 row.setAttribute("Shift", "2");
                                 String sctrzne=row.getAttribute("Shift2").toString();
//                                 System.out.println(sctrzne);
                             if(!(row.getAttribute("Shift2").toString()).equals("On Leave")){
                                         if((row.getAttribute("Shift2").toString()).equals("ALL") || (row.getAttribute("Shift2").toString()).equals("RESERVED") || (row.getAttribute("Shift2").toString()).equals("OFF") ){
                                             row.setAttribute("SectorZone", row.getAttribute("Shift2").toString());
                                             row.setAttribute("SectorName", row.getAttribute("Shift2").toString());
                                             row.setAttribute("ZoneName",row.getAttribute("Shift2").toString());
                                         }else{
                                 String sector=sctrzne.substring(0,sctrzne.indexOf(" - "));
//                                 System.out.println(sector);
//                                 System.out.println(sctrzne.indexOf(" - "));
                                 String zone=sctrzne.substring(sctrzne.indexOf(" - ")+3, sctrzne.length());
//                                 System.out.println(zone);
                                 row.setAttribute("SectorZone", sctrzne);
                                 row.setAttribute("SectorName", sector);
                                 row.setAttribute("ZoneName",zone);
                                         }
                                     }else{
                                             row.setAttribute("SectorZone", "On Leave");
                                             row.setAttribute("SectorName", "On Leave");
                                             row.setAttribute("ZoneName","On Leave");
                                             row.setAttribute("Shift",0);
                                             row.setAttribute("Shift1Flag", "N");
                                             row.setAttribute("Shift2Flag", "N");
                                             row.setAttribute("Shift3Flag", "N");
                                         }
                                 }
                             }
                             if((row.getAttribute("Shift3")!=null)){
                                 if(row.getAttribute("Shift3").toString().length()>0){
                                 row.setAttribute("Shift", "3");
                                 if(row.getAttribute("Shift3").toString().equals("OFF")){
                               
                                     row.setAttribute("Shift1Flag", "N");
                                     row.setAttribute("Shift2Flag", "N");
                                     row.setAttribute("Shift3Flag", "N");
                                 }                                else{
                                     row.setAttribute("Shift1Flag", "N");
                                     row.setAttribute("Shift2Flag", "N");
                                     row.setAttribute("Shift3Flag", "Y");
                                 }
                                 
                                if(row.getAttribute("Shift3").toString().equals("RESERVED")){
                                         row.setAttribute("Shift1Flag", "N");
                                         row.setAttribute("Shift2Flag", "N");
                                         row.setAttribute("Shift3Flag", "N");
                                     }             
                              
                                 else if(!row.getAttribute("Shift3").toString().equals("OFF")){
                                     row.setAttribute("Shift1Flag", "N");
                                     row.setAttribute("Shift2Flag", "N");
                                     row.setAttribute("Shift3Flag", "Y");
                                 }
                                 
                                 String sctrzne=row.getAttribute("Shift3").toString();
//                                 System.out.println(sctrzne);
                                if(!(row.getAttribute("Shift3").toString()).equals("On Leave")){
                                         if((row.getAttribute("Shift3").toString()).equals("ALL") || (row.getAttribute("Shift3").toString()).equals("RESERVED") || (row.getAttribute("Shift3").toString()).equals("OFF")){
                                             row.setAttribute("SectorZone", row.getAttribute("Shift3").toString());
                                             row.setAttribute("SectorName", row.getAttribute("Shift3").toString());
                                             row.setAttribute("ZoneName",row.getAttribute("Shift3").toString());
                                         }else{
                                 String sector=sctrzne.substring(0,sctrzne.indexOf(" - "));
//                                 System.out.println(sctrzne);
//                                 System.out.println(sector);
//                                 System.out.println(sctrzne.indexOf(" - "));
                                 String zone=sctrzne.substring(sctrzne.indexOf(" - ")+3, sctrzne.length());
//                                 System.out.println(zone);
                                 row.setAttribute("SectorZone", sctrzne);
                                 row.setAttribute("SectorName", sector);
                                 row.setAttribute("ZoneName",zone);
                                         }
                                     }else{
                                             row.setAttribute("SectorZone", "On Leave");
                                             row.setAttribute("SectorName", "On Leave");
                                             row.setAttribute("ZoneName","On Leave");
                                             row.setAttribute("Shift",0);
                                             row.setAttribute("Shift1Flag", "N");
                                             row.setAttribute("Shift2Flag", "N");
                                             row.setAttribute("Shift3Flag", "N");
                                         }
                                 }
                             }
                          
                          //Added
                          if(row.getAttribute("Shift1")==null && row.getAttribute("Shift2")==null && row.getAttribute("Shift3")==null ){
                              row.setAttribute("Shift", 0);
                          }
//                          
//                          else if(row.getAttribute("Shift1")!=null && row.getAttribute("Shift2")!=null && row.getAttribute("Shift3")!=null ){
//                              if(row.getAttribute("Shift1").equals("") && row.getAttribute("Shift2").equals("")&& row.getAttribute("Shift3").equals("") )
//                                          
//                          }
                          //Delete
                             if(row.getAttribute("Shift1")==null ){
                                 row.setAttribute("Shift1", "");
                                
                                
                             }
                             if( row.getAttribute("Shift2")==null ){
                               
                                 row.setAttribute("Shift2", "");
                                 
                                 
                             }
                             if( row.getAttribute("Shift3")==null ){
                                 
                                 row.setAttribute("Shift3", "");
                                 
                             }
                             if( row.getAttribute("SectorZone")==null ){
                                 
                                 row.setAttribute("SectorZone", "");
                             }
                             if( row.getAttribute("SectorName")==null ){
                                 
                                 row.setAttribute("SectorName", "");
                             }
                             if( row.getAttribute("ZoneName")==null ){
                                 
                                 row.setAttribute("ZoneName", "");
                             }
                             if( row.getAttribute("Shift")==null ){
                                 
                                 row.setAttribute("Shift", 0);
                             }
                             if( row.getAttribute("Shift1Flag")==null ){
                                 
                                 row.setAttribute("Shift1Flag", "");
                             }
                             if( row.getAttribute("Shift2Flag")==null ){
                                 
                                 row.setAttribute("Shift2Flag", "");
                             }
                             if( row.getAttribute("Shift3Flag")==null ){
                                 
                                 row.setAttribute("Shift3Flag", "");
                             }
                          String x = "0";
                          if(row.getAttribute("Shift") == null){
                             row.setAttribute("Shift",x);
//                             System.out.println("----------"+row.getAttribute("Shift"));
                         }
//                         RowSetIterator rsi12 = pishiftdetails.createRowSetIterator(null);
//                          while(rsi12.hasNext()) {
//                              Row r=rsi12.next();
//                              System.out.println("row details----------------------");
//                              System.out.println(r.getAttribute(1));
//                              System.out.println(r.getAttribute(2));
//                              System.out.println(r.getAttribute(3));
//                              System.out.println(r.getAttribute(4));
//                              System.out.println(r.getAttribute(5));
//                              System.out.println(r.getAttribute(6)); 
//                              System.out.println(r.getAttribute(7));
//                              System.out.println(r.getAttribute(8));
//                              System.out.println(r.getAttribute(9));
//                              System.out.println(r.getAttribute(10));
//                              System.out.println(r.getAttribute(11));
//                              System.out.println(r.getAttribute(12));
//                              System.out.println(r.getAttribute(13)); 
//                              System.out.println(r.getAttribute(14));
//                              System.out.println(r.getAttribute(15));
//                              System.out.println(r.getAttribute(16));
//                              System.out.println(r.getAttribute(17));
//                              System.out.println(r.getAttribute(18));
//                              System.out.println(r.getAttribute(19));
//                              System.out.println(r.getAttribute(20)); 
//                              System.out.println(r.getAttribute(21));
//                              System.out.println(r.getAttribute(22));
//                          }
                      //   (Alloc_Id,PI_id,Assgn_Date,Shift1_Flag,Shift2_Flag,Shift3_Flag,Sector_Zone,Shift1,Shift2,Shift3,Shift,Sector_Name,Zone_Name,Sup_Id,Active_Flag,CreatedBy,CreatedDate)                      
//                      String values = qry+ "('"+row.getAttribute("AllocId")+"','"+row.getAttribute("PIid")+"','"+row.getAttribute("AssgnDate")+"','"+row.getAttribute("Shift1Flag")+"','"+row.getAttribute("Shift2Flag")+"','"+row.getAttribute("Shift3Flag")+"','"+row.getAttribute("SectorZone")+"','"+row.getAttribute("Shift1")+"','"+row.getAttribute("Shift2")+"','"+row.getAttribute("Shift3")+"','"+row.getAttribute("Shift")+"','"+row.getAttribute("SectorName")+"','"+row.getAttribute("ZoneName")+"','"+row.getAttribute("SupId")+"','"+row.getAttribute("ActiveFlag")+"','"+row.getAttribute("CreatedBy")+"',' "+row.getAttribute("CreatedDate")+"'  )";
//                       System.out.println("values"+ values  );
//                      Statement st = con.createStatement(0);
//                      st.executeUpdate(values);
                       //  row.remove();
                                                                                                                                                                
                      }
                              
                     // con.commit();     
                      //con.closeTransaction();
                     
      this.getDBTransaction().commit();
                      
                                            pishiftdetails.executeEmptyRowSet();
                                             msg="Success";
//                      System.out.println("Mesage in Else"+msg);
                  }
              }
            }catch(Exception e){
               e.printStackTrace();
            }
        return msg;
        
    }
    public String isSelectedPIAllocation( RowSetIterator rsi){
        int i = 0;
        String msg = "";
        ArrayList list = new ArrayList();
        while(rsi.hasNext()){
            Row row=rsi.next();

            if(row.getAttribute("Shift1")==null && row.getAttribute("Shift2")==null && row.getAttribute("Shift3")==null ){
                           list.add(row);  
            }
            
           else if(row.getAttribute("Shift1")!=null && row.getAttribute("Shift2")!=null && row.getAttribute("Shift3")!=null ){
                if(row.getAttribute("Shift1").equals("") && row.getAttribute("Shift2").equals("")&& row.getAttribute("Shift3").equals("") )
                           list.add(row);  
            }
            i++;
        }
        if(list.size() == i){
//            System.out.println("Nodata Enterd");
            msg = "Failure";
        }
        return msg;
    }

    /**
     * Container's getter for PImonthlyWorkAssignVO1.
     * @return PImonthlyWorkAssignVO1
     */
    public ViewObjectImpl getPImonthlyWorkAssignVO1() {
        return (ViewObjectImpl)findViewObject("PImonthlyWorkAssignVO1");
    }


    /**
     * Container's getter for PIAllocidSupIDVO1.
     * @return PIAllocidSupIDVO1
     */
    public ViewObjectImpl getPIAllocidSupIDVO1() {
        return (ViewObjectImpl)findViewObject("PIAllocidSupIDVO1");
    }
    public void emptyPIworkVORowset(){
                callRollback();
                String loginuser="";
                setDisabled(false);
                ViewObjectImpl piwork=(ViewObjectImpl)getPImonthlyWorkAssignVO1();
                piwork.executeEmptyRowSet();
                ViewObjectImpl pinewwork=(ViewObjectImpl)getPIMonthlyAssignNewVO1();
                pinewwork.executeEmptyRowSet();
                SimpleDateFormat stf = new SimpleDateFormat("dd-MM-yyyy");
                java.util.Date curDate = new java.util.Date();
                curDate = new Date();
                try {
                    curDate = stf.parse(stf.format(curDate).toString());
                } catch (ParseException e) {
                    e.printStackTrace();
                }
                ViewObjectImpl getsupassignedpis=(ViewObjectImpl)getPIAssignListVO1();
                getsupassignedpis.setApplyViewCriteriaName("PIAssignListVOCriteria");
        //        FacesContext fctx = FacesContext.getCurrentInstance();
        //        ExternalContext ectx = fctx.getExternalContext();
        //        HttpSession userSession = (HttpSession) ectx.getSession(false);
                ADFContext adfctx = ADFContext.getCurrent();
                if(adfctx.getSessionScope().get("loggedinUserid").toString()!=null){
                  loginuser=adfctx.getSessionScope().get("loggedinUserid").toString();
                    this.getSession().getUserData().put("loginuser", loginuser);
                }else{
                    loginuser=null;
                }
                if(loginuser==null){
                    loginuser="Supervisor1";
                    this.getSession().getUserData().put("loginuser", loginuser);
                }
                System.out.println("Logged in User is:"+loginuser);
                getsupassignedpis.setNamedWhereClauseParam("supid", loginuser);
                getsupassignedpis.executeQuery();
        //        ViewObjectImpl getsupassignedsectorzones=(ViewObjectImpl)getSectorWorkVO1();
        ////        getsupassignedsectorzones.setApplyViewCriteriaName("SectorWorkVOCriteria");
        ////        getsupassignedsectorzones.setNamedWhereClauseParam("superid", loginuser);
        //         getsupassignedsectorzones.setWhereClause("sup_id = '"+loginuser+"' ");
        //        getsupassignedsectorzones.executeQuery();
        //        System.out.println(getsupassignedsectorzones.getRowCount());
                RowSetIterator rowsetIter = getsupassignedpis.createRowSetIterator(null);
                rowsetIter.reset();
                String selectpi = "";
               // while(rowsetIter.hasNext()){
                    Row row = rowsetIter.next();
                    
                    if(row!=null)
                    {
                    selectpi = row.getAttribute("PIid").toString();
                    ViewObjectImpl mastVO = (ViewObjectImpl)getPIUserMstUVO2().getViewObject();
                    mastVO.setWhereClause("User_Id='"+selectpi+"'");
                    mastVO.executeQuery();
                    Row rows=mastVO.next();
                    
                    if(rows.getAttribute("FirstName")!=null&& rows.getAttribute("LastName")!=null){
                    //UserName=rows.getAttribute("FirstName").toString();
                   String UserName=rows.getAttribute("FirstName").toString();
                    String userLastName=rows.getAttribute("LastName").toString();
                    //String fullname= UserName.concat(userLastName);
                    String fullname= UserName+ " " +userLastName;
                    AdfFacesContext.getCurrentInstance().getPageFlowScope().put("firstNamepiMonthlyAssign", fullname);
                    //this.setUserName(UserName);
                    }
                    
                    
               // }
                }
                else {
                        
                    }
        
    }

    public void setDisabled(boolean disabled) {
        this.disabled = disabled;
    }

    public boolean isDisabled() {
        return disabled;
    }
   
    public String saveTrainingCourseMaster(String courseCode,String coursesDuration,String courseName,String groupId,String activeFlag){
        ADFContext adfctx = ADFContext.getCurrent();
//        FacesContext facesContext = FacesContext.getCurrentInstance();
//        ExternalContext externalContext = facesContext.getExternalContext();
//        HttpSession httpSession = (HttpSession) externalContext.getSession(false);
        String sessionManager = adfctx.getSessionScope().get("loggedinUserid").toString();
        //String sessionManager = "Manager";
        System.out.println("AM");
        String result = "failure";
        System.out.println("save training Course Master");
        String existCourseName = validateGenTrainingCourseName(courseName,groupId);
        System.out.println("existCourseName :::"+existCourseName);
        if(existCourseName == null){
        
            ViewObjectImpl genTrainingCourseMasterPiTypeVO = (ViewObjectImpl)getGenTrainingCoursesMasterPiTypeVO1();
            
            RowSetIterator rs = genTrainingCourseMasterPiTypeVO.createRowSetIterator(null);
            //   Row row[]= rs.getFilteredRows("Allocid", oldAllocid );
            // System.out.println(row.length);
            rs.reset();
            String groupIdValue="0";
            while (rs.hasNext()) {
                Row row1 = rs.next();
                System.out.println("group id ::"+row1.getAttribute("Groupid"));
                System.out.println("group Name ::"+row1.getAttribute("GroupName"));
                if(groupId.equals(row1.getAttribute("GroupName"))){
                groupIdValue = row1.getAttribute("Groupid").toString();
                break;
                }
            }
        System.out.println("groupIdValue ::"+groupIdValue);
        Timestamp sqlCurDate = new java.sql.Timestamp(new java.util.Date().getTime());
        
        GenTrainingCoursesMasterVOImpl genTrainingMasterVO = (GenTrainingCoursesMasterVOImpl)getGenTrainingCoursesMasterVO1();
        Row genTrainingMasterVORow = genTrainingMasterVO.createRow();
        
        genTrainingMasterVORow.setAttribute("CourseDuration", coursesDuration);
        genTrainingMasterVORow.setAttribute("Coursename", courseName);
        genTrainingMasterVORow.setAttribute("Groupid", Integer.parseInt(groupIdValue));
        genTrainingMasterVORow.setAttribute("GroupName", groupId);
        genTrainingMasterVORow.setAttribute("ActiveFlag", activeFlag);
        genTrainingMasterVORow.setAttribute("CreatedBy",sessionManager);
        genTrainingMasterVORow.setAttribute("CreatedDate",sqlCurDate);
        genTrainingMasterVO.insertRow(genTrainingMasterVORow);
        
        System.out.println(this.getDBTransaction().isConnected());
            try{
            getDBTransaction().commit();
            }catch(Exception e){
                e.printStackTrace();
            }
            result = "success"; 
        getGenTrainingCoursesMasterVO1().executeQuery();
        }else{
            result = "exist"; 
        }
        return result;
    }
    
    public String editTrainingCourseMaster(String courseCode,String coursesDuration,String courseName,String groupId,String activeFlag){
        ADFContext adfctx = ADFContext.getCurrent();
        String sessionManager = adfctx.getSessionScope().get("loggedinUserid").toString();
        //String sessionManager = "Manager";
        String result = "failure";
        System.out.println("Edit Training Course in AM");
        
        
        ViewObjectImpl genTrainingCourseMasterPiTypeVO = (ViewObjectImpl)getGenTrainingCoursesMasterPiTypeVO1();
        
        RowSetIterator rs = genTrainingCourseMasterPiTypeVO.createRowSetIterator(null);
        //   Row row[]= rs.getFilteredRows("Allocid", oldAllocid );
        // System.out.println(row.length);
        rs.reset();
        String groupIdValue="0";
        while (rs.hasNext()) {
            Row row1 = rs.next();
            System.out.println("group id ::"+row1.getAttribute("Groupid"));
            System.out.println("group Name ::"+row1.getAttribute("GroupName"));
            if(groupId.equalsIgnoreCase(row1.getAttribute("GroupName").toString())){
            groupIdValue = row1.getAttribute("Groupid").toString();
            break;
            }
        }
        System.out.println("groupIdValue ::"+groupIdValue);
        
        String existCourseName = validateGenTrainingCourseName(courseName,groupId);
        System.out.println("existCourseName :::"+existCourseName);
        Timestamp sqlCurDate = new java.sql.Timestamp(new java.util.Date().getTime());
       
        GenTrainingCoursesMasterVOImpl genTrainingMasterVO = (GenTrainingCoursesMasterVOImpl)getGenTrainingCoursesMasterVO1();
        RowSetIterator genTrainingCourseRSIterator = genTrainingMasterVO.createRowSetIterator(null);
        genTrainingCourseRSIterator.reset();
        
             while (genTrainingCourseRSIterator.hasNext()) {
                    Row row1 = genTrainingCourseRSIterator.next();
                    String existCourseCode = row1.getAttribute("CourseCode").toString();
                    String existCourseNameVO = row1.getAttribute("Coursename").toString();
                    if (existCourseCode.equals(courseCode)) {
                            if(existCourseName == null){
                                System.out.println("existCourseCode :::"+existCourseCode);
                                String existCourseDuration = row1.getAttribute("CourseDuration").toString();
                                
                                String existGroupid = row1.getAttribute("Groupid").toString();
                                String existActiveFlag = row1.getAttribute("ActiveFlag").toString();
                                if(!existCourseDuration.equalsIgnoreCase(coursesDuration) || !existCourseNameVO.equalsIgnoreCase(courseName) || !existGroupid.equalsIgnoreCase(groupId) || !existActiveFlag.equalsIgnoreCase(existActiveFlag)){
                                    row1.setAttribute("CourseDuration", coursesDuration);
                                    row1.setAttribute("Coursename", courseName);
                                    row1.setAttribute("Groupid", Integer.parseInt(groupIdValue));
                                    row1.setAttribute("GroupName", groupId);
                                    row1.setAttribute("ActiveFlag", activeFlag);
                                    row1.setAttribute("UpdatedBy", sessionManager);
                                    row1.setAttribute("UpdatedDate", sqlCurDate);
                                    System.out.println(this.getDBTransaction().isConnected());
                                        try {
                                            getDBTransaction().commit();
                                            result = "success";
                                            break;
                                        } catch (Exception e) {
                                            e.printStackTrace();
                                        }
                                   
                                }else{
                                    result = "same";
                                    break;
                                }
                            }else if(existCourseName.equalsIgnoreCase(existCourseNameVO)){
                                System.out.println("existCourseCode :::"+existCourseCode);
                                String existCourseDuration = row1.getAttribute("CourseDuration").toString();
                                
                                String existGroupName = row1.getAttribute("GroupName").toString();
                                String existActiveFlag = row1.getAttribute("ActiveFlag").toString();
                                    if(!existCourseDuration.equalsIgnoreCase(coursesDuration) || !existCourseNameVO.equalsIgnoreCase(courseName) || !existGroupName.equalsIgnoreCase(groupId) || !existActiveFlag.equalsIgnoreCase(activeFlag)){
                                        row1.setAttribute("CourseDuration", coursesDuration);
                                        row1.setAttribute("Coursename", courseName);
                                        row1.setAttribute("Groupid", Integer.parseInt(groupIdValue));
                                        row1.setAttribute("GroupName", groupId);
                                        row1.setAttribute("ActiveFlag", activeFlag);
                                        row1.setAttribute("UpdatedBy", sessionManager);
                                        row1.setAttribute("UpdatedDate", sqlCurDate);
                                        System.out.println(this.getDBTransaction().isConnected());
                                            try {
                                                this.getDBTransaction().commit();
                                                result = "success";
                                                break;
                                            } catch (Exception e) {
                                                e.printStackTrace();
                                            }
                                        
                                        }else{
                                            result = "same";
                                            break;
                                        }
                                    }
                            } else{
                                 result = "exist";
                            }
                        }
         getGenTrainingCoursesMasterVO1().executeQuery();
        System.out.println("result = \"success\"; in Edit AM"+result);
        return result;
    }
    
    private String validateGenTrainingCourseName(String courseName,String groupId){
        String existCourseName = null;
        ViewObjectImpl genTrainingMasterValidateVO = (ViewObjectImpl)getGenTrainingCourseNameValidateVO1();
        genTrainingMasterValidateVO.setApplyViewCriteriaName("GenTrainingCourseNameValidateVOCriteria");
        genTrainingMasterValidateVO.setNamedWhereClauseParam("CourseName",courseName);
        genTrainingMasterValidateVO.setNamedWhereClauseParam("GroupName",groupId);
        genTrainingMasterValidateVO.executeQuery();
        int rowcount = genTrainingMasterValidateVO.getRowCount();
        RowSetIterator rs = (RowSetIterator)genTrainingMasterValidateVO.createRowSetIterator(null);
        rs.reset();
        System.out.println(rs.getRowCount());
            while(rs.hasNext()) {
              Row row = rs.next();
                existCourseName = row.getAttribute("Coursename").toString();
                System.out.println("Course Name Exist from Validate VO ::"+existCourseName);
                
            }
            
        return existCourseName;
    }
    
    public String getPiTypeGroupName(String selectedGroupPiid){
        String selectedGroupNamePiid = "";
         ViewObjectImpl genTrainingMasterPiTypeVO = (ViewObjectImpl)getGenTrainingCoursesMasterPiTypeVO1();
        RowSetIterator genTrainingCoursePiTypeRSIterator = genTrainingMasterPiTypeVO.createRowSetIterator(null);
        genTrainingCoursePiTypeRSIterator.reset();
        int count = 0;
             while (genTrainingCoursePiTypeRSIterator.hasNext()) {
                 Row row1 = genTrainingCoursePiTypeRSIterator.next();
                 String groupPiName = row1.getAttribute("GroupName").toString();
                 
                 if(groupPiName.equalsIgnoreCase(selectedGroupPiid)){
                     System.out.println("success value"+groupPiName);
                     //selectedGroupNamePiid = groupPiName;
                     selectedGroupNamePiid = Integer.toString(count);
                    break;
                 }
                 ++count;
             }
        
        //return selectedGroupNamePiid;
          return Integer.toString(count);
    }

    /**
     * Container's getter for GenTrainingCoursesMasterPiTypeVO1.
     * @return GenTrainingCoursesMasterPiTypeVO1
     */
    public ViewObjectImpl getGenTrainingCoursesMasterPiTypeVO1() {
        return (ViewObjectImpl)findViewObject("GenTrainingCoursesMasterPiTypeVO1");
    }

    /**
     * Container's getter for GenTrainingCourseNameValidateVO1.
     * @return GenTrainingCourseNameValidateVO1
     */
    public ViewObjectImpl getGenTrainingCourseNameValidateVO1() {
        return (ViewObjectImpl)findViewObject("GenTrainingCourseNameValidateVO1");
    }

    /**
     * Container's getter for GenTrainingCoursesMasterVO1.
     * @return GenTrainingCoursesMasterVO1
     */
    public ViewObjectImpl getGenTrainingCoursesMasterVO1() {
        return (ViewObjectImpl)findViewObject("GenTrainingCoursesMasterVO1");
    }
    /**
     * Container's getter for piLeaveApprolVO1.
     * @return piLeaveApprolVO1
     */
    public piLeaveApprolVOImpl getpiLeaveApprolVO1() {
        return (piLeaveApprolVOImpl)findViewObject("piLeaveApprolVO1");
    }

    /**
     * Container's getter for leavestatusLOV1.
     * @return leavestatusLOV1
     */
    public ViewObjectImpl getleavestatusLOV1() {
        return (ViewObjectImpl)findViewObject("leavestatusLOV1");
    }

    /**
     * Container's getter for leaveApproveVO1.
     * @return leaveApproveVO1
     */
    public ViewObjectImpl getleaveApproveVO1() {
        return (ViewObjectImpl)findViewObject("leaveApproveVO1");
    }
    public void resetWorkAssignVO(){
        ViewObjectImpl voa=(ViewObjectImpl)getPImonthlyWorkAssignVO1();
        voa.clearCache();
        voa.executeEmptyRowSet();
    }
    
    
	public void piDailyAssign(Date dailyAssignDate){
        try{  
            java.sql.Date dt = new java.sql.Date(dailyAssignDate.getTime());
        String loginuser="";
        ADFContext adfctx = ADFContext.getCurrent();
               if(adfctx.getSessionScope().get("loggedinUserid")!=null){
                 loginuser=adfctx.getSessionScope().get("loggedinUserid").toString();
                   this.getSession().getUserData().put("loginuser", loginuser);
               }else{
                   loginuser=null;
               }
               if(loginuser==null){
                   loginuser="Supervisor1";
                   this.getSession().getUserData().put("loginuser", loginuser);
               }
               System.out.println("Logged in User is:"+loginuser);
                ViewObjectImpl getsupassignedsectorzones=(ViewObjectImpl)getSectorWorkVO1();
                //getsupassignedsectorzones.setApplyViewCriteriaName("SectorWorkVOCriteria");
                getsupassignedsectorzones.setNamedWhereClauseParam("superid", loginuser);
        getsupassignedsectorzones.executeQuery();
        System.out.println(getsupassignedsectorzones.getQuery());
        System.out.println(getsupassignedsectorzones.getRowCount());
        
        ViewObjectImpl dailyAssignVO = (ViewObjectImpl)getPiDailyWorkAssignVO1();
            System.out.println(dailyAssignVO.getRowCount());
        dailyAssignVO.setApplyViewCriteriaName("PIDailyAssignVOCriteria");
        //java.sql.Date dt = new java.sql.Date(dailyAssignDate.getTime());
        dailyAssignVO.setNamedWhereClauseParam("dailyAssignDate", dt);
            dailyAssignVO.setNamedWhereClauseParam("supervisorid",loginuser);
        System.out.println(dailyAssignVO.getQuery());
        //System.out.println("Dailyyyyy ---------"+dailyAssignVO.getEstimatedRowCount());
        dailyAssignVO.executeQuery();
        
            ViewObjectImpl getsupassignedpis=(ViewObjectImpl)getPIAssignListVO1();
            getsupassignedpis.setApplyViewCriteriaName("PIAssignListVOCriteria");
         
           
            if(adfctx.getSessionScope().get("loggedinUserid").toString()!=null){
              loginuser=adfctx.getSessionScope().get("loggedinUserid").toString();
                this.getSession().getUserData().put("loginuser", loginuser);
            }else{
                loginuser=null;
            }
            if(loginuser==null){
                loginuser="Supervisor1";
                this.getSession().getUserData().put("loginuser", loginuser);
            }
            System.out.println("Logged in User is:"+loginuser);
            getsupassignedpis.setNamedWhereClauseParam("supid", loginuser);
            getsupassignedpis.setNamedWhereClauseParam("currentDate", dt);
            System.out.println("PIAssgnList vo is:::"+getsupassignedpis.getQuery());
            getsupassignedpis.executeQuery();
            RowSetIterator rsid=getsupassignedpis.createRowSetIterator(null);
            ViewObjectImpl piassign = getPIAllocidSupIDVO1();
//            piassign.setApplyViewCriteriaName("PIAllocidSupIDVOCriteria");
//            piassign.setNamedWhereClauseParam("piid",piid);
//            piassign.setNamedWhereClauseParam("pistatus","Assigned");
//            piassign.executeQuery();
            

                    //if(piassign.getRowCount()!=0){
                   Calendar c2 = Calendar.getInstance();
                  java.sql.Timestamp currdate = new java.sql.Timestamp(c2.getTime().getTime());
            while(rsid.hasNext()){
                Row rowtemp= rsid.next();
                piassign.setApplyViewCriteriaName("PIAllocidSupIDVOCriteria");
                piassign.setNamedWhereClauseParam("piid",rowtemp.getAttribute("PIid").toString());
                piassign.setNamedWhereClauseParam("pistatus","Assigned");
                piassign.executeQuery();
            RowQualifier rq =
                      new RowQualifier("PIid= '" + rowtemp.getAttribute("PIid").toString() +
                                       "' AND AssgnDate= '" +
                                       dt + "'");

                    Row[] rows = dailyAssignVO.getFilteredRows(rq);
                if(rows.length==0){                    
                    RowSetIterator assignrsi = piassign.createRowSetIterator(null);
                    Row allocidrow=assignrsi.first();
                    String Allocid=allocidrow.getAttribute("Allocid").toString();
                    String supid=allocidrow.getAttribute("AssignedTo").toString();
                    
                    Row rowdaily = dailyAssignVO.createRow();
                    rowdaily.setNewRowState(Row.STATUS_INITIALIZED);
                    rowdaily.setAttribute("PIid", rowtemp.getAttribute("PIid").toString());
                    rowdaily.setAttribute("AssgnDate", dt);
                    rowdaily.setAttribute("AllocId", Allocid);
                    rowdaily.setAttribute("SupId", supid);
                    rowdaily.setAttribute("ActiveFlag", "Y");
                    rowdaily.setAttribute("CreatedBy", supid);
                    rowdaily.setAttribute("CreatedDate", currdate);
                    dailyAssignVO.insertRow(rowdaily);
                }
          /* commented by karim
           * if(rowdaily!=null)
                    {

                        if((rowdaily.getAttribute("Shift1")!=null) ){
                            if(rowdaily.getAttribute("Shift1").toString().length()>0){
                               
                                if(rowdaily.getAttribute("Shift1").toString().equals("OFF")){
                                    rowdaily.setAttribute("Shift1Flag", "N");
                                    rowdaily.setAttribute("Shift2Flag", "N");
                                    rowdaily.setAttribute("Shift3Flag", "N");
                                }                                     else{
                                      rowdaily.setAttribute("Shift1Flag", "Y");
                                      rowdaily.setAttribute("Shift2Flag", "N");
                                      rowdaily.setAttribute("Shift3Flag", "N");
                                  }
                              
                                if(rowdaily.getAttribute("Shift1").toString().equals("RESERVED")){
                                   
                                    rowdaily.setAttribute("Shift1Flag", "N");
                                    rowdaily.setAttribute("Shift2Flag", "N");
                                    rowdaily.setAttribute("Shift3Flag", "N");
                                }
                                else if(!rowdaily.getAttribute("Shift1").toString().equals("OFF")) {
                                      rowdaily.setAttribute("Shift1Flag", "Y");
                                      rowdaily.setAttribute("Shift2Flag", "N");
                                      rowdaily.setAttribute("Shift3Flag", "N");
                                  }
                            rowdaily.setAttribute("Shift", "1");
                            String sctrzne=rowdaily.getAttribute("Shift1").toString();
                        if(!(rowdaily.getAttribute("Shift1").toString()).equals("On Leave")){
                            if((rowdaily.getAttribute("Shift1").toString()).equals("ALL") || (rowdaily.getAttribute("Shift1").toString()).equals("RESERVED") || (rowdaily.getAttribute("Shift1").toString()).equals("OFF") ){
                                rowdaily.setAttribute("SectorZone", rowdaily.getAttribute("Shift1").toString());
                                rowdaily.setAttribute("SectorName", rowdaily.getAttribute("Shift1").toString());
                                rowdaily.setAttribute("ZoneName",rowdaily.getAttribute("Shift1").toString());
                            }else{
                            String sector=sctrzne.substring(0,sctrzne.indexOf(" - "));
                        //                                 System.out.println(sector);
                        //                                 System.out.println(sctrzne.indexOf(" - "));
                            String zone=sctrzne.substring(sctrzne.indexOf(" - ")+3, sctrzne.length());
                        //                                 System.out.println(zone);
                            rowdaily.setAttribute("SectorZone", sctrzne);
                            rowdaily.setAttribute("SectorName", sector);
                            rowdaily.setAttribute("ZoneName",zone);
                            }
                                }else{
                                        rowdaily.setAttribute("SectorZone", "On Leave");
                                        rowdaily.setAttribute("SectorName", "On Leave");
                                        rowdaily.setAttribute("ZoneName","On Leave");
                                        rowdaily.setAttribute("Shift",0);
                                        rowdaily.setAttribute("Shift1Flag", "N");
                                        rowdaily.setAttribute("Shift2Flag", "N");
                                        rowdaily.setAttribute("Shift3Flag", "N");
                                    }
                            }
                            
                        }
                        //                          System.out.println(rowdaily.getAttribute("Shift2")+"-------");
                        if((rowdaily.getAttribute("Shift2")!=null)){
                            if(rowdaily.getAttribute("Shift2").toString().length()>0){
                                if(rowdaily.getAttribute("Shift2").toString().equals("OFF") ){
                                    rowdaily.setAttribute("Shift1Flag", "N");
                                    rowdaily.setAttribute("Shift2Flag", "N");
                                    rowdaily.setAttribute("Shift3Flag", "N");
                                }   else{
                                   
                                    rowdaily.setAttribute("Shift2Flag", "Y");
                                    rowdaily.setAttribute("Shift1Flag", "N");
                                    rowdaily.setAttribute("Shift3Flag", "N");
                                }
                         
                                if(rowdaily.getAttribute("Shift2").toString().equals("RESERVED")){
                                    rowdaily.setAttribute("Shift1Flag", "N");
                                    rowdaily.setAttribute("Shift2Flag", "N");
                                    rowdaily.setAttribute("Shift3Flag", "N");
                                }   else if(!rowdaily.getAttribute("Shift2").toString().equals("OFF")){
                                   
                                    rowdaily.setAttribute("Shift2Flag", "Y");
                                    rowdaily.setAttribute("Shift1Flag", "N");
                                    rowdaily.setAttribute("Shift3Flag", "N");
                                }
                            rowdaily.setAttribute("Shift", "2");
                            String sctrzne=rowdaily.getAttribute("Shift2").toString();
                        //                                 System.out.println(sctrzne);
                        if(!(rowdaily.getAttribute("Shift2").toString()).equals("On Leave")){
                                    if((rowdaily.getAttribute("Shift2").toString()).equals("ALL") || (rowdaily.getAttribute("Shift2").toString()).equals("RESERVED") || (rowdaily.getAttribute("Shift2").toString()).equals("OFF") ){
                                        rowdaily.setAttribute("SectorZone", rowdaily.getAttribute("Shift2").toString());
                                        rowdaily.setAttribute("SectorName", rowdaily.getAttribute("Shift2").toString());
                                        rowdaily.setAttribute("ZoneName",rowdaily.getAttribute("Shift2").toString());
                                    }else{
                            String sector=sctrzne.substring(0,sctrzne.indexOf(" - "));
                        //                                 System.out.println(sector);
                        //                                 System.out.println(sctrzne.indexOf(" - "));
                            String zone=sctrzne.substring(sctrzne.indexOf(" - ")+3, sctrzne.length());
                        //                                 System.out.println(zone);
                            rowdaily.setAttribute("SectorZone", sctrzne);
                            rowdaily.setAttribute("SectorName", sector);
                            rowdaily.setAttribute("ZoneName",zone);
                                    }
                                }else{
                                        rowdaily.setAttribute("SectorZone", "On Leave");
                                        rowdaily.setAttribute("SectorName", "On Leave");
                                        rowdaily.setAttribute("ZoneName","On Leave");
                                        rowdaily.setAttribute("Shift",0);
                                        rowdaily.setAttribute("Shift1Flag", "N");
                                        rowdaily.setAttribute("Shift2Flag", "N");
                                        rowdaily.setAttribute("Shift3Flag", "N");
                                    }
                            }
                        }
                        if((rowdaily.getAttribute("Shift3")!=null)){
                            if(rowdaily.getAttribute("Shift3").toString().length()>0){
                            rowdaily.setAttribute("Shift", "3");
                            if(rowdaily.getAttribute("Shift3").toString().equals("OFF")){
                          
                                rowdaily.setAttribute("Shift1Flag", "N");
                                rowdaily.setAttribute("Shift2Flag", "N");
                                rowdaily.setAttribute("Shift3Flag", "N");
                            }                                else{
                                rowdaily.setAttribute("Shift1Flag", "N");
                                rowdaily.setAttribute("Shift2Flag", "N");
                                rowdaily.setAttribute("Shift3Flag", "Y");
                            }
                            
                           if(rowdaily.getAttribute("Shift3").toString().equals("RESERVED")){
                                    rowdaily.setAttribute("Shift1Flag", "N");
                                    rowdaily.setAttribute("Shift2Flag", "N");
                                    rowdaily.setAttribute("Shift3Flag", "N");
                                }             
                         
                            else if(!rowdaily.getAttribute("Shift3").toString().equals("OFF")){
                                rowdaily.setAttribute("Shift1Flag", "N");
                                rowdaily.setAttribute("Shift2Flag", "N");
                                rowdaily.setAttribute("Shift3Flag", "Y");
                            }
                            
                            String sctrzne=rowdaily.getAttribute("Shift3").toString();
                        //                                 System.out.println(sctrzne);
                           if(!(rowdaily.getAttribute("Shift3").toString()).equals("On Leave")){
                                    if((rowdaily.getAttribute("Shift3").toString()).equals("ALL") || (rowdaily.getAttribute("Shift3").toString()).equals("RESERVED") || (rowdaily.getAttribute("Shift3").toString()).equals("OFF")){
                                        rowdaily.setAttribute("SectorZone", rowdaily.getAttribute("Shift3").toString());
                                        rowdaily.setAttribute("SectorName", rowdaily.getAttribute("Shift3").toString());
                                        rowdaily.setAttribute("ZoneName",rowdaily.getAttribute("Shift3").toString());
                                    }else{
                            String sector=sctrzne.substring(0,sctrzne.indexOf(" - "));
                        //                                 System.out.println(sctrzne);
                        //                                 System.out.println(sector);
                        //                                 System.out.println(sctrzne.indexOf(" - "));
                            String zone=sctrzne.substring(sctrzne.indexOf(" - ")+3, sctrzne.length());
                        //                                 System.out.println(zone);
                            rowdaily.setAttribute("SectorZone", sctrzne);
                            rowdaily.setAttribute("SectorName", sector);
                            rowdaily.setAttribute("ZoneName",zone);
                                    }
                                }else{
                                        rowdaily.setAttribute("SectorZone", "On Leave");
                                        rowdaily.setAttribute("SectorName", "On Leave");
                                        rowdaily.setAttribute("ZoneName","On Leave");
                                        rowdaily.setAttribute("Shift",0);
                                        rowdaily.setAttribute("Shift1Flag", "N");
                                        rowdaily.setAttribute("Shift2Flag", "N");
                                        rowdaily.setAttribute("Shift3Flag", "N");
                                    }
                            }
                        }
                    
                    //Added
                    if(rowdaily.getAttribute("Shift1")==null && rowdaily.getAttribute("Shift2")==null && rowdaily.getAttribute("Shift3")==null ){
                     rowdaily.setAttribute("Shift", 0);
                    }
                    
                    if(rowdaily.getAttribute("Shift1")==null ){
                       // rowdaily.setAttribute("Shift1", "");
                       
                       
                    }
                    if( rowdaily.getAttribute("Shift2")==null ){
                      
                       // rowdaily.setAttribute("Shift2", "");
                        
                        
                    }
                    if( rowdaily.getAttribute("Shift3")==null ){
                        
                        //rowdaily.setAttribute("Shift3", "");
                        
                    }
                    if( rowdaily.getAttribute("SectorZone")==null ){
                        
                        rowdaily.setAttribute("SectorZone", "");
                    }
                    if( rowdaily.getAttribute("SectorName")==null ){
                        
                        rowdaily.setAttribute("SectorName", "");
                    }
                    if( rowdaily.getAttribute("ZoneName")==null ){
                        
                        rowdaily.setAttribute("ZoneName", "");
                    }
                    if( rowdaily.getAttribute("Shift")==null ){
                        
                        rowdaily.setAttribute("Shift", 0);
                    }
                    if( rowdaily.getAttribute("Shift1Flag")==null ){
                        
                        rowdaily.setAttribute("Shift1Flag", "");
                    }
                    if( rowdaily.getAttribute("Shift2Flag")==null ){
                        
                        rowdaily.setAttribute("Shift2Flag", "");
                    }
                    if( rowdaily.getAttribute("Shift3Flag")==null ){
                        
                        rowdaily.setAttribute("Shift3Flag", "");
                    }
                    String x = "0";
                    if(rowdaily.getAttribute("Shift") == null){
                    rowdaily.setAttribute("Shift",x);
                    
                    }
                       rowdaily.setAttribute("UpdatedBy", rowdaily.getAttribute("SupId"));
                       rowdaily.setAttribute("UpdatedDate", dt);
                    } */
//                    newrow.setAttribute("PIid", rowtemp.getAttribute("PIid").toString());
//                    newrow.setAttribute("AssgnDate", dt);
//                    newrow.setAttribute("AllocId", Allocid);
//                    newrow.setAttribute("SupId", supid);
//                    newrow.setAttribute("ActiveFlag", "Y");
//                    newrow.setAttribute("CreatedBy", supid);
//                    newrow.setAttribute("ZoneName", "");
//                    newrow.setAttribute("SectorName", "");
//                    newrow.setAttribute("SectorZone", "");
//                    newrow.setAttribute("Shift", 0);
//                    newrow.setAttribute("Shift1Flag", "N");
//                    newrow.setAttribute("Shift2Flag", "N");
//                    newrow.setAttribute("Shift3Flag", "N");
//                    newrow.setAttribute("UpdatedBy", supid);
//                    java.util.Date utilDate = new java.util.Date();
//                    java.sql.Date currsqlDate = new java.sql.Date(utilDate.getTime());
//                    newrow.setAttribute("CreatedDate", currsqlDate);
//                    newrow.setAttribute("UpdatedDate", currsqlDate);
                    
                   
                   
                    
                              // this.getDBTransaction().commit();
            }
         /* commented by karim
          * String dailyAssignPI = ""; 
                       boolean saveFlag = false; 
                       ViewObjectImpl leaveCheckVO = (ViewObjectImpl)getpiDailyDeployLeaveCheckVO1(); //For Onleave check 
                       ViewObjectImpl attendanceCheckVO = (ViewObjectImpl)getPIAttendanceStCheckVO1();  //For attendance check 
                       
                       if (dailyAssignVO.getEstimatedRowCount() == 1) { 
                       //    while (dailyAssignVO.hasNext()) { 
                           Row roD = dailyAssignVO.getCurrentRow(); 
                               if (roD.getAttribute("PIid") != null) { 
                                   dailyAssignPI = roD.getAttribute("PIid").toString(); 
                                   System.out.println("Daily Assign PI's :"+dailyAssignPI); 
                                   
                                   leaveCheckVO.setApplyViewCriteriaName("piDailyDeployLeaveCheckVOCriteria"); 
                                   java.sql.Date dt1 = new java.sql.Date(dailyAssignDate.getTime()); 
                                   leaveCheckVO.setNamedWhereClauseParam("assigndate", dt1); 
                                   leaveCheckVO.setNamedWhereClauseParam("piid", dailyAssignPI); 
                                   System.out.println(leaveCheckVO.getQuery()); 
                                   System.out.println(leaveCheckVO.getEstimatedRowCount()); 
                                   leaveCheckVO.executeQuery(); 
                                   if(leaveCheckVO.getEstimatedRowCount()>=1){ 
                                       roD.setAttribute("leaveDataTemp", "OnLeave"); 
                                       saveFlag = true; 
                                   }else{ 
                                       attendanceCheckVO.setApplyViewCriteriaName("PIAttendanceStCheckVOCriteria"); 
                                       java.sql.Date dt2 = new java.sql.Date(dailyAssignDate.getTime()); 
                                       attendanceCheckVO.setNamedWhereClauseParam("dailyAssignDate", dt2); 
                                       attendanceCheckVO.setNamedWhereClauseParam("PIID", dailyAssignPI); 
                                       System.out.println(attendanceCheckVO.getQuery()); 
                                       System.out.println(attendanceCheckVO.getEstimatedRowCount()); 
                                       attendanceCheckVO.executeQuery(); 
                                           if(attendanceCheckVO.getEstimatedRowCount()>=1){ 
                                               Row ro = attendanceCheckVO.getRowAtRangeIndex(0); 
                                               roD.setAttribute("leaveDataTemp", ro.getAttribute("Attendance").toString()); 
                                               saveFlag = true; 
                                           } 
                                   } 
                               } 
                    //       } 
                       }else{

           
//System.out.println(first.getAttribute("PIid").toString()) ;  
RowSetIterator rsidd=dailyAssignVO.createRowSetIterator(null);
                while (rsidd.hasNext()) { 
                           Row roD = rsidd.next(); 
                             if (roD.getAttribute("PIid") != null) { 
                                   dailyAssignPI = roD.getAttribute("PIid").toString(); 
                                   System.out.println("Daily Assign PI's :"+dailyAssignPI); 
                             }
                                   
                                   leaveCheckVO.setApplyViewCriteriaName("piDailyDeployLeaveCheckVOCriteria"); 
                                   java.sql.Date dt1 = new java.sql.Date(dailyAssignDate.getTime()); 
                                   leaveCheckVO.setNamedWhereClauseParam("assigndate", dt1); 
                                   leaveCheckVO.setNamedWhereClauseParam("piid", dailyAssignPI); 
                                   //System.out.println(leaveCheckVO.getQuery()); 
                                  // System.out.println(leaveCheckVO.getEstimatedRowCount()); 
                                   leaveCheckVO.executeQuery(); 
                                   if(leaveCheckVO.getEstimatedRowCount()>=1){ 
                                       roD.setAttribute("leaveDataTemp", "OnLeave"); 
                                       saveFlag = true; 
                                   }else{ 
                                       attendanceCheckVO.setApplyViewCriteriaName("PIAttendanceStCheckVOCriteria"); 
                                       java.sql.Date dt2 = new java.sql.Date(dailyAssignDate.getTime()); 
                                       attendanceCheckVO.setNamedWhereClauseParam("dailyAssignDate", dt2); 
                                       attendanceCheckVO.setNamedWhereClauseParam("PIID", dailyAssignPI); 
                                      // System.out.println(attendanceCheckVO.getQuery()); 
                                      // System.out.println(attendanceCheckVO.getEstimatedRowCount()); 
                                       attendanceCheckVO.executeQuery(); 
                                           if(attendanceCheckVO.getEstimatedRowCount()>=1){ 
                                               Row ro = attendanceCheckVO.getRowAtRangeIndex(0); 
                                               System.out.println(ro.getAttribute("Attendance"));
                                               roD.setAttribute("leaveDataTemp", ro.getAttribute("Attendance").toString()); 
                                               saveFlag = true; 
                                        } 
                                   } 
                               } 
                           } 
                       

        if( saveFlag == true){
            //this.getDBTransaction().commit();
        } */
        }catch(Exception e){
            e.printStackTrace();
        }
    }


    /**
     * Container's getter for piDailyDeployLeaveCheckVO1.
     * @return piDailyDeployLeaveCheckVO1
     */
    public ViewObjectImpl getpiDailyDeployLeaveCheckVO1() {
        return (ViewObjectImpl)findViewObject("piDailyDeployLeaveCheckVO1");
    }
    /**
     * Container's getter for leavetypeLOV1.
     * @return leavetypeLOV1
     */
    public ViewObjectImpl getleavetypeLOV1() {
        return (ViewObjectImpl)findViewObject("leavetypeLOV1");
    }
    /**
     * Container's getter for PIAttendanceStCheckVO1.
     * @return PIAttendanceStCheckVO1
     */
    public ViewObjectImpl getPIAttendanceStCheckVO1() {
        return (ViewObjectImpl)findViewObject("PIAttendanceStCheckVO1");
    }
    public String piDailyUnassign(){
        String unassingpi="";
        ViewObjectImpl unassign=(ViewObjectImpl)getPiDailyWorkAssignVO1();
        Row row=unassign.getCurrentRow();
        if( row.getAttribute("PIid")!=null){
        unassingpi = row.getAttribute("PIid").toString();
        }
        unassign.setApplyViewCriteriaName("PImonthlyWorkUnAssignVOCriteria1");
        unassign.setNamedWhereClauseParam("unassignpiid", unassingpi);
        unassign.executeQuery();
        RowSetIterator rsid=unassign.createRowSetIterator(null);
        while(rsid.hasNext()){
              Row row1=rsid.next();
             row1.setAttribute("ActiveFlag","N");
        }
       ViewObjectImpl pisupallocation=(ViewObjectImpl)getPIAllocToSpvsrGrpUVO1();
        pisupallocation.setWhereClause("PI_id='"+unassingpi+"' and status='Assigned'");
        pisupallocation.executeQuery();
        Row pisupallocrow=pisupallocation.first();
        if(pisupallocrow!=null){
        pisupallocrow.setAttribute("status", "UnAssigned");
        }
      ViewObjectImpl genusrpi=(ViewObjectImpl)getPIUserMstUVO1();
        genusrpi.setWhereClause("User_Id='"+unassingpi+"'");
        genusrpi.executeQuery();
        Row genusrpirow=genusrpi.first();
        genusrpirow.setAttribute("ManagerId",null);
        try{
        this.getDBTransaction().commit();
        }
        catch(Exception e){
         e.printStackTrace();   
        }
        unassign.executeQuery();
        return "success"; 
        
    }
    /**
     * Container's getter for PITrainingActivityUVO1.
     * @return PITrainingActivityUVO1
     */
    public ViewObjectImpl getPITrainingActivityUVO1() {
        return (ViewObjectImpl)findViewObject("PITrainingActivityUVO1");
    }

    /**
     * Container's getter for GenCoursesLOVVO1.
     * @return GenCoursesLOVVO1
     */
    public ViewObjectImpl getGenCoursesLOVVO1() {
        return (ViewObjectImpl)findViewObject("GenCoursesLOVVO1");
    }

    /**
     * Container's getter for GenPINumberLOVVO1.
     * @return GenPINumberLOVVO1
     */
    public ViewObjectImpl getGenPINumberLOVVO1() {
        return (ViewObjectImpl)findViewObject("GenPINumberLOVVO1");
    }

    /**
     * Container's getter for genPITypeLOVVO1.
     * @return genPITypeLOVVO1
     */
    public ViewObjectImpl getgenPITypeLOVVO1() {
        return (ViewObjectImpl)findViewObject("genPITypeLOVVO1");
    }

    /**
     * Container's getter for GenCoursesEndDateVO1.
     * @return GenCoursesEndDateVO1
     */
    public ViewObjectImpl getGenCoursesEndDateVO1() {
        return (ViewObjectImpl)findViewObject("GenCoursesEndDateVO1");
    }

    public void updateStatusAfterAssignment(){
        DBTransaction con = getDBTransaction();
        PreparedStatement pstmt = con.createPreparedStatement("UPDATE PI_Sup_Alloc SET Status= 'UnAssigned' WHERE status ='Assigned' AND Assgn_EndDate < convert(varchar(10),getDate(),120)",0);
        try {
            int updateResult = pstmt.executeUpdate();
            con.commit();
            PreparedStatement pstmt1 = con.createPreparedStatement("select * from PI_Sup_Alloc where Status= 'UnAssigned' ",0);
            ResultSet rs = pstmt1.executeQuery();
            ArrayList arr = new ArrayList();
            while(rs.next()){
                if(rs.getString("PI_id")!=null){
                    arr.add(rs.getString("PI_id").toString());
                    System.out.println(rs.getString("PI_id").toString());
                    String str = rs.getString("PI_id").toString();
                    PreparedStatement pstmt2 = con.createPreparedStatement("UPDATE gen_user_mst SET Manager_Id= null WHERE User_Id = '"+str+"' ",0);
                    pstmt2.executeUpdate();
                }
            }
            con.commit();
          
            System.out.println("Update Query Success ::::"+updateResult);
            //con.closeTransaction();
        } catch (SQLException e) {
            e.printStackTrace();
        }
       
    }

    /**
     * Container's getter for HHCAssignWorkCheckVO1.
     * @return HHCAssignWorkCheckVO1
     */
    public ViewObjectImpl getHHCAssignWorkCheckVO1() {
        return (ViewObjectImpl)findViewObject("HHCAssignWorkCheckVO1");
    }
    /**
     * Container's getter for GenCityLOVVO1.
     * @return GenCityLOVVO1
     */
    public ViewObjectImpl getGenCityLOVVO1() {
        return (ViewObjectImpl)findViewObject("GenCityLOVVO1");
    }

    /**
     * Container's getter for GenCountryLOVVO1.
     * @return GenCountryLOVVO1
     */
    public ViewObjectImpl getGenCountryLOVVO1() {
        return (ViewObjectImpl)findViewObject("GenCountryLOVVO1");
    }

    /**
     * Container's getter for PITrainingStatusLOVVO1.
     * @return PITrainingStatusLOVVO1
     */
    public ViewObjectImpl getPITrainingStatusLOVVO1() {
        return (ViewObjectImpl)findViewObject("PITrainingStatusLOVVO1");
    }

    /**
     * Container's getter for GennationalityLOVVO1.
     * @return GennationalityLOVVO1
     */
    public ViewObjectImpl getGennationalityLOVVO1() {
        return (ViewObjectImpl)findViewObject("GennationalityLOVVO1");
    }

    /**
     * Container's getter for PIQualificationLOVVO1.
     * @return PIQualificationLOVVO1
     */
    public ViewObjectImpl getPIQualificationLOVVO1() {
        return (ViewObjectImpl)findViewObject("PIQualificationLOVVO1");
    }


    /**
     * Method for PI Training Activity
     */
         public String UpdateTrainingRow(String PINO,String SNOHidden,String coursename,String coursedesc,Date  startdate,Date enddate,String result,String userName) {
            boolean rowExist = true;
            String resultValue = "failure";
            System.out.println("SNOHidden ::"+SNOHidden);
            ViewObjectImpl TrainingVO = (ViewObjectImpl)getPITrainingActivityUVO1();
            RowSetIterator rsi = TrainingVO.createRowSetIterator(null);
            rsi.reset();
            while(rsi.hasNext()){
                Row row = rsi.next();
                if(SNOHidden.equalsIgnoreCase(row.getAttribute("Sno").toString())){
                    row.setAttribute("CourseDesc", coursedesc);
                    row.setAttribute("Coursename", coursename);
                    row.setAttribute("EndDate", new java.sql.Date(enddate.getTime()));
                    row.setAttribute("PINumber", PINO);
                    row.setAttribute("Result", result);
                       
                         Timestamp sqlDate = new java.sql.Timestamp(new java.util.Date().getTime());   
                    row.setAttribute("StartDate", new java.sql.Date(startdate.getTime()));
                         row.setAttribute("ActiveFlag", "Y");
                         row.setAttribute("UpdatetdBy", userName);
                          row.setAttribute("UpdatedDate", sqlDate);
                    resultValue = "success";
                    break;
                }
                
            }
            if(resultValue.equalsIgnoreCase("success")){
            try{
            
            this.getDBTransaction().commit();
           
            }catch(Exception e){
                e.printStackTrace();
            }
            }
            
            return resultValue;
        }


    /**
     * Container's getter for YesNoLOVVO1.
     * @return YesNoLOVVO1
     */
    public ViewObjectImpl getYesNoLOVVO1() {
        return (ViewObjectImpl)findViewObject("YesNoLOVVO1");
    }
    /**
     * Container's getter for PITrainingLinkVO1.
     * @return PITrainingLinkVO1
     */
    public ViewObjectImpl getPITrainingLinkVO1() {
        return (ViewObjectImpl)findViewObject("PITrainingLinkVO1");
    }
    
    public void piTrainingActivityOnLoad(){
        ViewObjectImpl piTrainingVO = (ViewObjectImpl) getgenPITypeLOVVO1();
        piTrainingVO.setOrderByClause("group_id");
        piTrainingVO.executeQuery();
        ViewObjectImpl TrainingVO =(ViewObjectImpl) getGenPINumberLOVVO1();
         TrainingVO.setWhereClause(" group_id = (select min(Group_id) from Gen_PIType_Mst) ");
        TrainingVO.executeQuery();
        
        ViewObjectImpl TrainingCoursesVO =(ViewObjectImpl) getGenCoursesLOVVO1();
         TrainingCoursesVO.setWhereClause(" group_id = (select min(Group_id) from Gen_PIType_Mst) ");
        TrainingCoursesVO.executeQuery();
    }

    /**
     * Container's getter for SectorWorkVO1.
     * @return SectorWorkVO1
     */
    public ViewObjectImpl getSectorWorkVO1() {
        return (ViewObjectImpl)findViewObject("SectorWorkVO1");
    }
    
    public String validateStartDateTrainingActivate(Date startdate,String piNumber){
        String result = "failure";
        ViewObjectImpl piUserMstVo = (ViewObjectImpl) getPIUserMstUVO1();
        RowSetIterator rsi = piUserMstVo.createRowSetIterator(null);
        rsi.reset();
        while(rsi.hasNext()){
            Row row = rsi.next();
           // System.out.println("HireDate  :::"+row.getAttribute("HireDate").toString());
          //  System.out.println("HireDate  :::"+row.getAttribute("UserId").toString());
            if(row.getAttribute("UserId").toString().equalsIgnoreCase(piNumber)){
                if(row.getAttribute("HireDate") != null){
                System.out.println("Inside  :: HireDate  :::"+row.getAttribute("HireDate").toString());
                String hireDate = ((Date)row.getAttribute("HireDate")).toString().replaceAll("-", "").substring(0,8);
                String startDate = (new java.sql.Date(startdate.getTime())).toString().replaceAll("-", "");
                System.out.println("hireDate ::"+hireDate);
                System.out.println("startDate ::"+startDate);
                if(Integer.parseInt(startDate)>=Integer.parseInt(hireDate)){
                result = "success";
                break;
                }
                }
                result = "noHireDate";
                break;
            }
        }
        piUserMstVo.executeQuery();
        return result;
    }
    
    
    public String validateFromDate(Date startdate,String piNumber){
        String result = "failure";   
        ViewObjectImpl piUserMstVo = (ViewObjectImpl) getPIUserMstUVO1();
        RowSetIterator rsi = piUserMstVo.createRowSetIterator(null);
        rsi.reset();
        while(rsi.hasNext()){
            Row row = rsi.next();
//            System.out.println("HireDate  :::"+row.getAttribute("HireDate").toString());
//            System.out.println("HireDate  :::"+row.getAttribute("UserId").toString());
            
            if(row.getAttribute("UserId").toString().equalsIgnoreCase(piNumber)){
                if(row.getAttribute("HireDate") != null){
                System.out.println("Inside  :: HireDate  :::"+row.getAttribute("HireDate").toString());
                String hireDate = ((Date)row.getAttribute("HireDate")).toString().replaceAll("-", "").substring(0,8);
                String startDate = (new java.sql.Date(startdate.getTime())).toString().replaceAll("-", "");
                System.out.println("hireDate ::"+hireDate);
                System.out.println("startDate ::"+startDate);
                if(Integer.parseInt(startDate)>=Integer.parseInt(hireDate)){
                result = "success";
                break;
                }
                }
                result = "noHireDate";
                break;
            }
        }
        piUserMstVo.executeQuery();
        return result;
    }
    
   

    /**
     * Container's getter for PImonthlyWorkAssignVO2.
     * @return PImonthlyWorkAssignVO2
     */
    public ViewObjectImpl getPImonthlyWorkAssignVO2() {
        return (ViewObjectImpl)findViewObject("PImonthlyWorkAssignVO2");
    }
    public String piDailyDeploymentUpdate(Date dailyAssignDate){
        System.out.println(dailyAssignDate);
        ViewObjectImpl dailyAssignsaveVO = (ViewObjectImpl)getPiDailyWorkAssignVO1();
        dailyAssignsaveVO.setApplyViewCriteriaName("PIDailyAssignVOCriteria");
        java.sql.Date dt = new java.sql.Date(dailyAssignDate.getTime());
        dailyAssignsaveVO.setNamedWhereClauseParam("dailyAssignDate", dt);
        //dailyAssignsaveVO.executeQuery();
//        System.out.println(dailyAssignsaveVO.getRowCount());
       
        RowSetIterator rsi1=dailyAssignsaveVO.createRowSetIterator(null);
        while (rsi1.hasNext()){
            Row rowdaily=rsi1.next();
         if(rowdaily!=null)
         {

         /* commented by karim  
          * if((rowdaily.getAttribute("Shift1")!=null) ){
                 if(rowdaily.getAttribute("Shift1").toString().length()>0){
                    
                     if(rowdaily.getAttribute("Shift1").toString().equals("OFF")){
                         rowdaily.setAttribute("Shift1Flag", "N");
                         rowdaily.setAttribute("Shift2Flag", "N");
                         rowdaily.setAttribute("Shift3Flag", "N");
                     }                                     else{
                           rowdaily.setAttribute("Shift1Flag", "Y");
                           rowdaily.setAttribute("Shift2Flag", "N");
                           rowdaily.setAttribute("Shift3Flag", "N");
                       }
                   
                     if(rowdaily.getAttribute("Shift1").toString().equals("RESERVED")){
                        
                         rowdaily.setAttribute("Shift1Flag", "N");
                         rowdaily.setAttribute("Shift2Flag", "N");
                         rowdaily.setAttribute("Shift3Flag", "N");
                     }
                     else if(!rowdaily.getAttribute("Shift1").toString().equals("OFF")) {
                           rowdaily.setAttribute("Shift1Flag", "Y");
                           rowdaily.setAttribute("Shift2Flag", "N");
                           rowdaily.setAttribute("Shift3Flag", "N");
                       }
                 rowdaily.setAttribute("Shift", "1");
                 String sctrzne=rowdaily.getAttribute("Shift1").toString();
             if(!(rowdaily.getAttribute("Shift1").toString()).equals("OnLeave")){
                 if((rowdaily.getAttribute("Shift1").toString()).equals("ALL") || (rowdaily.getAttribute("Shift1").toString()).equals("RESERVED") || (rowdaily.getAttribute("Shift1").toString()).equals("OFF") ){
                     rowdaily.setAttribute("SectorZone", rowdaily.getAttribute("Shift1").toString());
                     rowdaily.setAttribute("SectorName", rowdaily.getAttribute("Shift1").toString());
                     rowdaily.setAttribute("ZoneName",rowdaily.getAttribute("Shift1").toString());
                 }else{
                 String sector=sctrzne.substring(0,sctrzne.indexOf(" - "));
             //                                 System.out.println(sector);
             //                                 System.out.println(sctrzne.indexOf(" - "));
                 String zone=sctrzne.substring(sctrzne.indexOf(" - ")+3, sctrzne.length());
             //                                 System.out.println(zone);
                 rowdaily.setAttribute("SectorZone", sctrzne);
                 rowdaily.setAttribute("SectorName", sector);
                 rowdaily.setAttribute("ZoneName",zone);
                 }
                     }else{
                             rowdaily.setAttribute("SectorZone", "OnLeave");
                             rowdaily.setAttribute("SectorName", "OnLeave");
                             rowdaily.setAttribute("ZoneName","OnLeave");
                             rowdaily.setAttribute("Shift",0);
                             rowdaily.setAttribute("Shift1Flag", "N");
                             rowdaily.setAttribute("Shift2Flag", "N");
                             rowdaily.setAttribute("Shift3Flag", "N");
                         }
                 }
                 
             }
             //                          System.out.println(rowdaily.getAttribute("Shift2")+"-------");
             if((rowdaily.getAttribute("Shift2")!=null)){
                 if(rowdaily.getAttribute("Shift2").toString().length()>0){
                     if(rowdaily.getAttribute("Shift2").toString().equals("OFF") ){
                         rowdaily.setAttribute("Shift1Flag", "N");
                         rowdaily.setAttribute("Shift2Flag", "N");
                         rowdaily.setAttribute("Shift3Flag", "N");
                     }   else{
                        
                         rowdaily.setAttribute("Shift2Flag", "Y");
                         rowdaily.setAttribute("Shift1Flag", "N");
                         rowdaily.setAttribute("Shift3Flag", "N");
                     }
              
                     if(rowdaily.getAttribute("Shift2").toString().equals("RESERVED")){
                         rowdaily.setAttribute("Shift1Flag", "N");
                         rowdaily.setAttribute("Shift2Flag", "N");
                         rowdaily.setAttribute("Shift3Flag", "N");
                     }   else if(!rowdaily.getAttribute("Shift2").toString().equals("OFF")){
                        
                         rowdaily.setAttribute("Shift2Flag", "Y");
                         rowdaily.setAttribute("Shift1Flag", "N");
                         rowdaily.setAttribute("Shift3Flag", "N");
                     }
                 rowdaily.setAttribute("Shift", "2");
                 String sctrzne=rowdaily.getAttribute("Shift2").toString();
             //                                 System.out.println(sctrzne);
             if(!(rowdaily.getAttribute("Shift2").toString()).equals("OnLeave")){
                         if((rowdaily.getAttribute("Shift2").toString()).equals("ALL") || (rowdaily.getAttribute("Shift2").toString()).equals("RESERVED") || (rowdaily.getAttribute("Shift2").toString()).equals("OFF") ){
                             rowdaily.setAttribute("SectorZone", rowdaily.getAttribute("Shift2").toString());
                             rowdaily.setAttribute("SectorName", rowdaily.getAttribute("Shift2").toString());
                             rowdaily.setAttribute("ZoneName",rowdaily.getAttribute("Shift2").toString());
                         }else{
                 String sector=sctrzne.substring(0,sctrzne.indexOf(" - "));
             //                                 System.out.println(sector);
             //                                 System.out.println(sctrzne.indexOf(" - "));
                 String zone=sctrzne.substring(sctrzne.indexOf(" - ")+3, sctrzne.length());
             //                                 System.out.println(zone);
                 rowdaily.setAttribute("SectorZone", sctrzne);
                 rowdaily.setAttribute("SectorName", sector);
                 rowdaily.setAttribute("ZoneName",zone);
                         }
                     }else{
                             rowdaily.setAttribute("SectorZone", "OnLeave");
                             rowdaily.setAttribute("SectorName", "OnLeave");
                             rowdaily.setAttribute("ZoneName","OnLeave");
                             rowdaily.setAttribute("Shift",0);
                             rowdaily.setAttribute("Shift1Flag", "N");
                             rowdaily.setAttribute("Shift2Flag", "N");
                             rowdaily.setAttribute("Shift3Flag", "N");
                         }
                 }
             }
             if((rowdaily.getAttribute("Shift3")!=null)){
                 if(rowdaily.getAttribute("Shift3").toString().length()>0){
                 rowdaily.setAttribute("Shift", "3");
                 if(rowdaily.getAttribute("Shift3").toString().equals("OFF")){
               
                     rowdaily.setAttribute("Shift1Flag", "N");
                     rowdaily.setAttribute("Shift2Flag", "N");
                     rowdaily.setAttribute("Shift3Flag", "N");
                 }                                else{
                     rowdaily.setAttribute("Shift1Flag", "N");
                     rowdaily.setAttribute("Shift2Flag", "N");
                     rowdaily.setAttribute("Shift3Flag", "Y");
                 }
                 
                if(rowdaily.getAttribute("Shift3").toString().equals("RESERVED")){
                         rowdaily.setAttribute("Shift1Flag", "N");
                         rowdaily.setAttribute("Shift2Flag", "N");
                         rowdaily.setAttribute("Shift3Flag", "N");
                     }             
              
                 else if(!rowdaily.getAttribute("Shift3").toString().equals("OFF")){
                     rowdaily.setAttribute("Shift1Flag", "N");
                     rowdaily.setAttribute("Shift2Flag", "N");
                     rowdaily.setAttribute("Shift3Flag", "Y");
                 }
                 
                 String sctrzne=rowdaily.getAttribute("Shift3").toString();
             //                                 System.out.println(sctrzne);
                if(!(rowdaily.getAttribute("Shift3").toString()).equals("OnLeave")){
                         if((rowdaily.getAttribute("Shift3").toString()).equals("ALL") || (rowdaily.getAttribute("Shift3").toString()).equals("RESERVED") || (rowdaily.getAttribute("Shift3").toString()).equals("OFF")){
                             rowdaily.setAttribute("SectorZone", rowdaily.getAttribute("Shift3").toString());
                             rowdaily.setAttribute("SectorName", rowdaily.getAttribute("Shift3").toString());
                             rowdaily.setAttribute("ZoneName",rowdaily.getAttribute("Shift3").toString());
                         }else{
                 String sector=sctrzne.substring(0,sctrzne.indexOf(" - "));
             //                                 System.out.println(sctrzne);
             //                                 System.out.println(sector);
             //                                 System.out.println(sctrzne.indexOf(" - "));
                 String zone=sctrzne.substring(sctrzne.indexOf(" - ")+3, sctrzne.length());
             //                                 System.out.println(zone);
                 rowdaily.setAttribute("SectorZone", sctrzne);
                 rowdaily.setAttribute("SectorName", sector);
                 rowdaily.setAttribute("ZoneName",zone);
                         }
                     }else{
                             rowdaily.setAttribute("SectorZone", "OnLeave");
                             rowdaily.setAttribute("SectorName", "OnLeave");
                             rowdaily.setAttribute("ZoneName","OnLeave");
                             rowdaily.setAttribute("Shift",0);
                             rowdaily.setAttribute("Shift1Flag", "N");
                             rowdaily.setAttribute("Shift2Flag", "N");
                             rowdaily.setAttribute("Shift3Flag", "N");
                         }
                 }
             }
         
         //Added
         if(rowdaily.getAttribute("Shift1")==null && rowdaily.getAttribute("Shift2")==null && rowdaily.getAttribute("Shift3")==null ){
          rowdaily.setAttribute("Shift", 0);
         }
        
         if(rowdaily.getAttribute("Shift1")==null ){
             rowdaily.setAttribute("Shift1", "");
            
            
         }
         if( rowdaily.getAttribute("Shift2")==null ){
           
             rowdaily.setAttribute("Shift2", "");
             
             
         }
         if( rowdaily.getAttribute("Shift3")==null ){
             
             rowdaily.setAttribute("Shift3", "");
             
         }
         if( rowdaily.getAttribute("SectorZone")==null ){
             
             rowdaily.setAttribute("SectorZone", "");
         }
         if( rowdaily.getAttribute("SectorName")==null ){
             
             rowdaily.setAttribute("SectorName", "");
         }
         if( rowdaily.getAttribute("ZoneName")==null ){
             
             rowdaily.setAttribute("ZoneName", "");
         }
         if( rowdaily.getAttribute("Shift")==null ){
             
             rowdaily.setAttribute("Shift", 0);
         }
         if( rowdaily.getAttribute("Shift1Flag")==null ){
             
             rowdaily.setAttribute("Shift1Flag", "");
         }
         if( rowdaily.getAttribute("Shift2Flag")==null ){
             
             rowdaily.setAttribute("Shift2Flag", "");
         }
         if( rowdaily.getAttribute("Shift3Flag")==null ){
             
             rowdaily.setAttribute("Shift3Flag", "");
         }
         String x = "0";
         if(rowdaily.getAttribute("Shift") == null){
         rowdaily.setAttribute("Shift",x);
        
         }
            rowdaily.setAttribute("UpdatedBy", rowdaily.getAttribute("SupId"));
            rowdaily.setAttribute("UpdatedDate", dt);
        } */
        }
  
//        if( ) {
      this.getDBTransaction().commit();
      
//        }else{
//            return "Failure";
//        }
    }
        return "Success";    
    }

    /**
     * Container's getter for ReportVO1.
     * @return ReportVO1
     */
    public ViewObjectImpl getReportVO1() {
        return (ViewObjectImpl)findViewObject("ReportVO1");
    }

    /**
     * Container's getter for ReportDynamicVO1.
     * @return ReportDynamicVO1
     */
    public ReportDynamicVOImpl getReportDynamicVO1() {
        return (ReportDynamicVOImpl)findViewObject("ReportDynamicVO1");
    }

    /**
     * Container's getter for SectorWorkChangeVO1.
     * @return SectorWorkChangeVO1
     */
    public ViewObjectImpl getSectorWorkChangeVO1() {
        return (ViewObjectImpl)findViewObject("SectorWorkChangeVO1");
    }

    /**
     * Container's getter for SectorWorkAllZonesVO1.
     * @return SectorWorkAllZonesVO1
     */
    public ViewObjectImpl getSectorWorkAllZonesVO1() {
        return (ViewObjectImpl)findViewObject("SectorWorkAllZonesVO1");
    }
    public void getPisAssignedtoSuperviosr(String supid){
        ViewObjectImpl suppivo=(ViewObjectImpl)getPIAllocToSpvsrGrpUVO2();
        suppivo.executeEmptyRowSet();
        suppivo.setApplyViewCriteriaName("PIAllocToSpvsrGrpUVOCriteria");
        suppivo.setNamedWhereClauseParam("supervisor", supid);
        suppivo.executeQuery();
    }

    /**
     * Container's getter for SupervisorPisVO1.
     * @return SupervisorPisVO1
     */
    public ViewObjectImpl getSupervisorPisVO1() {
        return (ViewObjectImpl)findViewObject("SupervisorPisVO1");
    }

    /**
     * Container's getter for PiDailyWorkAssignVO1.
     * @return PiDailyWorkAssignVO1
     */
    public ViewObjectImpl getPiDailyWorkAssignVO1() {
        return (ViewObjectImpl)findViewObject("PiDailyWorkAssignVO1");
    }

    /**
     * Container's getter for PIGroupLOVVO1.
     * @return PIGroupLOVVO1
     */
    public ViewObjectImpl getPIGroupLOVVO1() {
        return (ViewObjectImpl)findViewObject("PIGroupLOVVO1");
    }

    /**
     * Container's getter for GenUserDocsVO1.
     * @return GenUserDocsVO1
     */
    public ViewObjectImpl getGenUserDocsVO1() {
        return (ViewObjectImpl)findViewObject("GenUserDocsVO1");
    }

    /**
     * Container's getter for PINumFromUserMstVO1.
     * @return PINumFromUserMstVO1
     */
    public ViewObjectImpl getPINumFromUserMstVO1() {
        return (ViewObjectImpl)findViewObject("PINumFromUserMstVO1");
    }

    /**
     * Container's getter for PILeaveMangementVO2.
     * @return PILeaveMangementVO2
     */
    public PILeaveMangementVOImpl getPILeaveMangementVO2() {
        return (PILeaveMangementVOImpl)findViewObject("PILeaveMangementVO2");
    }

    /**
     * Container's getter for PiobservationsVO2.
     * @return PiobservationsVO2
     */
    public ViewObjectImpl getPiobservationsVO2() {
        return (ViewObjectImpl)findViewObject("PiobservationsVO2");
    }

    /**
     * Container's getter for HHDeviceMstUVO1.
     * @return HHDeviceMstUVO1
     */
    public HHDeviceMstUVOImpl getHHDeviceMstUVO1() {
        return (HHDeviceMstUVOImpl)findViewObject("HHDeviceMstUVO1");
    }

    /**
     * Container's getter for HHCAssignVO2.
     * @return HHCAssignVO2
     */
    public HHCAssignVOImpl getHHCAssignVO2() {
        return (HHCAssignVOImpl)findViewObject("HHCAssignVO2");
    }

    /**
     * Container's getter for HHCAssignDocsVO1.
     * @return HHCAssignDocsVO1
     */
    public ViewObjectImpl getHHCAssignDocsVO1() {
        return (ViewObjectImpl)findViewObject("HHCAssignDocsVO1");
    }

    /**
     * Container's getter for PIObservationDocMstVO1.
     * @return PIObservationDocMstVO1
     */
    public ViewObjectImpl getPIObservationDocMstVO1() {
        return (ViewObjectImpl)findViewObject("PIObservationDocMstVO1");
    }

    /**
     * Container's getter for PIObservationDocsVO1.
     * @return PIObservationDocsVO1
     */
    public ViewObjectImpl getPIObservationDocsVO1() {
        return (ViewObjectImpl)findViewObject("PIObservationDocsVO1");
    }

    /**
     * Container's getter for PIObservationDocsVO2.
     * @return PIObservationDocsVO2
     */
    public PIObservationDocsVOImpl getPIObservationDocsVO2() {
        return (PIObservationDocsVOImpl)findViewObject("PIObservationDocsVO2");
    }

    /**
     * Container's getter for PIMonthlyAssignNewVO1.
     * @return PIMonthlyAssignNewVO1
     */
    public ViewObjectImpl getPIMonthlyAssignNewVO1() {
        return (ViewObjectImpl)findViewObject("PIMonthlyAssignNewVO1");
    }

    /**
     * Container's getter for GenpiShiftMstVO1.
     * @return GenpiShiftMstVO1
     */
    public ViewObjectImpl getGenpiShiftMstVO1() {
        return (ViewObjectImpl)findViewObject("GenpiShiftMstVO1");
    }

    /**
     * Container's getter for GENREFCODESVWVO1.
     * @return GENREFCODESVWVO1
     */
    public ViewObjectImpl getGENREFCODESVWVO1() {
        return (ViewObjectImpl)findViewObject("GENREFCODESVWVO1");
    }
    public void getMonthlDates(String piid,Date fromdate,Date todate)
    {
          // getTransaction().clearEntityCache("com.imum.cpms.model.staffdeploy.eo.PImonthlyWorkAssign");
          String loginuser="";
          ADFContext adfctx = ADFContext.getCurrent();
                 if(adfctx.getSessionScope().get("loggedinUserid")!=null){
                   loginuser=adfctx.getSessionScope().get("loggedinUserid").toString();
                     this.getSession().getUserData().put("loginuser", loginuser);
                 }else{
                     loginuser=null;
                 }
                 if(loginuser==null){
                     loginuser="Supervisor1";
                     this.getSession().getUserData().put("loginuser", loginuser);
                 }
            ViewObjectImpl pimonVO=(ViewObjectImpl)getPIMonthlyAssignNewVO1();
            ViewCriteria vc= pimonVO.getViewCriteria("PIMonthlyAssignNewVOCriteria");
            pimonVO.applyViewCriteria(vc); 
            java.sql.Date dt1 = new java.sql.Date(fromdate.getTime());
            java.sql.Date dt2 = new java.sql.Date(todate.getTime()); 
            pimonVO.setNamedWhereClauseParam("fromdate", dt1); 
            pimonVO.setNamedWhereClauseParam("piid", piid);
            pimonVO.setNamedWhereClauseParam("todate", dt2); 
            pimonVO.setNamedWhereClauseParam("supid", loginuser);
            System.out.println( pimonVO.getQuery());
            pimonVO.executeQuery();
            System.out.println("rowcount:"+pimonVO.getEstimatedRowCount());
            long diff = todate.getTime() - fromdate.getTime();
              System.out.println ("Days: " + TimeUnit.DAYS.convert(diff, TimeUnit.MILLISECONDS));
            long totaldays=TimeUnit.DAYS.convert(diff, TimeUnit.MILLISECONDS);
            Boolean insertflag=Boolean.TRUE;
            
            ViewObjectImpl piassign = getPIAllocidSupIDVO1();
            piassign.setApplyViewCriteriaName("PIAllocidSupIDVOCriteria");
            piassign.setNamedWhereClauseParam("piid",piid);
            piassign.setNamedWhereClauseParam("pistatus","Assigned");
            System.out.println("PI Allocation Query is:::"+piassign.getQuery());
            piassign.executeQuery();
            String Allocid="";
            String supid="";
            if(piassign.getRowCount()!=0){
            RowSetIterator assignrsi = piassign.createRowSetIterator(null);
            Row allocidrow=assignrsi.first();
            Allocid=allocidrow.getAttribute("Allocid").toString();
            supid=allocidrow.getAttribute("AssignedTo").toString();
            }
            Calendar c2 = Calendar.getInstance();
            
            RowSetIterator rsi1 = null;
            java.sql.Timestamp currdate = new java.sql.Timestamp(c2.getTime().getTime());
            pimonVO.setRangeSize(-1);
                  for(int i=0;i<=totaldays;i++)
                  {
                      insertflag=Boolean.TRUE;  
                      rsi1=pimonVO.createRowSetIterator(null);
                      rsi1.reset();
                      Calendar c = Calendar.getInstance();
                      c.setTime(fromdate); 
                      c.add(Calendar.DATE, i);
                      c.set(Calendar.HOUR, 0);
                      c.set(Calendar.MINUTE, 0);
                      c.set(Calendar.SECOND, 0);
                      c.set(Calendar.MILLISECOND, 0);
                      java.sql.Timestamp sq = new java.sql.Timestamp(c.getTime().getTime());
                      
                      while (rsi1.hasNext()){
                          Row rowdaily=rsi1.next();
                         java.sql.Timestamp exstdt= (java.sql.Timestamp)rowdaily.getAttribute("AssgnDate");
                         String dbstatus= (String) rowdaily.getAttribute("dbval");
                          Calendar c1 = Calendar.getInstance();
                          c1.setTimeInMillis(exstdt.getTime()); // getting existind date from db
                          c1.set(Calendar.HOUR, 0);
                          c1.set(Calendar.MINUTE, 0);
                          c1.set(Calendar.SECOND, 0);
                          c1.set(Calendar.MILLISECOND, 0);
                          if("true".equalsIgnoreCase(dbstatus))
                          if(c1.compareTo(c)==0)
                          {
                              insertflag=Boolean.FALSE;
                          }
                      }
                      rsi1.closeRowSetIterator();
                      if(insertflag)
                      {
                      Row r=pimonVO.createRow();
                     
                      r.setAttribute("AssgnDate", sq);
                          r.setAttribute("AllocId", Allocid);
                          r.setAttribute("PIid", piid);
                          r.setAttribute("SupId", supid);
                          r.setAttribute("ActiveFlag", "Y");
                          r.setAttribute("CreatedBy", supid);
                          r.setAttribute("CreatedDate", currdate);
                          r.setNewRowState(Row.STATUS_INITIALIZED);
                         // pimonVO.insertRow(r);
                         pimonVO.last();
                        int index= pimonVO.getCurrentRowIndex();
                        pimonVO.insertRowAtRangeIndex(index+1,r);
                      }
                  }
             
            
//             pimonVO=(ViewObjectImpl)getPIMonthlyAssignNewVO1();
//            ViewCriteria vc1= pimonVO.getViewCriteria("PIMonthlyAssignorderbyasgndt");
//            pimonVO.applyViewCriteria(null);
//            pimonVO.applyViewCriteria(vc1);
//            pimonVO.clearCache();
//            pimonVO.executeQuery();
//            
        }
    public void resetWorkAssignNewVO(){
        ViewObjectImpl voa=(ViewObjectImpl)getPIMonthlyAssignNewVO1();
        voa.clearCache();
        voa.setWhereClause("1=2");
        voa.executeQuery();
        voa.setWhereClause(null);
    }
    public void resetdailyWorkAssignNewVO(){
        ViewObjectImpl voa=(ViewObjectImpl)getPiDailyWorkAssignVO1();
        voa.clearCache();
        voa.setWhereClause("1=2");
        voa.executeQuery();
        voa.setWhereClause(null);
    }
    public String saveDB(){
        String msg="success";
        try{ 
        this.getDBTransaction().commit();
        }
         catch(Exception e){
            if (e instanceof DMLException){
            /* we had a unique constraint on pi,assgndate and shit. if fails will get DMLException here... */
               e.printStackTrace();
               msg="sqlfail"; 
                        }
            else if (e instanceof RowInconsistentException){
           e.printStackTrace();
           ViewObjectImpl voa=(ViewObjectImpl)getPIMonthlyAssignNewVO1();
           voa.clearCache();
           ViewObjectImpl voa1=(ViewObjectImpl)getPiDailyWorkAssignVO1();
           voa1.clearCache();
            saveDB();
           // msg="sqlfail";
                        }
            else{
            e.printStackTrace();
            msg="fail";
            }
        }
        return msg;
        }
        
   
    /**
     * Container's getter for ZoneMstVO1.
     * @return ZoneMstVO1
     */
    public ViewObjectImpl getZoneMstVO1() {
        return (ViewObjectImpl)findViewObject("ZoneMstVO1");
    }

    /**
     * Container's getter for SectorWorkNewVO1.
     * @return SectorWorkNewVO1
     */
    public ViewObjectImpl getSectorWorkNewVO1() {
        return (ViewObjectImpl)findViewObject("SectorWorkNewVO1");
    }
    public void callRollback(){
        try{
        getDBTransaction().rollback();
        }
        catch(Exception e){
            e.printStackTrace();
        }
    }
    public String  createTab1(String piselected,Date currentdate){
            String loginuser="";
            ADFContext adfctx = ADFContext.getCurrent();
                   if(adfctx.getSessionScope().get("loggedinUserid")!=null){
                     loginuser=adfctx.getSessionScope().get("loggedinUserid").toString();
                       this.getSession().getUserData().put("loginuser", loginuser);
                   }else{
                       loginuser=null;
                   }
                   if(loginuser==null){
                       loginuser="Supervisor1";
                       this.getSession().getUserData().put("loginuser", loginuser);
                   }
        ViewObjectImpl pimonVO=(ViewObjectImpl)getPImonthlyWorkAssignVO1();
        ViewCriteria vc= pimonVO.getViewCriteria("PImonthlyWorkAssignVOCriteriaNew");
        pimonVO.applyViewCriteria(vc); 
        java.sql.Date dt1 = new java.sql.Date(currentdate.getTime());
        pimonVO.setNamedWhereClauseParam("newdate", dt1); 
        pimonVO.setNamedWhereClauseParam("newpiid", piselected);
        pimonVO.setNamedWhereClauseParam("supervisorid", loginuser);
        System.out.println( pimonVO.getQuery());
        pimonVO.executeQuery();   
        System.out.println("rowcount:"+pimonVO.getEstimatedRowCount());
        
        Boolean insertflag=Boolean.TRUE;
        
        ViewObjectImpl piassign = getPIAllocidSupIDVO1();
        piassign.setApplyViewCriteriaName("PIAllocidSupIDVOCriteria");
        piassign.setNamedWhereClauseParam("piid",piselected);
        piassign.setNamedWhereClauseParam("pistatus","Assigned");
        System.out.println("PI Allocation Query is:::"+piassign.getQuery());
        piassign.executeQuery();
        String Allocid="";
        String supid="";
        if(piassign.getRowCount()!=0){
        RowSetIterator assignrsi = piassign.createRowSetIterator(null);
        Row allocidrow=assignrsi.first();
        Allocid=allocidrow.getAttribute("Allocid").toString();
        supid=allocidrow.getAttribute("AssignedTo").toString();
        }
        RowSetIterator rsi1 = null;
            Calendar c = Calendar.getInstance();
            c.setTime(currentdate); 
            c.add(Calendar.DATE,0);
            c.set(Calendar.HOUR, 0);
            c.set(Calendar.MINUTE, 0);
            c.set(Calendar.SECOND, 0);
            c.set(Calendar.MILLISECOND, 0);
            java.sql.Timestamp sq = new java.sql.Timestamp(c.getTime().getTime());
            System.out.println(sq);
            pimonVO.setRangeSize(-1);
            Calendar c2 = Calendar.getInstance();
            java.sql.Timestamp currdate = new java.sql.Timestamp(c2.getTime().getTime());
        if(pimonVO.getEstimatedRowCount()>0){
                        Row r=pimonVO.createRow();
                        r.setAttribute("AssgnDate", sq);
                        r.setAttribute("AllocId", Allocid);
                        r.setAttribute("PIid", piselected);
                        r.setAttribute("SupId", supid);
                        r.setAttribute("ActiveFlag", "Y");
                        r.setAttribute("CreatedBy", supid);
                        r.setAttribute("CreatedDate", currdate);
                        r.setNewRowState(Row.STATUS_INITIALIZED);
                        //pimonVO.insertRow(r);
                        pimonVO.last();
                        int index= pimonVO.getCurrentRowIndex();
                        pimonVO.insertRowAtRangeIndex(index+1,r);
         }
        else{
            FacesContext.getCurrentInstance().addMessage(null,
                                                         new FacesMessage(FacesMessage.SEVERITY_ERROR,
                                                                          "Sample Error message",
                                                                          " No record exist for the PI in the given date.")); 
            return null;
        }
        return "success";
        }


    /**
     * Container's getter for SectorWorkNewVO2.
     * @return SectorWorkNewVO2
     */
    public ViewObjectImpl getSectorWorkNewVO2() {
        return (ViewObjectImpl)findViewObject("SectorWorkNewVO2");
    }
    
    public void callPopulatePILeaveProc(Integer sno,String piid,java.sql.Date fromdate,java.sql.Date todate,String flag,String supid)
        {
           
            try {
                                 if(sno != null)
                        {
                            CallableStatement stmt = null;
                                try {
                                    stmt = getDBTransaction().createCallableStatement("{call  GEN_Populate_PI_Leave(?,?,?,?,?,?) }", 0);
                                    stmt.setInt(1,sno); 
                                    stmt.setString(2,piid);
                                    stmt.setDate(3,fromdate);
                                    stmt.setDate(4,todate);
                                    stmt.setString(5,flag);
                                    stmt.setString(6, supid);
                                    System.out.println("procedure is:::"+stmt);
                                    stmt.execute();           
                                    getDBConnection1().commit();
                                    
                                }  catch (Exception e) {
                                    System.out.println("callPopulatePILeave procedure exception : "+e.getMessage());
                                }
                            finally {
                                try {
                                    if(stmt!=null)
                                       stmt.close();
                                } catch(Exception e) {
                                    System.out.println("Closing the statement error..." + e);
                                }
                            }
                        }       
                    }
                                        
                
                
             catch (Exception e) {
                System.out.println("callPopulatePILeave exception : "+e.getMessage());
            }
         System.out.println("Success");    
        }
    
    /**
     * Container's getter for PIAttendenceStatusVO1.
     * @return PIAttendenceStatusVO1
     */
    public ViewObjectImpl getPIAttendenceStatusVO1() {
        return (ViewObjectImpl)findViewObject("PIAttendenceStatusVO1");
    }
    public void emptyPiDailywork(){
        ViewObject pidailyVO=(ViewObject)getPiDailyWorkAssignVO1();
        pidailyVO.executeEmptyRowSet();
        ViewObject pimonthlyVO=(ViewObject)getPIMonthlyAssignNewVO1();
        pimonthlyVO.executeEmptyRowSet();
    }

    /**
     * Container's getter for SectorDistinctVO1.
     * @return SectorDistinctVO1
     */
    public ViewObjectImpl getSectorDistinctVO1() {
        return (ViewObjectImpl)findViewObject("SectorDistinctVO1");
    }

    /**
     * Container's getter for PVTHeaderMapRVO1.
     * @return PVTHeaderMapRVO1
     */
    public ViewObjectImpl getPVTHeaderMapRVO1() {
        return (ViewObjectImpl)findViewObject("PVTHeaderMapRVO1");
    }

    /**
     * Container's getter for GenSectorMstMapRVO1.
     * @return GenSectorMstMapRVO1
     */
    public ViewObjectImpl getGenSectorMstMapRVO1() {
        return (ViewObjectImpl)findViewObject("GenSectorMstMapRVO1");
    }

    /**
     * Container's getter for genUserMstGidRVO1.
     * @return genUserMstGidRVO1
     */
    public ViewObjectImpl getgenUserMstGidRVO1() {
        return (ViewObjectImpl)findViewObject("genUserMstGidRVO1");
    }

    /**
     * Container's getter for genPiTypeMstRVO1.
     * @return genPiTypeMstRVO1
     */
    public ViewObjectImpl getgenPiTypeMstRVO1() {
        return (ViewObjectImpl)findViewObject("genPiTypeMstRVO1");
    }

    /**
     * Container's getter for supLovRVO1.
     * @return supLovRVO1
     */
    public ViewObjectImpl getsupLovRVO1() {
        return (ViewObjectImpl)findViewObject("supLovRVO1");
    }

    /**
     * Container's getter for PiobservationsVO3.
     * @return PiobservationsVO3
     */
    public ViewObjectImpl getPiobservationsVO3() {
        return (ViewObjectImpl)findViewObject("PiobservationsVO3");
    }
    public void getSupId(){
                String userName = "";
                ADFContext adfctx = ADFContext.getCurrent();
                if(adfctx.getSessionScope().get("loggedinUserid")!=null){
                    userName = adfctx.getSessionScope().get("loggedinUserid").toString(); 
                }
                String loggedinUser=userName;
            FacesContext facesContext = FacesContext.getCurrentInstance();
            ExternalContext externalContext = facesContext.getExternalContext();
            HttpSession httpSession = (HttpSession) externalContext.getSession(true);
            httpSession.setAttribute("supervisorId", loggedinUser);
            
            ViewObjectImpl userMstVO=(ViewObjectImpl)getgenUserMstGidRVO1();
            ViewObjectImpl piTypeMstVO=(ViewObjectImpl)  getgenPiTypeMstRVO1();
            ViewObject viewObject1 =getPIAllocToSpvsrGrpUVO2();
                        int userGroupid=0;
                        int piTypeGid=0;
                        String senSup="SSU";
                        String sup="SUP";
                       userMstVO.setWhereClause("User_Id='"+userName+"'");
                       System.out.println("userMst qry:::"+userMstVO.getQuery());
                       userMstVO.executeQuery();
                       Row r=userMstVO.first();
                       if(r!=null){
                        userGroupid=(Integer)r.getAttribute("groupid");
                       }
                       piTypeMstVO.executeQuery();
                       Row r1=piTypeMstVO.first();
                       if(r1!=null){
                        piTypeGid=(Integer)r1.getAttribute("groupid");
                       }
                       if(userGroupid==piTypeGid){
                           httpSession.setAttribute("userType", senSup);
                       }
                       else{
                           httpSession.setAttribute("userType", sup);
                       }
        
        }
    public void getLoggedSup(){
        String userName = "";
        ADFContext adfctx = ADFContext.getCurrent();
        if(adfctx.getSessionScope().get("loggedinUserid")!=null){
            userName = adfctx.getSessionScope().get("loggedinUserid").toString(); 
        }
        String loggedinUser=userName;
        FacesContext facesContext = FacesContext.getCurrentInstance();
        ExternalContext externalContext = facesContext.getExternalContext();
        HttpSession httpSession = (HttpSession) externalContext.getSession(true);
        httpSession.setAttribute("supervisorId", loggedinUser);
        
        ViewObjectImpl userMstVO=(ViewObjectImpl)getgenUserMstGidRVO1();
        ViewObjectImpl piTypeMstVO=(ViewObjectImpl)  getgenPiTypeMstRVO1();
        ViewObject viewObject1 =getPIAllocToSpvsrGrpUVO2();
                    int userGroupid=0;
                    int piTypeGid=0;
                    String senSup="SeniourSupervisor";
                   userMstVO.setWhereClause("User_Id='"+userName+"'");
                   System.out.println("userMst qry:::"+userMstVO.getQuery());
                   userMstVO.executeQuery();
                   Row r=userMstVO.first();
                   if(r!=null){
                    userGroupid=(Integer)r.getAttribute("groupid");
                   }
                   piTypeMstVO.executeQuery();
                   Row r1=piTypeMstVO.first();
                   if(r1!=null){
                    piTypeGid=(Integer)r1.getAttribute("groupid");
                   }
                   if(userGroupid==piTypeGid){
                       httpSession.setAttribute("seniourSup", senSup);
                       httpSession.setAttribute("PICount", 1);
                       viewObject1.setWhereClause("1=2");
                       viewObject1.executeQuery();
                                  } 
                   else{
        try{
        ViewObject viewObject =getPIAllocToSpvsrGrpUVO2();
        viewObject.setWhereClause("AssignedTo='"+userName+"' and status='Assigned'");
        //System.out.println("onclick menu PI Unassignment qry is:::"+viewObject.getQuery());
        viewObject.executeQuery();
            int count=viewObject.getRowCount();
            if(count==0){
                FacesContext.getCurrentInstance().addMessage(null,
                                                             new FacesMessage(FacesMessage.SEVERITY_INFO,
                                                                              "Sample Info message",
                                                                              " No PI exist for the Logged in User.")); 
                httpSession.setAttribute("PICount", count);  
            }
        }
        catch(Exception e){
            e.printStackTrace();
        }
                   }
    }
    public String piUnassign(){
        RowSet duplicateRowSet = null;
        ViewObjectImpl unassign=null;
        ViewObject viewObject=null;
        String msg="success";
        try{
        viewObject =getPIAllocToSpvsrGrpUVO2();
        duplicateRowSet = viewObject.createRowSet("duplicateRowSet1");
        duplicateRowSet.first();
        Row[] rowsToRoute =
            duplicateRowSet.getFilteredRows("SelectedRow", true);
        if (rowsToRoute.length > 0) {
        for (Row rw : rowsToRoute) {
           String selectedPI=(String)rw.getAttribute("PIid");
            String unassingpi=selectedPI;
            unassign=(ViewObjectImpl)getPiDailyWorkAssignVO1();
            unassign.setApplyViewCriteriaName("PImonthlyWorkUnAssignVOCriteria1");
                    unassign.setNamedWhereClauseParam("unassignpiid", unassingpi);
                    //System.out.println("PImontly qry is:::"+unassign.getQuery());
                    unassign.executeQuery();
                    RowSetIterator rsid=unassign.createRowSetIterator(null);
                    while(rsid.hasNext()){
                          Row row1=rsid.next();
                         row1.setAttribute("ActiveFlag","N");
                    }
            ViewObjectImpl pisupallocation=(ViewObjectImpl)getPIAllocToSpvsrGrpUVO1();
                    pisupallocation.setWhereClause("PI_id='"+unassingpi+"' and status='Assigned'");
                   // System.out.println("pisupalloc qry is:::"+ pisupallocation.getQuery());
                    pisupallocation.executeQuery();
                    Row pisupallocrow=pisupallocation.first();
                    if(pisupallocrow!=null){
                    pisupallocrow.setAttribute("status", "UnAssigned");
                    }
            ViewObjectImpl genusrpi=(ViewObjectImpl)getPIUserMstUVO1();
                    genusrpi.setWhereClause("User_Id='"+unassingpi+"'");
                    //System.out.println("usermst qry is:::"+genusrpi.getQuery());
                    genusrpi.executeQuery();
                    Row genusrpirow=genusrpi.first();
                    if(genusrpirow!=null)
                    genusrpirow.setAttribute("ManagerId",null);
        }
            try{
                    this.getDBTransaction().commit();
                    }
                    catch(Exception e){
                     e.printStackTrace();  
                     msg="fail";
                    }
        }
        else{
            FacesContext.getCurrentInstance().addMessage(null,
                                                         new FacesMessage(FacesMessage.SEVERITY_INFO,
                                                                          "Sample Info message",
                                                                          "Please select at least one PI to Un-Assign."));  
            return null;
        }
        }
        catch(Exception e){
            e.printStackTrace();
        }
        finally{
            if (duplicateRowSet != null) {
                            duplicateRowSet.closeRowSet();
                        }
       }
        return msg;
  }

}
